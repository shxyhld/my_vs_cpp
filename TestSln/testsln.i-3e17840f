# 1 "d:\\my_project\\testsln\\testsln\\testsln.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 337 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "d:\\my_project\\testsln\\testsln\\testsln.cpp" 2



# 1 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 1







# 1 "D:\\my_project\\TestSln\\TestSln/targetver.h" 1







# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h" 1
# 20 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h"
#pragma warning(push)

#pragma warning(disable: 4001)
# 279 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\SDKDDKVer.h"
#pragma warning(pop)
# 8 "D:\\my_project\\TestSln\\TestSln/targetver.h" 2
# 8 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h" 1
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 45 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 1 3
# 2381 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 3
extern "C" {
# 2987 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 3
}



# 1 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 1 3
# 22 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 3
extern "C" {
# 354 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\ConcurrencySal.h" 3
}
# 2990 "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared\\sal.h" 2 3
# 45 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 1 3
# 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
#pragma pack(push, 8)


extern "C" {
# 30 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
        typedef unsigned int uintptr_t;
# 39 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
        typedef char* va_list;
# 118 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
}



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    }
# 157 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h" 3
#pragma pack(pop)
# 46 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 2 3
# 81 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
#pragma pack(push, 8)
# 81 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
 extern "C" {
# 198 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    typedef unsigned int size_t;
    typedef int ptrdiff_t;
    typedef int intptr_t;



    typedef bool __vcrt_bool;
# 247 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];


    }
# 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);


        void __fastcall __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);






extern uintptr_t __security_cookie;







}
# 317 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 3
#pragma pack(pop)
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h" 2


#pragma pack(push, 8)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
 extern "C" {
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool __crt_bool;
# 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    __declspec(dllimport) void __cdecl _invalid_parameter(
                   wchar_t const*,
                   wchar_t const*,
                   wchar_t const*,
                   unsigned int,
                   uintptr_t
        );


__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
               wchar_t const*,
               wchar_t const*,
               wchar_t const*,
               unsigned int,
               uintptr_t);
# 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        typedef __time64_t time_t;
# 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    typedef size_t rsize_t;
# 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}
# 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
 extern "C" {
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")






__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}




__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}
# 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
}
# 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h" 2


#pragma pack(push, 8)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
 extern "C" {
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);
# 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fgetwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
            wchar_t _Character,
            FILE* _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
         wchar_t _Character
    );


__declspec(dllimport) wint_t __cdecl getwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl getwchar(void);




__declspec(dllimport) wchar_t* __cdecl fgetws(
                                 wchar_t* _Buffer,
                                 int _BufferCount,
                                 FILE* _Stream
    );


__declspec(dllimport) int __cdecl fputws(
            wchar_t const* _Buffer,
            FILE* _Stream
    );



__declspec(dllimport) wchar_t* __cdecl _getws_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline wchar_t* __cdecl _getws_s(wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }






__declspec(dllimport) wint_t __cdecl putwc(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
         wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
           wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
            wint_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) FILE * __cdecl _wfdopen(
           int _FileHandle,
           wchar_t const* _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfreopen(
            wchar_t const* _FileName,
            wchar_t const* _Mode,
            FILE* _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode,
                              FILE* _OldStream
    );


__declspec(dllimport) FILE* __cdecl _wfsopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
           int _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrorMessage
    );




    __declspec(dllimport) FILE* __cdecl _wpopen(
               wchar_t const* _Command,
               wchar_t const* _Mode
        );



__declspec(dllimport) int __cdecl _wremove(
           wchar_t const* _FileName
    );





__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
               wchar_t const* _Directory,
               wchar_t const* _FilePrefix
    );





__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
            wint_t _Character,
            FILE* _Stream
    );
# 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl wprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _wprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vfwscanf_l(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwscanf(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwscanf_s_l(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwscanf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }




__inline int __cdecl _vwscanf_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwscanf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwscanf_s_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwscanf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fwscanf_l(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fwscanf(
                                 FILE* const _Stream,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwscanf_s_l(
                                             FILE* const _Stream,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwscanf_s(
                                       FILE* const _Stream,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _wscanf_l(
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl wscanf(
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wscanf_s_l(
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wscanf_s(
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf_l(
                                                wchar_t* const _Buffer,
                                                size_t const _BufferCount,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


#pragma warning(push)
#pragma warning(disable: 4793)



__inline int __cdecl _vsnwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl __vswprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vswprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}




__inline int __cdecl vswprintf(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}





    __inline int __cdecl vswprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_l(_Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}




__inline int __cdecl __swprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl swprintf(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)


#pragma warning(disable: 4793 4996)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



__inline int __cdecl _swprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl swprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
;
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable: 4793)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
# 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; }
# 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwprintf_l(
                                             wchar_t* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
;
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable: 4793)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
# 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
; }
# 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



 extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int swprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl vswprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            ) throw()
        {
#pragma warning(suppress: 28719)
 return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int _swprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl _vswprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
                                                    va_list _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }



#pragma warning(pop)
# 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                           unsigned __int64 _Options,
                                           wchar_t const* _Buffer,
                                           size_t _BufferCount,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );



__inline int __cdecl _vswscanf_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl vswscanf(
                                  wchar_t const* _Buffer,
                                  wchar_t const* _Format,
                                  va_list _ArgList
    )



{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}




__inline int __cdecl _vswscanf_s_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vswscanf_s(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
# 1978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
                                           va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vsnwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
                                             va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _swscanf_l(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
                                           _locale_t _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl swscanf(
                                 wchar_t const* const _Buffer,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl swscanf_s(
                                       wchar_t const* const _Buffer,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf(
                                     wchar_t const* const _Buffer,
                                     size_t const _BufferCount,
                                     wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s(
                                      wchar_t const* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}
# 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
 extern "C" {
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
              FILE* _Stream,
              char*** _Base,
              char*** _Pointer,
              int** _Count
    );
# 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    __declspec(dllimport) errno_t __cdecl clearerr_s(
                FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl fopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode
        );



    __declspec(dllimport) size_t __cdecl fread_s(
                                                                           void* _Buffer,
                                                                           size_t _BufferSize,
                                                                           size_t _ElementSize,
                                                                           size_t _ElementCount,
                                                                           FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl freopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode,
                                  FILE* _OldStream
        );


    __declspec(dllimport) char* __cdecl gets_s(
                              char* _Buffer,
                              rsize_t _Size
        );


    __declspec(dllimport) errno_t __cdecl tmpfile_s(
                                     FILE** _Stream
        );



    __declspec(dllimport) errno_t __cdecl tmpnam_s(
                              char* _Buffer,
                              rsize_t _Size
        );



__declspec(dllimport) void __cdecl clearerr(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl fclose(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);


__declspec(dllimport) FILE* __cdecl _fdopen(
           int _FileHandle,
           char const* _Mode
    );


__declspec(dllimport) int __cdecl feof(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl ferror(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl fgetc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);



__declspec(dllimport) int __cdecl fgetpos(
            FILE* _Stream,
            fpos_t* _Position
    );



__declspec(dllimport) char* __cdecl fgets(
                              char* _Buffer,
                              int _MaxCount,
                              FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fileno(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl fopen(
           char const* _FileName,
           char const* _Mode
    );




__declspec(dllimport) int __cdecl fputc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
         int _Character
    );



__declspec(dllimport) int __cdecl fputs(
            char const* _Buffer,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl freopen(
            char const* _FileName,
            char const* _Mode,
            FILE* _Stream
    );


__declspec(dllimport) FILE* __cdecl _fsopen(
           char const* _FileName,
           char const* _Mode,
           int _ShFlag
    );



__declspec(dllimport) int __cdecl fsetpos(
            FILE* _Stream,
            fpos_t const* _Position
    );



__declspec(dllimport) int __cdecl fseek(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );



__declspec(dllimport) int __cdecl _fseeki64(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );



__declspec(dllimport) long __cdecl ftell(
            FILE* _Stream
    );



__declspec(dllimport) __int64 __cdecl _ftelli64(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );



__declspec(dllimport) int __cdecl getc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl getchar(void);


__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }




__declspec(dllimport) int __cdecl _getw(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
               char const* _ErrorMessage
    );





    __declspec(dllimport) int __cdecl _pclose(
                FILE* _Stream
        );


    __declspec(dllimport) FILE* __cdecl _popen(
               char const* _Command,
               char const* _Mode
        );





__declspec(dllimport) int __cdecl putc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
         int _Character
    );


__declspec(dllimport) int __cdecl puts(
           char const* _Buffer
    );



__declspec(dllimport) int __cdecl _putw(
            int _Word,
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
           char const* _FileName
    );


__declspec(dllimport) int __cdecl rename(
           char const* _OldFileName,
           char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
           char const* _FileName
    );



    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
               char const* _FileName
        );





__declspec(dllimport) void __cdecl rewind(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl setbuf(
                                                        FILE* _Stream,
                                                        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
         int _Maximum
    );



__declspec(dllimport) int __cdecl setvbuf(
                                 FILE* _Stream,
                                 char* _Buffer,
                                 int _Mode,
                                 size_t _Size
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
               char const* _DirectoryName,
               char const* _FilePrefix
    );





               __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);







__declspec(dllimport) int __cdecl ungetc(
            int _Character,
            FILE* _Stream
    );
# 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fclose_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fflush_nolock(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fgetc_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fputc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );



__declspec(dllimport) size_t __cdecl _fread_nolock_s(
                                                                     void* _Buffer,
                                                                     size_t _BufferSize,
                                                                     size_t _ElementSize,
                                                                     size_t _ElementCount,
                                                                     FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );


__declspec(dllimport) long __cdecl _ftell_nolock(
            FILE* _Stream
    );


__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
            int _Character,
            FILE* _Stream
    );
# 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int* __cdecl __p__commode(void);
# 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfprintf_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfprintf_s_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfprintf_p_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vprintf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fprintf_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(dllimport) int __cdecl _set_printf_count_output(
         int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fprintf_p_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl printf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl printf_s(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _printf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _Arglist
    );


__inline int __cdecl _vfscanf_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfscanf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfscanf_s_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vfscanf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vscanf_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vscanf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vscanf_s_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vscanf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fscanf_l(
                                           FILE* const _Stream,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fscanf(
                                 FILE* const _Stream,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fscanf_s_l(
                                             FILE* const _Stream,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fscanf_s(
                                       FILE* const _Stream,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _scanf_l(
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl scanf(
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scanf_s_l(
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl scanf_s(
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}
# 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsprintf_l(
                           char* const _Buffer,
                           char const* const _Format,
                           _locale_t const _Locale,
                           va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl vsprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl _vsprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}






    __inline int __cdecl vsprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vsnprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    __inline int __cdecl vsnprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      size_t const _MaxCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vscprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vsnprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sprintf_l(
                                            char* const _Buffer,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl sprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)
#pragma warning(disable: 4996)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl sprintf( char *_Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



__inline int __cdecl _sprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl sprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
;
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(disable: 4793)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
# 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
; }







__inline int __cdecl _sprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _sprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
;
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(disable: 4793)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
# 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
; }
# 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}







__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                           unsigned __int64 _Options,
                                           char const* _Buffer,
                                           size_t _BufferCount,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vsscanf_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}



__inline int __cdecl vsscanf(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}



__inline int __cdecl _vsscanf_s_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }






#pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sscanf_l(
                                           char const* const _Buffer,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl sscanf(
                                 char const* const _Buffer,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _sscanf_s_l(
                                             char const* const _Buffer,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl sscanf_s(
                                       char const* const _Buffer,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf_l(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snscanf_s_l(
                                             char const* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snscanf_s(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(pop)
# 2437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
    __declspec(dllimport) char* __cdecl tempnam(
                   char const* _Directory,
                   char const* _FilePrefix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);





}
# 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma pack(pop)
# 9 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h" 1
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
#pragma warning(disable: 4514)
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
extern "C" {








#pragma deprecated("_ftcscat")
#pragma deprecated("_ftcschr")
#pragma deprecated("_ftcscpy")
#pragma deprecated("_ftcscspn")
#pragma deprecated("_ftcslen")
#pragma deprecated("_ftcsncat")
#pragma deprecated("_ftcsncpy")
#pragma deprecated("_ftcspbrk")
#pragma deprecated("_ftcsrchr")
#pragma deprecated("_ftcsspn")
#pragma deprecated("_ftcsstr")
#pragma deprecated("_ftcstok")
#pragma deprecated("_ftcsdup")
#pragma deprecated("_ftcsnset")
#pragma deprecated("_ftcsrev")
#pragma deprecated("_ftcsset")
#pragma deprecated("_ftcscmp")
#pragma deprecated("_ftcsicmp")
#pragma deprecated("_ftcsnccmp")
#pragma deprecated("_ftcsncmp")
#pragma deprecated("_ftcsncicmp")
#pragma deprecated("_ftcsnicmp")
#pragma deprecated("_ftcscoll")
#pragma deprecated("_ftcsicoll")
#pragma deprecated("_ftcsnccoll")
#pragma deprecated("_ftcsncoll")
#pragma deprecated("_ftcsncicoll")
#pragma deprecated("_ftcsnicoll")
#pragma deprecated("_ftcsclen")
#pragma deprecated("_ftcsnccat")
#pragma deprecated("_ftcsnccpy")
#pragma deprecated("_ftcsncset")
#pragma deprecated("_ftcsdec")
#pragma deprecated("_ftcsinc")
#pragma deprecated("_ftcsnbcnt")
#pragma deprecated("_ftcsnccnt")
#pragma deprecated("_ftcsnextc")
#pragma deprecated("_ftcsninc")
#pragma deprecated("_ftcsspnp")
#pragma deprecated("_ftcslwr")
#pragma deprecated("_ftcsupr")
#pragma deprecated("_ftclen")
#pragma deprecated("_ftccpy")
#pragma deprecated("_ftccmp")
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
}





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
 extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}
# 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
#pragma pack(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 2 3




#pragma pack(push, 8)
# 14 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
 extern "C" {




__declspec(dllimport) void const* __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 40 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


__declspec(dllimport) void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 60 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


__declspec(dllimport) char const* __cdecl strchr(
           char const* _Str,
           int _Val
    );


__declspec(dllimport) char const* __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


__declspec(dllimport) char const* __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



__declspec(dllimport) wchar_t const* __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



__declspec(dllimport) wchar_t const* __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



}
# 106 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
 extern "C" {
# 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
    static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





}
# 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
                                                  wchar_t* _Buffer,
                                                  size_t _BufferCount,
                                                  size_t* _SizeRead
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }







    __declspec(dllimport) int __cdecl _cputws(
               wchar_t const* _Buffer
        );

                       __declspec(dllimport) wint_t __cdecl _getwch (void);
                       __declspec(dllimport) wint_t __cdecl _getwche (void);
                       __declspec(dllimport) wint_t __cdecl _putwch ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch( wint_t _Character);

                       __declspec(dllimport) wint_t __cdecl _getwch_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _putwch_nolock ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch_nolock( wint_t _Character);
# 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vcwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p(
                                      const wchar_t* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
 }



    __inline int __cdecl _vcwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf_s(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






}
# 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wconio.h"
#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
 extern "C" {
# 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);
# 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
               __declspec(dllimport) int __cdecl iswalnum ( wint_t _C);
               __declspec(dllimport) int __cdecl iswalpha ( wint_t _C);
               __declspec(dllimport) int __cdecl iswascii ( wint_t _C);
               __declspec(dllimport) int __cdecl iswblank ( wint_t _C);
               __declspec(dllimport) int __cdecl iswcntrl ( wint_t _C);


               __declspec(dllimport) int __cdecl iswdigit ( wint_t _C);

               __declspec(dllimport) int __cdecl iswgraph ( wint_t _C);
               __declspec(dllimport) int __cdecl iswlower ( wint_t _C);
               __declspec(dllimport) int __cdecl iswprint ( wint_t _C);
               __declspec(dllimport) int __cdecl iswpunct ( wint_t _C);
               __declspec(dllimport) int __cdecl iswspace ( wint_t _C);
               __declspec(dllimport) int __cdecl iswupper ( wint_t _C);
               __declspec(dllimport) int __cdecl iswxdigit ( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsym ( wint_t _C);

               __declspec(dllimport) int __cdecl _iswalnum_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswalpha_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswblank_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcntrl_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswdigit_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswgraph_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswlower_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswprint_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswpunct_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswspace_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswupper_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsymf_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsym_l ( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);

               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);



                   __declspec(dllimport) int __cdecl isleadbyte( int _C);
                   __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
}
# 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wctype.h"
#pragma pack(pop)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );



__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                     int _Drive,
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );







__declspec(dllimport) int __cdecl _wchdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wmkdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wrmdir(
           wchar_t const* _Path
    );



}
# 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wdirect.h"
#pragma pack(pop)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_share.h" 1
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h" 2


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata32i64_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
};

struct _wfinddata64i32_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata64_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
};
# 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) int __cdecl _wchmod(
           wchar_t const* _FileName,
           int _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
           wchar_t const* _FileName,
           int _PermissionMode
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
           wchar_t const* _FileName,
           struct _wfinddata32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32(
          intptr_t _FindHandle,
          struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
           wchar_t const* _FileName
    );


__declspec(dllimport) int __cdecl _wrename(
           wchar_t const* _OldFileName,
           wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
                                    wchar_t* _TemplateName,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);






__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
           wchar_t const* _FileName,
           struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
           wchar_t const* _FileName,
           struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
           wchar_t const* _FileName,
           struct _wfinddata64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32i64(
          intptr_t _FindHandle,
          struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64i32(
          intptr_t _FindHandle,
          struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64(
          intptr_t _FindHandle,
          struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
           int* _FileHandle,
           wchar_t const* _FileName,
           int _OpenFlag,
           int _ShareFlag,
           int _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
           wchar_t const* _FileName,
           int _OFlag,
           int _ShFlag,
           int _PMode,
           int* _PFileHandle,
           int _BSecure
    );






    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _ShFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }
# 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)



}
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wio.h"
#pragma pack(pop)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
 extern "C" {





    __declspec(dllimport) intptr_t __cdecl _wexecl(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wprocess.h"
#pragma pack(pop)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
 extern "C" {
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _itow_s(
                                 int _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(
                                 long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) errno_t __cdecl _ultow_s(
                                 unsigned long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) double __cdecl wcstod(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) double __cdecl _wcstod_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl wcstol(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _wcstol_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl wcstoll(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _wcstoll_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl wcstoul(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl wcstoull(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl wcstold(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) long double __cdecl _wcstold_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl wcstof(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) float __cdecl _wcstof_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl _wtof(
           wchar_t const* _String
    );


__declspec(dllimport) double __cdecl _wtof_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wtoi(
           wchar_t const* _String
    );


__declspec(dllimport) int __cdecl _wtoi_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl _wtol(
           wchar_t const* _String
    );


__declspec(dllimport) long __cdecl _wtol_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl _wtoll(
           wchar_t const* _String
    );


__declspec(dllimport) long long __cdecl _wtoll_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                                 __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _i64tow(
                           __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                 unsigned __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                           unsigned __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wtoi64(
           wchar_t const* _String
    );


__declspec(dllimport) __int64 __cdecl _wtoi64_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );






__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                     wchar_t* _Buffer,
                                     wchar_t const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 wchar_t const* _Drive,
                                 wchar_t const* _Dir,
                                 wchar_t const* _Filename,
                                 wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);
# 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrMsg
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _wsplitpath(
                             wchar_t const* _FullPath,
                             wchar_t* _Drive,
                             wchar_t* _Dir,
                             wchar_t* _Filename,
                             wchar_t* _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                       wchar_t const* _FullPath,
                                       wchar_t* _Drive,
                                       size_t _DriveCount,
                                       wchar_t* _Dir,
                                       size_t _DirCount,
                                       wchar_t* _Filename,
                                       size_t _FilenameCount,
                                       wchar_t* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( wchar_t const* _Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                                                                                    wchar_t** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    wchar_t const* _VarName
        );



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
               wchar_t const* _VarName
        );



    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                         size_t* _RequiredCount,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount,
                                         wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t (&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    __declspec(dllimport) int __cdecl _wputenv(
               wchar_t const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _wputenv_s(
               wchar_t const* _Name,
               wchar_t const* _Value
        );

    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                     wchar_t const* _Filename,
                                     wchar_t const* _VarName,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
#pragma pack(pop)
# 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h" 1
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
 extern "C" {
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    __declspec(dllimport) errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }







    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);
# 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);






__declspec(dllimport) size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }






        extern "C++" __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
                          wchar_t* _String,
                          wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }


#pragma warning(pop)






 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                   __declspec(dllimport) errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }





               __declspec(dllimport) int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

               __declspec(dllimport) int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

               __declspec(dllimport) int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

               __declspec(dllimport) int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                   __declspec(dllimport) errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







__declspec(dllimport) wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                   __declspec(dllimport) errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                   __declspec(dllimport) errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







__declspec(dllimport) errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


__declspec(dllimport) int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {



    inline wchar_t* __cdecl wcschr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }


    inline wchar_t* __cdecl wcspbrk( wchar_t* _String, wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }


    inline wchar_t* __cdecl wcsrchr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }



    inline wchar_t* __cdecl wcsstr( wchar_t* _String, wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
# 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





}
# 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma pack(pop)
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h" 1
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
 extern "C" {
# 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


__declspec(dllimport) wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



__declspec(dllimport) errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) errno_t __cdecl _wstrdate_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





__declspec(dllimport) errno_t __cdecl _wstrtime_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




}
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma pack(pop)
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h" 1
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h" 1
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef unsigned short _ino_t;


        typedef _ino_t ino_t;
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef unsigned int _dev_t;


        typedef _dev_t dev_t;
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/types.h"
    typedef long _off_t;


        typedef _off_t off_t;
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h" 2


#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)








struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};




    struct stat
    {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
    };
# 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(
          int _FileHandle,
          struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
          int _FileHandle,
          struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
          int _FileHandle,
          struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
          int _FileHandle,
          struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
           char const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
           char const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
           char const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
           char const* _FileName,
           struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
           wchar_t const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
           wchar_t const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
           wchar_t const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
           wchar_t const* _FileName,
           struct _stat64* _Stat
    );
# 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }






#pragma warning(pop)



}
# 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\sys/stat.h"
#pragma pack(pop)
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h" 2




#pragma pack(push, 8)
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
 extern "C" {
# 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
         int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
                                                   char const* _Ch,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                                                   wchar_t* _DstCh,
                                                   char const* _SrcCh,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );


__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                      size_t* _Retval,
                                      wchar_t* _Dst,
                                      size_t _Size,
                                      char const** _PSrc,
                                      size_t _N,
                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
# 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, char const** _PSrc, size_t _Count, mbstate_t* _State);
# 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                     size_t* _Retval,
                                     char* _Dst,
                                     size_t _SizeInBytes,
                                     wchar_t _Ch,
                                     mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
# 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t* _State);







__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                      size_t* _Retval,
                                                      char* _Dst,
                                                      size_t _SizeInBytes,
                                                      wchar_t const** _Src,
                                                      size_t _Size,
                                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
# 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, wchar_t const** _PSource, size_t _Count, mbstate_t* _State);







__declspec(dllimport) int __cdecl wctob(
         wint_t _WCh
    );
# 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
        errno_t __cdecl wmemcpy_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );


        errno_t __cdecl wmemmove_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );



    __inline int __cdecl fwide(
                 FILE* _F,
                 int _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
                 mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
                       wchar_t const* _S,
                       wchar_t _C,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
                       wchar_t const* _S1,
                       wchar_t const* _S2,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }



    __inline
    wchar_t* __cdecl wmemcpy(
                             wchar_t* _S1,
                             wchar_t const* _S2,
                             size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4995 4996 6386)
 return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

    __inline
    wchar_t* __cdecl wmemmove(
                                 wchar_t* _S1,
                                 wchar_t const* _S2,
                                 size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }



    __inline wchar_t* __cdecl wmemset(
                             wchar_t* _S,
                             wchar_t _C,
                             size_t _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }



        extern "C++" inline wchar_t* __cdecl wmemchr(
                           wchar_t* _S,
                           wchar_t _C,
                           size_t _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }







}
# 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\wchar.h"
#pragma pack(pop)
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h" 2



extern "C" {



typedef wchar_t _TCHAR;
typedef wchar_t _TSCHAR;
typedef wchar_t _TUCHAR;
typedef wchar_t _TXCHAR;
typedef wint_t _TINT;





typedef wchar_t TCHAR;
# 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
               __inline size_t __cdecl _tclen( const wchar_t *_Cpc)
{

    (void *)_Cpc;
    return 1;
}
__inline void __cdecl _tccpy( wchar_t *_Pc1, const wchar_t *_Cpc2) { *_Pc1 = (wchar_t)*_Cpc2; }
__inline void __cdecl _tccpy_l( wchar_t *_Pc1, const wchar_t *_Cpc2, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 28719)
 _tccpy(_Pc1, _Cpc2);
#pragma warning(pop)
}
               __inline int __cdecl _tccmp( const wchar_t *_Cpc1, const wchar_t *_Cpc2) { return (int) ((*_Cpc1)-(*_Cpc2)); }
# 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
               __inline wchar_t * __cdecl _wcsdec( const wchar_t * _Cpc1, const wchar_t * _Cpc2) { return (wchar_t *)((_Cpc1)>=(_Cpc2) ? 0 : ((_Cpc2)-1)); }
               __inline wchar_t * __cdecl _wcsinc( const wchar_t * _Pc) { return (wchar_t *)(_Pc+1); }
               __inline unsigned int __cdecl _wcsnextc( const wchar_t * _Cpc) { return (unsigned int)*_Cpc; }
               __inline wchar_t * __cdecl _wcsninc( const wchar_t * _Pc, size_t _Sz) { return (wchar_t *)(_Pc+_Sz); }
               __inline size_t __cdecl _wcsncnt( const wchar_t * _String, size_t _Cnt)
{
        size_t n = _Cnt;
        wchar_t *cp = (wchar_t *)_String;
        while (n-- && *cp)
                cp++;
        return _Cnt - n - 1;
}
               __inline wchar_t * __cdecl _wcsspnp
(
           const wchar_t * _Cpc1,
           const wchar_t * _Cpc2
)
{
    return _Cpc1==0 ? 0 : ((*(_Cpc1 += wcsspn(_Cpc1,_Cpc2))!='\0') ? (wchar_t*)_Cpc1 : 0);
}


                   __inline errno_t __cdecl _wcsncpy_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncpy_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncpy_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncpy_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsncpy_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline wchar_t * __cdecl _wcsncpy_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 28719)
 return wcsncpy(_Dst, _Source, _Count);
#pragma warning(pop)
}




                   __inline errno_t __cdecl _wcsncat_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncat_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncat_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncat_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsncat_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline wchar_t * __cdecl _wcsncat_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 6059 28719)

 return wcsncat(_Dst, _Source, _Count);
#pragma warning(pop)
}



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstok_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline wchar_t * _wcstok_l( wchar_t * _String, const wchar_t * _Delimiters, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 28727)



 return wcstok(_String,_Delimiters,0);

#pragma warning(pop)
}


__inline wchar_t * _wcstok_s_l( wchar_t * _String, const wchar_t * _Delimiters, wchar_t **_Current_position, _locale_t _Locale)
{
    (void)_Locale;
    return wcstok_s(_String, _Delimiters, _Current_position);
}


                   __inline errno_t _wcsnset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsnset_s(_Destination, _Destination_size_chars, _Value, _Count);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, size_t _Count, _locale_t _Locale) throw() { return _wcsnset_s_l(_Dest, _Size, _Value, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline wchar_t * __cdecl _wcsnset_l(wchar_t *_Dst, wchar_t _Value, size_t _MaxCount, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsnset(_Dst, _Value, _MaxCount);
#pragma warning(pop)
}



                   __inline errno_t _wcsset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsset_s(_Destination, _Destination_size_chars, _Value);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, _locale_t _Locale) throw() { return _wcsset_s_l(_Dest, _Size, _Value, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline wchar_t * __cdecl _wcsset_l(wchar_t *_Dst, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsset(_Dst, _Value);
#pragma warning(pop)
}
# 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\tchar.h"
}
# 10 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits" 1 3




# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h" 1 3
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h" 1 3








# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h" 2 3
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3


#pragma pack(push,8)
# 253 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
#pragma detect_mismatch("_MSC_VER", "1900")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
# 268 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
# 412 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h" 1 3
# 57 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h" 3
#pragma comment(lib, "msvcprt" "d" "")
# 412 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 2 3
# 592 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
typedef long long _Longlong;
typedef unsigned long long _ULonglong;
# 611 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
# 644 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() noexcept;


 static void __cdecl _Lockit_ctor(int);
 static void __cdecl _Lockit_dtor(int);

private:
 static void __cdecl _Lockit_ctor(_Lockit *);
 static void __cdecl _Lockit_ctor(_Lockit *, int);
 static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
# 677 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 };
# 764 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
class __declspec(dllimport) _Init_locks
 {
public:
# 780 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 __thiscall _Init_locks();
 __thiscall ~_Init_locks() noexcept;


private:
 static void __cdecl _Init_locks_ctor(_Init_locks *);
 static void __cdecl _Init_locks_dtor(_Init_locks *);
# 797 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
 };

#pragma warning(pop)
}
# 809 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h" 3
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;





#pragma pack(pop)
# 5 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits" 2 3


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 2 3


#pragma pack(push, 8)
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
 extern "C" {
# 88 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
}
# 88 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h" 3
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits" 2 3
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 1 3
# 12 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
typedef float float_t;
typedef double double_t;
# 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
        extern double const _HUGE;
# 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
void __cdecl _fperrraise( int _Except);

               __declspec(dllimport) short __cdecl _dclass( double _X);
               __declspec(dllimport) short __cdecl _ldclass( long double _X);
               __declspec(dllimport) short __cdecl _fdclass( float _X);

               __declspec(dllimport) int __cdecl _dsign( double _X);
               __declspec(dllimport) int __cdecl _ldsign( long double _X);
               __declspec(dllimport) int __cdecl _fdsign( float _X);

               __declspec(dllimport) int __cdecl _dpcomp( double _X, double _Y);
               __declspec(dllimport) int __cdecl _ldpcomp( long double _X, long double _Y);
               __declspec(dllimport) int __cdecl _fdpcomp( float _X, float _Y);

               __declspec(dllimport) short __cdecl _dtest( double* _Px);
               __declspec(dllimport) short __cdecl _ldtest( long double* _Px);
               __declspec(dllimport) short __cdecl _fdtest( float* _Px);

__declspec(dllimport) short __cdecl _d_int( double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _ld_int( long double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _fd_int( float* _Px, short _Xexp);

__declspec(dllimport) short __cdecl _dscale( double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _ldscale( long double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _fdscale( float* _Px, long _Lexp);

__declspec(dllimport) short __cdecl _dunscale( short* _Pex, double* _Px);
__declspec(dllimport) short __cdecl _ldunscale( short* _Pex, long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale( short* _Pex, float* _Px);

               __declspec(dllimport) short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

               __declspec(dllimport) short __cdecl _dnorm( unsigned short* _Ps);
               __declspec(dllimport) short __cdecl _fdnorm( unsigned short* _Ps);

               __declspec(dllimport) double __cdecl _dpoly( double _X, double const* _Tab, int _N);
               __declspec(dllimport) long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
               __declspec(dllimport) float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

               __declspec(dllimport) double __cdecl _dlog( double _X, int _Baseflag);
               __declspec(dllimport) long double __cdecl _ldlog( long double _X, int _Baseflag);
               __declspec(dllimport) float __cdecl _fdlog( float _X, int _Baseflag);

               __declspec(dllimport) double __cdecl _dsin( double _X, unsigned int _Qoff);
               __declspec(dllimport) long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
               __declspec(dllimport) float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
extern "C++"
{
                   inline int fpclassify( float _X) throw()
    {
        return _fdtest(&_X);
    }

                   inline int fpclassify( double _X) throw()
    {
        return _dtest(&_X);
    }

                   inline int fpclassify( long double _X) throw()
    {
        return _ldtest(&_X);
    }

                   inline bool signbit( float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

                   inline bool signbit( double _X) throw()
    {
        return _dsign(_X) != 0;
    }

                   inline bool signbit( long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

                   inline int _fpcomp( float _X, float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

                   inline int _fpcomp( double _X, double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

                   inline int _fpcomp( long double _X, long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {
        typedef double _Type;
    };

    template <> struct _Real_type<float>
    {
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {
        typedef long double _Type;
    };

    template <class _T1, class _T2>
                   inline int _fpcomp( _T1 _X, _T2 _Y) throw()
    {
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
                   inline bool isfinite( _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
                   inline bool isinf( _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
                   inline bool isnan( _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
                   inline bool isnormal( _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreaterequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isless( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isunordered( _Ty1 _X, _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}






               int __cdecl abs( int _X);
               long __cdecl labs( long _X);
               long long __cdecl llabs( long long _X);

               double __cdecl acos( double _X);
               double __cdecl asin( double _X);
               double __cdecl atan( double _X);
               double __cdecl atan2( double _Y, double _X);

               double __cdecl cos( double _X);
               double __cdecl cosh( double _X);
               double __cdecl exp( double _X);
                                  double __cdecl fabs( double _X);
               double __cdecl fmod( double _X, double _Y);
               double __cdecl log( double _X);
               double __cdecl log10( double _X);
               double __cdecl pow( double _X, double _Y);
               double __cdecl sin( double _X);
               double __cdecl sinh( double _X);
                                  double __cdecl sqrt( double _X);
               double __cdecl tan( double _X);
               double __cdecl tanh( double _X);

               __declspec(dllimport) double __cdecl acosh( double _X);
               __declspec(dllimport) double __cdecl asinh( double _X);
               __declspec(dllimport) double __cdecl atanh( double _X);
               __declspec(dllimport) double __cdecl atof( char const* _String);
               __declspec(dllimport) double __cdecl _atof_l( char const* _String, _locale_t _Locale);
               __declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
               __declspec(dllimport) double __cdecl cbrt( double _X);
               __declspec(dllimport) double __cdecl ceil( double _X);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl erf( double _X);
               __declspec(dllimport) double __cdecl erfc( double _X);
               __declspec(dllimport) double __cdecl exp2( double _X);
               __declspec(dllimport) double __cdecl expm1( double _X);
               __declspec(dllimport) double __cdecl fdim( double _X, double _Y);
               __declspec(dllimport) double __cdecl floor( double _X);
               __declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
               __declspec(dllimport) double __cdecl fmax( double _X, double _Y);
               __declspec(dllimport) double __cdecl fmin( double _X, double _Y);
               __declspec(dllimport) double __cdecl frexp( double _X, int* _Y);
               __declspec(dllimport) double __cdecl hypot( double _X, double _Y);
               __declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
               __declspec(dllimport) int __cdecl ilogb( double _X);
               __declspec(dllimport) double __cdecl ldexp( double _X, int _Y);
               __declspec(dllimport) double __cdecl lgamma( double _X);
               __declspec(dllimport) long long __cdecl llrint( double _X);
               __declspec(dllimport) long long __cdecl llround( double _X);
               __declspec(dllimport) double __cdecl log1p( double _X);
               __declspec(dllimport) double __cdecl log2( double _X);
               __declspec(dllimport) double __cdecl logb( double _X);
               __declspec(dllimport) long __cdecl lrint( double _X);
               __declspec(dllimport) long __cdecl lround( double _X);

int __cdecl _matherr( struct _exception* _Except);

               __declspec(dllimport) double __cdecl modf( double _X, double* _Y);
               __declspec(dllimport) double __cdecl nan( char const*);
               __declspec(dllimport) double __cdecl nearbyint( double _X);
               __declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
               __declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
               __declspec(dllimport) double __cdecl remainder( double _X, double _Y);
               __declspec(dllimport) double __cdecl remquo( double _X, double _Y, int* _Z);
               __declspec(dllimport) double __cdecl rint( double _X);
               __declspec(dllimport) double __cdecl round( double _X);
               __declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
               __declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
               __declspec(dllimport) double __cdecl tgamma( double _X);
               __declspec(dllimport) double __cdecl trunc( double _X);
               __declspec(dllimport) double __cdecl _j0( double _X );
               __declspec(dllimport) double __cdecl _j1( double _X );
               __declspec(dllimport) double __cdecl _jn(int _X, double _Y);
               __declspec(dllimport) double __cdecl _y0( double _X);
               __declspec(dllimport) double __cdecl _y1( double _X);
               __declspec(dllimport) double __cdecl _yn( int _X, double _Y);

               __declspec(dllimport) float __cdecl acoshf( float _X);
               __declspec(dllimport) float __cdecl asinhf( float _X);
               __declspec(dllimport) float __cdecl atanhf( float _X);
               __declspec(dllimport) float __cdecl cbrtf( float _X);
               __declspec(dllimport) float __cdecl _chgsignf( float _X);
               __declspec(dllimport) float __cdecl copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl erff( float _X);
               __declspec(dllimport) float __cdecl erfcf( float _X);
               __declspec(dllimport) float __cdecl expm1f( float _X);
               __declspec(dllimport) float __cdecl exp2f( float _X);
               __declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
               __declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fminf( float _X, float _Y);
               __declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
               __declspec(dllimport) int __cdecl ilogbf( float _X);
               __declspec(dllimport) float __cdecl lgammaf( float _X);
               __declspec(dllimport) long long __cdecl llrintf( float _X);
               __declspec(dllimport) long long __cdecl llroundf( float _X);
               __declspec(dllimport) float __cdecl log1pf( float _X);
               __declspec(dllimport) float __cdecl log2f( float _X);
               __declspec(dllimport) float __cdecl logbf( float _X);
               __declspec(dllimport) long __cdecl lrintf( float _X);
               __declspec(dllimport) long __cdecl lroundf( float _X);
               __declspec(dllimport) float __cdecl nanf( char const*);
               __declspec(dllimport) float __cdecl nearbyintf( float _X);
               __declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
               __declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
               __declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
               __declspec(dllimport) float __cdecl remquof( float _X, float _Y, int* _Z);
               __declspec(dllimport) float __cdecl rintf( float _X);
               __declspec(dllimport) float __cdecl roundf( float _X);
               __declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
               __declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
               __declspec(dllimport) float __cdecl tgammaf( float _X);
               __declspec(dllimport) float __cdecl truncf( float _X);



                   __declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
# 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __inline float __cdecl acosf( float _X)
    {
        return (float)acos(_X);
    }

                   __inline float __cdecl asinf( float _X)
    {
        return (float)asin(_X);
    }

                   __inline float __cdecl atan2f( float _Y, float _X)
    {
        return (float)atan2(_Y, _X);
    }

                   __inline float __cdecl atanf( float _X)
    {
        return (float)atan(_X);
    }

                   __inline float __cdecl ceilf( float _X)
    {
        return (float)ceil(_X);
    }

                   __inline float __cdecl cosf( float _X)
    {
        return (float)cos(_X);
    }

                   __inline float __cdecl coshf( float _X)
    {
        return (float)cosh(_X);
    }

                   __inline float __cdecl expf( float _X)
    {
        return (float)exp(_X);
    }
# 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __inline float __cdecl fabsf( float _X)
    {
        return (float)fabs(_X);
    }
# 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __inline float __cdecl floorf( float _X)
    {
        return (float)floor(_X);
    }

                   __inline float __cdecl fmodf( float _X, float _Y)
    {
        return (float)fmod(_X, _Y);
    }



               __inline float __cdecl frexpf( float _X, int *_Y)
{
    return (float)frexp(_X, _Y);
}

               __inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}

               __inline float __cdecl ldexpf( float _X, int _Y)
{
    return (float)ldexp(_X, _Y);
}
# 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
                   __inline float __cdecl log10f( float _X)
    {
        return (float)log10(_X);
    }

                   __inline float __cdecl logf( float _X)
    {
        return (float)log(_X);
    }

                   __inline float __cdecl modff( float _X, float* _Y)
    {
        double _F, _I;
        _F = modf(_X, &_I);
        *_Y = (float)_I;
        return (float)_F;
    }

                   __inline float __cdecl powf( float _X, float _Y)
    {
        return (float)pow(_X, _Y);
    }

                   __inline float __cdecl sinf( float _X)
    {
        return (float)sin(_X);
    }

                   __inline float __cdecl sinhf( float _X)
    {
        return (float)sinh(_X);
    }

                   __inline float __cdecl sqrtf( float _X)
    {
        return (float)sqrt(_X);
    }

                   __inline float __cdecl tanf( float _X)
    {
        return (float)tan(_X);
    }

                   __inline float __cdecl tanhf( float _X)
    {
        return (float)tanh(_X);
    }



               __declspec(dllimport) long double __cdecl acoshl( long double _X);

               __inline long double __cdecl acosl( long double _X)
{
    return acos((double)_X);
}

               __declspec(dllimport) long double __cdecl asinhl( long double _X);

               __inline long double __cdecl asinl( long double _X)
{
    return asin((double)_X);
}

               __inline long double __cdecl atan2l( long double _Y, long double _X)
{
    return atan2((double)_Y, (double)_X);
}

               __declspec(dllimport) long double __cdecl atanhl( long double _X);

               __inline long double __cdecl atanl( long double _X)
{
    return atan((double)_X);
}

               __declspec(dllimport) long double __cdecl cbrtl( long double _X);

               __inline long double __cdecl ceill( long double _X)
{
    return ceil((double)_X);
}

               __inline long double __cdecl _chgsignl( long double _X)
{
    return _chgsign((double)_X);
}

               __declspec(dllimport) long double __cdecl copysignl( long double _Number, long double _Sign);

               __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

               __inline long double __cdecl coshl( long double _X)
{
    return cosh((double)_X);
}

               __inline long double __cdecl cosl( long double _X)
{
    return cos((double)_X);
}

               __declspec(dllimport) long double __cdecl erfl( long double _X);
               __declspec(dllimport) long double __cdecl erfcl( long double _X);

               __inline long double __cdecl expl( long double _X)
{
    return exp((double)_X);
}

               __declspec(dllimport) long double __cdecl exp2l( long double _X);
               __declspec(dllimport) long double __cdecl expm1l( long double _X);

               __inline long double __cdecl fabsl( long double _X)
{
    return fabs((double)_X);
}

               __declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

               __inline long double __cdecl floorl( long double _X)
{
    return floor((double)_X);
}

               __declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
               __declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

               __inline long double __cdecl fmodl( long double _X, long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

               __inline long double __cdecl frexpl( long double _X, int *_Y)
{
    return frexp((double)_X, _Y);
}

               __declspec(dllimport) int __cdecl ilogbl( long double _X);

               __inline long double __cdecl _hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl ldexpl( long double _X, int _Y)
{
    return ldexp((double)_X, _Y);
}

               __declspec(dllimport) long double __cdecl lgammal( long double _X);
               __declspec(dllimport) long long __cdecl llrintl( long double _X);
               __declspec(dllimport) long long __cdecl llroundl( long double _X);

               __inline long double __cdecl logl( long double _X)
{
    return log((double)_X);
}

               __inline long double __cdecl log10l( long double _X)
{
    return log10((double)_X);
}

               __declspec(dllimport) long double __cdecl log1pl( long double _X);
               __declspec(dllimport) long double __cdecl log2l( long double _X);
               __declspec(dllimport) long double __cdecl logbl( long double _X);
               __declspec(dllimport) long __cdecl lrintl( long double _X);
               __declspec(dllimport) long __cdecl lroundl( long double _X);

               __inline long double __cdecl modfl( long double _X, long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

               __declspec(dllimport) long double __cdecl nanl( char const*);
               __declspec(dllimport) long double __cdecl nearbyintl( long double _X);
               __declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

               __inline long double __cdecl powl( long double _X, long double _Y)
{
    return pow((double)_X, (double)_Y);
}

               __declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int* _Z);
               __declspec(dllimport) long double __cdecl rintl( long double _X);
               __declspec(dllimport) long double __cdecl roundl( long double _X);
               __declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
               __declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

               __inline long double __cdecl sinhl( long double _X)
{
    return sinh((double)_X);
}

               __inline long double __cdecl sinl( long double _X)
{
    return sin((double)_X);
}

               __inline long double __cdecl sqrtl( long double _X)
{
    return sqrt((double)_X);
}

               __inline long double __cdecl tanhl( long double _X)
{
    return tanh((double)_X);
}

               __inline long double __cdecl tanl( long double _X)
{
    return tan((double)_X);
}

               __declspec(dllimport) long double __cdecl tgammal( long double _X);
               __declspec(dllimport) long double __cdecl truncl( long double _X);
# 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)



}
# 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h" 3
#pragma pack(pop)
# 12 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 2 3





               inline double abs( double _Xx) noexcept
 {
 return (:: fabs(_Xx));
 }

               inline double pow( double _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: pow(_Xx, static_cast<double>(_Yx)));
 }

               inline float abs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float acos( float _Xx) noexcept
 {
 return (:: acosf(_Xx));
 }

               inline float acosh( float _Xx) noexcept
 {
 return (:: acoshf(_Xx));
 }

               inline float asin( float _Xx) noexcept
 {
 return (:: asinf(_Xx));
 }

               inline float asinh( float _Xx) noexcept
 {
 return (:: asinhf(_Xx));
 }

               inline float atan( float _Xx) noexcept
 {
 return (:: atanf(_Xx));
 }

               inline float atanh( float _Xx) noexcept
 {
 return (:: atanhf(_Xx));
 }

               inline float atan2( float _Yx, float _Xx) noexcept
 {
 return (:: atan2f(_Yx, _Xx));
 }

               inline float cbrt( float _Xx) noexcept
 {
 return (:: cbrtf(_Xx));
 }

               inline float ceil( float _Xx) noexcept
 {
 return (:: ceilf(_Xx));
 }

               inline float copysign( float _Number,
      float _Sign) noexcept
 {
 return (:: copysignf(_Number, _Sign));
 }

               inline float cos( float _Xx) noexcept
 {
 return (:: cosf(_Xx));
 }

               inline float cosh( float _Xx) noexcept
 {
 return (:: coshf(_Xx));
 }

               inline float erf( float _Xx) noexcept
 {
 return (:: erff(_Xx));
 }

               inline float erfc( float _Xx) noexcept
 {
 return (:: erfcf(_Xx));
 }

               inline float exp( float _Xx) noexcept
 {
 return (:: expf(_Xx));
 }

               inline float exp2( float _Xx) noexcept
 {
 return (:: exp2f(_Xx));
 }

               inline float expm1( float _Xx) noexcept
 {
 return (:: expm1f(_Xx));
 }

               inline float fabs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float fdim( float _Xx, float _Yx) noexcept
 {
 return (:: fdimf(_Xx, _Yx));
 }

               inline float floor( float _Xx) noexcept
 {
 return (:: floorf(_Xx));
 }

               inline float fma( float _Xx, float _Yx,
      float _Zx) noexcept
 {
 return (:: fmaf(_Xx, _Yx, _Zx));
 }

               inline float fmax( float _Xx, float _Yx) noexcept
 {
 return (:: fmaxf(_Xx, _Yx));
 }

               inline float fmin( float _Xx, float _Yx) noexcept
 {
 return (:: fminf(_Xx, _Yx));
 }

               inline float fmod( float _Xx, float _Yx) noexcept
 {
 return (:: fmodf(_Xx, _Yx));
 }

               inline float frexp( float _Xx, int* _Yx) noexcept
 {
 return (:: frexpf(_Xx, _Yx));
 }

               inline float hypot( float _Xx, float _Yx) noexcept
 {
 return (:: hypotf(_Xx, _Yx));
 }

               inline int ilogb( float _Xx) noexcept
 {
 return (:: ilogbf(_Xx));
 }

               inline float ldexp( float _Xx, int _Yx) noexcept
 {
 return (:: ldexpf(_Xx, _Yx));
 }

               inline float lgamma( float _Xx) noexcept
 {
 return (:: lgammaf(_Xx));
 }

               inline long long llrint( float _Xx) noexcept
 {
 return (:: llrintf(_Xx));
 }

               inline long long llround( float _Xx) noexcept
 {
 return (:: llroundf(_Xx));
 }

               inline float log( float _Xx) noexcept
 {
 return (:: logf(_Xx));
 }

               inline float log10( float _Xx) noexcept
 {
 return (:: log10f(_Xx));
 }

               inline float log1p( float _Xx) noexcept
 {
 return (:: log1pf(_Xx));
 }

               inline float log2( float _Xx) noexcept
 {
 return (:: log2f(_Xx));
 }

               inline float logb( float _Xx) noexcept
 {
 return (:: logbf(_Xx));
 }

               inline long lrint( float _Xx) noexcept
 {
 return (:: lrintf(_Xx));
 }

               inline long lround( float _Xx) noexcept
 {
 return (:: lroundf(_Xx));
 }

               inline float modf( float _Xx, float* _Yx) noexcept
 {
 return (:: modff(_Xx, _Yx));
 }

               inline float nearbyint( float _Xx) noexcept
 {
 return (:: nearbyintf(_Xx));
 }

               inline float nextafter( float _Xx, float _Yx) noexcept
 {
 return (:: nextafterf(_Xx, _Yx));
 }

               inline float nexttoward( float _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardf(_Xx, _Yx));
 }

               inline float pow( float _Xx,
      float _Yx) noexcept
 {
 return (:: powf(_Xx, _Yx));
 }

               inline float pow( float _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powf(_Xx, static_cast<float>(_Yx)));
 }

               inline float remainder( float _Xx, float _Yx) noexcept
 {
 return (:: remainderf(_Xx, _Yx));
 }

               inline float remquo( float _Xx, float _Yx,
       int *_Zx) noexcept
 {
 return (:: remquof(_Xx, _Yx, _Zx));
 }

               inline float rint( float _Xx) noexcept
 {
 return (:: rintf(_Xx));
 }

               inline float round( float _Xx) noexcept
 {
 return (:: roundf(_Xx));
 }

               inline float scalbln( float _Xx, long _Yx) noexcept
 {
 return (:: scalblnf(_Xx, _Yx));
 }

               inline float scalbn( float _Xx, int _Yx) noexcept
 {
 return (:: scalbnf(_Xx, _Yx));
 }

               inline float sin( float _Xx) noexcept
 {
 return (:: sinf(_Xx));
 }

               inline float sinh( float _Xx) noexcept
 {
 return (:: sinhf(_Xx));
 }

               inline float sqrt( float _Xx) noexcept
 {
 return (:: sqrtf(_Xx));
 }

               inline float tan( float _Xx) noexcept
 {
 return (:: tanf(_Xx));
 }

               inline float tanh( float _Xx) noexcept
 {
 return (:: tanhf(_Xx));
 }

               inline float tgamma( float _Xx) noexcept
 {
 return (:: tgammaf(_Xx));
 }

               inline float trunc( float _Xx) noexcept
 {
 return (:: truncf(_Xx));
 }

               inline long double abs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double acos( long double _Xx) noexcept
 {
 return (:: acosl(_Xx));
 }

               inline long double acosh( long double _Xx) noexcept
 {
 return (:: acoshl(_Xx));
 }

               inline long double asin( long double _Xx) noexcept
 {
 return (:: asinl(_Xx));
 }

               inline long double asinh( long double _Xx) noexcept
 {
 return (:: asinhl(_Xx));
 }

               inline long double atan( long double _Xx) noexcept
 {
 return (:: atanl(_Xx));
 }

               inline long double atanh( long double _Xx) noexcept
 {
 return (:: atanhl(_Xx));
 }

               inline long double atan2( long double _Yx,
      long double _Xx) noexcept
 {
 return (:: atan2l(_Yx, _Xx));
 }

               inline long double cbrt( long double _Xx) noexcept
 {
 return (:: cbrtl(_Xx));
 }

               inline long double ceil( long double _Xx) noexcept
 {
 return (:: ceill(_Xx));
 }

               inline long double copysign( long double _Number,
      long double _Sign) noexcept
 {
 return (:: copysignl(_Number, _Sign));
 }

               inline long double cos( long double _Xx) noexcept
 {
 return (:: cosl(_Xx));
 }

               inline long double cosh( long double _Xx) noexcept
 {
 return (:: coshl(_Xx));
 }

               inline long double erf( long double _Xx) noexcept
 {
 return (:: erfl(_Xx));
 }

               inline long double erfc( long double _Xx) noexcept
 {
 return (:: erfcl(_Xx));
 }

               inline long double exp( long double _Xx) noexcept
 {
 return (:: expl(_Xx));
 }

               inline long double exp2( long double _Xx) noexcept
 {
 return (:: exp2l(_Xx));
 }

               inline long double expm1( long double _Xx) noexcept
 {
 return (:: expm1l(_Xx));
 }

               inline long double fabs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double fdim( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fdiml(_Xx, _Yx));
 }

               inline long double floor( long double _Xx) noexcept
 {
 return (:: floorl(_Xx));
 }

               inline long double fma( long double _Xx,
      long double _Yx, long double _Zx) noexcept
 {
 return (:: fmal(_Xx, _Yx, _Zx));
 }

               inline long double fmax( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmaxl(_Xx, _Yx));
 }

               inline long double fmin( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fminl(_Xx, _Yx));
 }

               inline long double fmod( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmodl(_Xx, _Yx));
 }

               inline long double frexp( long double _Xx,
       int* _Yx) noexcept
 {
 return (:: frexpl(_Xx, _Yx));
 }

               inline long double hypot( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: hypotl(_Xx, _Yx));
 }

               inline int ilogb( long double _Xx) noexcept
 {
 return (:: ilogbl(_Xx));
 }

               inline long double ldexp( long double _Xx,
      int _Yx) noexcept
 {
 return (:: ldexpl(_Xx, _Yx));
 }

               inline long double lgamma( long double _Xx) noexcept
 {
 return (:: lgammal(_Xx));
 }

               inline long long llrint( long double _Xx) noexcept
 {
 return (:: llrintl(_Xx));
 }

               inline long long llround( long double _Xx) noexcept
 {
 return (:: llroundl(_Xx));
 }

               inline long double log( long double _Xx) noexcept
 {
 return (:: logl(_Xx));
 }

               inline long double log10( long double _Xx) noexcept
 {
 return (:: log10l(_Xx));
 }

               inline long double log1p( long double _Xx) noexcept
 {
 return (:: log1pl(_Xx));
 }

               inline long double log2( long double _Xx) noexcept
 {
 return (:: log2l(_Xx));
 }

               inline long double logb( long double _Xx) noexcept
 {
 return (:: logbl(_Xx));
 }

               inline long lrint( long double _Xx) noexcept
 {
 return (:: lrintl(_Xx));
 }

               inline long lround( long double _Xx) noexcept
 {
 return (:: lroundl(_Xx));
 }

               inline long double modf( long double _Xx,
       long double* _Yx) noexcept
 {
 return (:: modfl(_Xx, _Yx));
 }

               inline long double nearbyint( long double _Xx) noexcept
 {
 return (:: nearbyintl(_Xx));
 }

               inline long double nextafter( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nextafterl(_Xx, _Yx));
 }

               inline long double nexttoward( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: powl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powl(_Xx, static_cast<long double>(_Yx)));
 }

               inline long double remainder( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: remainderl(_Xx, _Yx));
 }

               inline long double remquo( long double _Xx,
      long double _Yx, int *_Zx) noexcept
 {
 return (:: remquol(_Xx, _Yx, _Zx));
 }

               inline long double rint( long double _Xx) noexcept
 {
 return (:: rintl(_Xx));
 }

               inline long double round( long double _Xx) noexcept
 {
 return (:: roundl(_Xx));
 }

               inline long double scalbln( long double _Xx,
      long _Yx) noexcept
 {
 return (:: scalblnl(_Xx, _Yx));
 }

               inline long double scalbn( long double _Xx,
      int _Yx) noexcept
 {
 return (:: scalbnl(_Xx, _Yx));
 }

               inline long double sin( long double _Xx) noexcept
 {
 return (:: sinl(_Xx));
 }

               inline long double sinh( long double _Xx) noexcept
 {
 return (:: sinhl(_Xx));
 }

               inline long double sqrt( long double _Xx) noexcept
 {
 return (:: sqrtl(_Xx));
 }

               inline long double tan( long double _Xx) noexcept
 {
 return (:: tanl(_Xx));
 }

               inline long double tanh( long double _Xx) noexcept
 {
 return (:: tanhl(_Xx));
 }

               inline long double tgamma( long double _Xx) noexcept
 {
 return (:: tgammal(_Xx));
 }

               inline long double trunc( long double _Xx) noexcept
 {
 return (:: truncl(_Xx));
 }
# 647 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 1 3







# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 3
 extern "C" {
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 3
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


__declspec(dllimport) int __cdecl _callnewh(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
                                   void* _Block
    );

__declspec(dllimport)
void __cdecl free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize(
                  void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 3
}
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 3
 extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;





__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);
# 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 3
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



}
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 2 3


#pragma pack(push, 8)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 3
 extern "C" {






    __declspec(dllimport) void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                           void* _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
        );






__declspec(dllimport) void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                          void* _Context
    );


__declspec(dllimport) void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
    );


__declspec(dllimport) void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );
# 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );





}
# 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 2 3




#pragma pack(push, 8)
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
 extern "C" {
# 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);
# 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror( char const* _ErrMsg);




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char** __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int* __cdecl __p__fmode (void);
# 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _get_pgmptr ( char** _Value);


__declspec(dllimport) errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode ( int _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode ( int* _PMode);
# 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

               __declspec(dllimport) div_t __cdecl div ( int _Numerator, int _Denominator);
               __declspec(dllimport) ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






__declspec(dllimport) void __cdecl srand( unsigned int _Seed);

               __declspec(dllimport) int __cdecl rand(void);
# 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
# 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 __declspec(dllimport) double __cdecl atof ( char const* _String);
                                  __declspec(dllimport) int __cdecl atoi ( char const* _String);
                                  __declspec(dllimport) long __cdecl atol ( char const* _String);
                                  __declspec(dllimport) long long __cdecl atoll ( char const* _String);
                                  __declspec(dllimport) __int64 __cdecl _atoi64( char const* _String);

               __declspec(dllimport) double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

               __declspec(dllimport) int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
               __declspec(dllimport) int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


__declspec(dllimport) int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



__declspec(dllimport) int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);
# 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);
# 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
# 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



__declspec(dllimport) errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
# 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


__declspec(dllimport) errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);


    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);





__declspec(dllimport) int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrlen(
           char const* _String
    );



__declspec(dllimport) size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


__declspec(dllimport) int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);
# 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( char const* _Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                         size_t* _RequiredCount,
                                         char* _Buffer,
                                         rsize_t _BufferCount,
                                         char const* _VarName
        );






    __declspec(dllimport) int* __cdecl __p___argc (void);
    __declspec(dllimport) char*** __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);
# 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) char*** __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);
# 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl getenv(
               char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char (&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
                                                                                    char** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    char const* _VarName
        );





    __declspec(dllimport) int __cdecl system(
                   char const* _Command
        );



#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv(
               char const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _putenv_s(
               char const* _Name,
               char const* _Value
        );

#pragma warning(pop)

 __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                     char const* _Filename,
                                     char const* _VarName,
                                     char* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
             int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
             unsigned _Frequency,
             unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
             unsigned long _Duration
        );
# 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
                   char const* _EnvString
            );



#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





}
# 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h" 3
#pragma pack(pop)
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib" 2 3




namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

struct _Nil
 {
 };


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 constexpr operator value_type() const noexcept
  {
  return (value);
  }

 constexpr value_type operator()() const noexcept
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _Val>
 using bool_constant = integral_constant<bool, _Val>;


template<bool _Val>
 struct _Cat_base
  : integral_constant<bool, _Val>
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1,
 class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty,
 class _Uty>
 constexpr bool is_same_v = is_same<_Ty, _Uty>::value;



template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };

template<>
 struct _Is_integral<char16_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<char32_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<long long>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long long>
  : true_type
 {
 };


template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_integral_v = is_integral<_Ty>::value;



template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;



template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;



template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
# 344 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
# 76 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 3
template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
  && ::std:: is_arithmetic<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" double __cdecl fabs( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
# 125 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h" 3
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle,
 long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }



inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }


#pragma warning(pop)
#pragma pack(pop)
# 647 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath" 2 3




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 1 3
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio" 3
typedef FILE FILE;


namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 1 3
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 3
#pragma pack(push, 8)
# 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 3
 extern "C" {




__declspec(dllimport) int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


__declspec(dllimport) int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 3
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );





    extern "C++"
    inline void* __cdecl memchr(
                                 void* _Pv,
                                 int _C,
                                 size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }




}
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 2 3






#pragma pack(push, 8)
# 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
 extern "C" {
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
    __declspec(dllimport) errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


    __declspec(dllimport) errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }







    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcat( char *_Destination, char const* _Source);
# 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


__declspec(dllimport) int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );

char* __cdecl strcpy(
                                                 char* _Dest,
                                                 char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcpy( char *_Destination, char const* _Source);






__declspec(dllimport) size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _strerror(
               char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }






               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
         int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }






__declspec(dllimport) int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);





__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);






__declspec(dllimport) char* __cdecl strncat(
                              char* _Dest,
                              char const* _Source,
                              size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
__declspec(dllimport) int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }



__declspec(dllimport) char* __cdecl _strnset(
                              char* _Dest,
                              int _Val,
                              size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
__declspec(dllimport) char const* __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
              char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strset( char *_Destination, int _Value);





char* __cdecl _strset(
              char* _Dest,
              int _Value
    );


__declspec(dllimport) size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);





__declspec(dllimport) errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );




extern "C++"
{

    inline char* __cdecl strchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strpbrk( char* const _String, char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }


    inline char* __cdecl strrchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strstr( char* const _String, char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
# 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
                   char const* _String
        );






                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
                  char* _String
        );





}
# 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h" 3
#pragma pack(pop)
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring" 2 3




namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef" 1 3
# 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef" 3
namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}

using ::std:: max_align_t;
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 2 3



# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 constexpr initializer_list() noexcept
  : _First(0), _Last(0)
  {
  }

 constexpr initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) noexcept
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 constexpr const _Elem *begin() const noexcept
  {
  return (_First);
  }

 constexpr const _Elem *end() const noexcept
  {
  return (_Last);
  }

 constexpr size_t size() const noexcept
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.end());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 24 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
namespace std {
# 128 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static constexpr bool value = false;
 };





template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };



template<class _Ty = void>
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 const size_t _FNV_offset_basis = 2166136261U;
 const size_t _FNV_prime = 16777619U;


 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }
 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static constexpr bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };

template<>
 struct hash<char16_t>
  : public _Bitwise_hash<char16_t>
 {
 };

template<>
 struct hash<char32_t>
  : public _Bitwise_hash<char32_t>
 {
 };


template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}



namespace std {
namespace tr1 {
using ::std:: hash;
}
}
# 633 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
namespace std {

template<class... _Types>
 struct _Arg_types
 {
 };

template<class _Ty1>
 struct _Arg_types<_Ty1>
 {
 typedef _Ty1 argument_type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Arg_types<_Ty1, _Ty2>
 {
 typedef _Ty1 first_argument_type;
 typedef _Ty2 second_argument_type;
 };


template<class _Ty>
 struct _Is_function
 {
 typedef false_type _Bool_type;
 static constexpr bool _Weird = false;
 };
# 673 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };
# 686 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
 struct is_function
  : _Is_function<_Ty>::_Bool_type
 {
 };


template<class _Ty>
 constexpr bool is_function_v = is_function<_Ty>::value;
# 722 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef" 3
template<class _Ty> inline
 constexpr _Ty *addressof(_Ty& _Val) noexcept
 {
 return (__builtin_addressof(_Val));
 }




template<class _Ptrty> inline
 auto _Unfancy(_Ptrty _Ptr)
 {
 return (::std:: addressof(*_Ptr));
 }

template<class _Ty> inline
 _Ty * _Unfancy(_Ty * _Ptr)
 {
 return (_Ptr);
 }

}

#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
 struct _Is_memfunptr
 {
 typedef false_type _Bool_type;
 };
# 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };
# 47 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };



template<class _Ty>
 struct is_void
  : false_type
 {
 };
# 64 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty,
 bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
 struct _Add_reference
 {
 typedef _Ty _Lvalue;
 typedef _Ty _Rvalue;
 };

template<class _Ty>
 struct _Add_reference<_Ty, false>
 {
 typedef _Ty& _Lvalue;
 typedef _Ty&& _Rvalue;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Lvalue type;
 };


template<class _Ty>
 struct add_rvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Rvalue type;
 };


template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() noexcept;


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
# 176 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty,
 bool = _Is_function<_Ty>::_Weird>
 struct _Add_pointer
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct _Add_pointer<_Ty, false>
 {
 typedef typename remove_reference<_Ty>::type *type;
 };

template<class _Ty>
 struct add_pointer
 {
 typedef typename _Add_pointer<_Ty>::type type;
 };



template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty,
 bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
  : true_type
 {
 typedef _Ty2 _Class_type;
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct is_null_pointer
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union
  : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class
  : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From,
 class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : false_type
 {
 };

template<class _Ty>
 struct is_const<const _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_volatile
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<volatile _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_pod
  : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty
  : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic
  : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract
  : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_final
  : _Cat_base<__is_final(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout
  : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type
  : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial
  : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivially_copyable
  : _Cat_base<__is_trivially_copyable(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible
  : is_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_assignable
  : integral_constant<bool, __is_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable
  : _Cat_base<__is_trivially_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_move_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable
  : _Cat_base<__is_nothrow_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_destructible
  : _Cat_base<__is_nothrow_destructible(_Ty)>
 {
 };


template<class _Ty,
 bool = is_integral<_Ty>::value>
 struct _Sign_base
 {
 typedef typename remove_cv<_Ty>::type _Uty;
 typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
 typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
 };

template<class _Ty>
 struct _Sign_base<_Ty, false>
 {

 typedef is_floating_point<_Ty> _Signed;
 typedef false_type _Unsigned;
 };

template<class _Ty>
 struct is_signed
  : _Sign_base<_Ty>::_Signed
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Sign_base<_Ty>::_Unsigned
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, alignof(_Ty)>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static constexpr size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static constexpr size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static constexpr size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static constexpr size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, size_t _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base,
 class _Der>
 struct is_base_of
  : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };


template<class...>
 struct _Conjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_conjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_conjunction<true, _Lhs, _Traits...>
 {
 typedef typename _Conjunction<_Traits...>::type type;
 };

template<>
 struct _Conjunction<>
 {
 typedef true_type type;
 };

template<class _Trait>
 struct _Conjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Conjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct conjunction
  : _Conjunction<_Traits...>::type
 {


 };


template<class...>
 struct _Disjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_disjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_disjunction<false, _Lhs, _Traits...>
 {
 typedef typename _Disjunction<_Traits...>::type type;
 };

template<>
 struct _Disjunction<>
 {
 typedef false_type type;
 };

template<class _Trait>
 struct _Disjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Disjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct disjunction
  : _Disjunction<_Traits...>::type
 {


 };


template<class _Trait>
 struct negation
  : bool_constant<!_Trait::value>
 {
 };


namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }



template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<class _Ty,
 _Ty... _Vals>
 struct integer_sequence
 {
 static_assert(is_integral<_Ty>::value,
  "integer_sequence<T, I...> requires T to be an integral type.");

 typedef integer_sequence<_Ty, _Vals...> type;
 typedef _Ty value_type;

 static constexpr size_t size() noexcept
  {
  return (sizeof...(_Vals));
  }
 };
# 1243 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty,
 _Ty _Size>
 using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;


template<size_t... _Vals>
 using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
 using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
 using index_sequence_for = make_index_sequence<sizeof...(_Types)>;



template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };



template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type& _Arg) noexcept
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type&& _Arg) noexcept
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) noexcept
 {
 return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
  && is_copy_constructible<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) noexcept
 {
 return (::std:: move(_Arg));
 }


template<class...>
 struct _Param_tester
 {
 typedef void type;
 };


template<class... _Types>
 using void_t = typename _Param_tester<_Types...>::type;


struct _Invoker_pmf_object
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmf_pointer
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmd_object
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
  {
  return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
  }
 };

struct _Invoker_pmd_pointer
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
  {
  return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
  }
 };

struct _Invoker_functor
 {
 template<class _Callable,
  class... _Types>
  static auto _Call(_Callable&& _Obj, _Types&&... _Args)
  -> decltype(::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Callable,
 class _Ty1,
 class _Decayed = typename decay<_Callable>::type,
 bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
 bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
 struct _Invoker1;

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
  : _If<is_base_of<
   typename _Is_memfunptr<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmf_object,
  _Invoker_pmf_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
  : _If<is_base_of<
   typename _Is_member_object_pointer<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmd_object,
  _Invoker_pmd_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class... _Types>
 struct _Invoker;

template<class _Callable>
 struct _Invoker<_Callable>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class _Ty1,
 class... _Types2>
 struct _Invoker<_Callable, _Ty1, _Types2...>
  : _Invoker1<_Callable, _Ty1>
 {
 };

template<class _Callable,
 class... _Types> inline
 auto invoke(_Callable&& _Obj, _Types&&... _Args)
 -> decltype(_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
 {
 return (_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
 }

template<class _Rx,
 bool = is_void<_Rx>::value>
 struct _Forced
 {
 };

struct _Unforced
 {
 };

template<class _Cv_void,
 class... _Valtys> inline
 void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
 {
 ::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
 }

template<class _Rx,
 class... _Valtys> inline
 _Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }

template<class... _Valtys> inline
 auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
 -> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }


struct _Unique_tag_result_of
 {
 };

template<class _Void,
 class... _Types>
 struct _Result_of
 {
 };

template<class... _Types>
 struct _Result_of<
  void_t<
   _Unique_tag_result_of,
   decltype(::std:: invoke(::std:: declval<_Types>()...))>,
  _Types...>
 {
 typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
 };

template<class _Fty>
 struct result_of
 {
 static_assert(_Always_false<_Fty>::value,
  "result_of<CallableType> is invalid; use "
  "result_of<CallableType(zero or more argument types)> instead.");
 };
# 1515 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };



template<class _Ty,
 class = void>
 struct _Weak_result_type
 {
 };

template<class _Ty>
 struct _Weak_result_type<_Ty, void_t<
  typename _Ty::result_type> >
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_argument_type
  : _Weak_result_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_argument_type<_Ty, void_t<
  typename _Ty::argument_type> >
  : _Weak_result_type<_Ty>
 {
 typedef typename _Ty::argument_type argument_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_binary_args
  : _Weak_argument_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_binary_args<_Ty, void_t<
  typename _Ty::first_argument_type,
  typename _Ty::second_argument_type> >
  : _Weak_argument_type<_Ty>
 {
 typedef typename _Ty::first_argument_type first_argument_type;
 typedef typename _Ty::second_argument_type second_argument_type;
 };

template<class _Ty>
 struct _Weak_types
 {
 typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
 typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
 typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
  typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
  _Weak_binary_args<_Ty> >::type>::type type;
 };


template<class _Ty>
 class reference_wrapper
  : public _Weak_types<_Ty>::type
 {
public:
 static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
  "reference_wrapper<T> requires T to be an object type "
  "or a function type.");

 typedef _Ty type;

 reference_wrapper(_Ty& _Val) noexcept
  : _Ptr(::std:: addressof(_Val))
  {
  }

 operator _Ty&() const noexcept
  {
  return (*_Ptr);
  }

 _Ty& get() const noexcept
  {
  return (*_Ptr);
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
  }

 reference_wrapper(_Ty&&) = delete;

private:
 _Ty *_Ptr;
 };


template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(_Ty& _Val) noexcept
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: ref(_Val.get()));
 }

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) noexcept
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: cref(_Val.get()));
 }


template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 static constexpr bool _Is_refwrap = false;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 static constexpr bool _Is_refwrap = true;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
 };


namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }



template<class _Ty>
 struct _Is_swappable;


template<class _Ty>
 struct _Is_nothrow_swappable;







template<class _Ty,
 class = void> inline

 void swap(_Ty&, _Ty&)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);


template<class _Ty,
 size_t _Size,
 class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
 void swap(_Ty (&)[_Size], _Ty (&)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value);


template<class _Ty1,
 class _Ty2,
 class = void>
 struct _Swappable_with_helper
  : false_type
 {
 };

struct _Swappable_with_helper_unique_type {};
template<class _Ty1,
 class _Ty2>
 struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
  _Swappable_with_helper_unique_type,
  decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
  : true_type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_swappable_with
  : conjunction<
   _Swappable_with_helper<_Ty1, _Ty2>,
   _Swappable_with_helper<_Ty2, _Ty1>>::type
 {

 };


template<class _Ty>
 struct _Is_swappable
  : _Is_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Swap_cannot_throw
 {



 static constexpr bool value =
  noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
  && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));



 using type = bool_constant<value>;
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_nothrow_swappable_with
  : conjunction<
   _Is_swappable_with<_Ty1, _Ty2>,
   _Swap_cannot_throw<_Ty1, _Ty2>>::type
 {

 };


template<class _Ty>
 struct _Is_nothrow_swappable
  : _Is_nothrow_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };
# 1819 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits" 3
template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;



template<class _Ty>
 constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
 constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
 constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
 constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
 constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
 constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
 constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
 constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
 constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
 constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
 constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
 constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
 constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
 constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
 constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
 constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
 constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
 constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
 constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
 constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
 constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
 constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
 unsigned int _Ix = 0>
 constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
 class _Derived>
 constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
 class _To>
 constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
 constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
 constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
 constexpr bool negation_v = negation<_Trait>::value;


}


#pragma warning(pop)
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 3
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}




# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
 extern "C" {
# 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
void* __cdecl _alloca( size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


    __declspec(dllimport) int __cdecl _heapmin(void);


        __declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO* _EntryInfo);



                       __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
# 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
    typedef char __static_assert_t[(sizeof(unsigned int) <= 8) != 0];


#pragma warning(push)
#pragma warning(disable: 6540)

 __inline void* _MarkAllocaS( void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

#pragma warning(pop)
# 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
#pragma warning(push)
#pragma warning(disable: 6014)
 __inline void __cdecl _freea( void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }






        }
    }
#pragma warning(pop)
# 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
}
# 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h" 3
#pragma pack(pop)
# 40 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
 extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



        __declspec(dllimport) terminate_handler __cdecl set_terminate(
                     terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();





}
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h" 3
#pragma pack(pop)
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 2 3




#pragma pack(push, 8)
# 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
 extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);



        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
                     unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
                     _se_translator_function _NewSETranslator
            );



    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
             type_info const& _Type,
             _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int __cdecl __uncaught_exceptions();



}
# 61 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h" 3
#pragma pack(pop)
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 2 3






#pragma pack(push, 8)


#pragma pack(push, 8)
# 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
 extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
          __std_exception_data const* _From,
          __std_exception_data* _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
            __std_exception_data* _Data
    );

}
# 36 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h" 3
#pragma pack(pop)



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

}


#pragma pack(pop)
# 41 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 2 3


namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected() noexcept
 {
 return (_get_unexpected());
 }


}
# 240 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception" 3
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
         void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr() throw ()
  {
  __ExceptionPtrCreate(this);
  }

 exception_ptr(nullptr_t) throw ()
  {
  __ExceptionPtrCreate(this);
  }

 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }

 exception_ptr(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }

 exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }

 exception_ptr& operator=(nullptr_t) throw ()
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 [[noreturn]] void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception() throw ()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }

 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }

private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception() noexcept
 {
 return exception_ptr::_Current_exception();
 }

[[noreturn]] inline void rethrow_exception( exception_ptr _Ptr)
 {
 _Ptr._RethrowException();
 }

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }


class nested_exception
 {
public:
 nested_exception() noexcept
  : _Exc(::std:: current_exception())
  {
  }

 nested_exception(const nested_exception&) noexcept = default;
 nested_exception& operator=(const nested_exception&) noexcept = default;
 virtual ~nested_exception() noexcept = default;

 [[noreturn]] void rethrow_nested() const
  {
  if (_Exc)
   ::std:: rethrow_exception(_Exc);
  else
   ::std:: terminate();
  }

 ::std:: exception_ptr nested_ptr() const noexcept
  {
  return (_Exc);
  }

private:
 ::std:: exception_ptr _Exc;
 };


template<class _Ty,
 class _Uty>
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested(_Ty&& _Arg)
  : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
  {
  }
 };

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
 {
 typedef typename remove_reference<_Ty>::type _Uty;
 typedef _With_nested<_Ty, _Uty> _Glued;

 throw _Glued(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
 {
 typedef typename decay<_Ty>::type _Decayed;

 throw _Decayed(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
 {
 typedef typename remove_reference<_Ty>::type _Uty;

 integral_constant<bool,
  is_class<_Uty>::value
  && !is_base_of<nested_exception, _Uty>::value
  && !is_final<_Uty>::value> _Tag;

 _Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
 }


template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
 {
 const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

 if (_Nested)
  _Nested->rethrow_nested();
 }

template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *, false_type)
 {
 }

template<class _Ty> inline
 void rethrow_if_nested(const _Ty& _Arg)
 {
 integral_constant<bool,
  is_polymorphic<_Ty>::value
  && (!is_base_of<nested_exception, _Ty>::value
   || is_convertible<_Ty *, nested_exception *>::value)> _Tag;

 _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h" 2 3




typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint" 2 3




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


 namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
 }

}
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h" 3
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat" 1 3






# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
 extern "C" {
# 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
              unsigned int* _CurrentState,
              unsigned int _NewValue,
              unsigned int _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);




    __declspec(dllimport) void __cdecl _statusfp2(
                  unsigned int* _X86Status,
                  unsigned int* _SSE2Status
        );







__declspec(dllimport) unsigned int __cdecl _control87(
         unsigned int _NewValue,
         unsigned int _Mask
    );



    __declspec(dllimport) int __cdecl __control87_2(
                  unsigned int _NewValue,
                  unsigned int _Mask,
                  unsigned int* _X86ControlWord,
                  unsigned int* _Sse2ControlWord
        );




__declspec(dllimport) int* __cdecl __fpecode(void);




__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);
# 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
# 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
    __declspec(dllimport) void __cdecl fpreset(void);
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
}
# 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\float.h" 3
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat" 2 3
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3



# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar" 1 3
# 16 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar" 3
typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 52 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static constexpr bool has_denorm_loss = (bool)(false);
 static constexpr bool has_infinity = (bool)(false);
 static constexpr bool has_quiet_NaN = (bool)(false);
 static constexpr bool has_signaling_NaN = (bool)(false);
 static constexpr bool is_bounded = (bool)(false);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(false);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr bool is_specialized = (bool)(false);
 static constexpr bool tinyness_before = (bool)(false);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
 static constexpr int digits = (int)(0);
 static constexpr int digits10 = (int)(0);

 static constexpr int max_digits10 = (int)(0);

 static constexpr int max_exponent = (int)(0);
 static constexpr int max_exponent10 = (int)(0);
 static constexpr int min_exponent = (int)(0);
 static constexpr int min_exponent10 = (int)(0);
 static constexpr int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static constexpr _Ty (min)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty (max)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty lowest() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty round_error() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty infinity() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (_Ty());
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(true);
 static constexpr bool is_integer = (bool)(true);
 static constexpr bool is_modulo = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static constexpr bool has_denorm_loss = (bool)(true);
 static constexpr bool has_infinity = (bool)(true);
 static constexpr bool has_quiet_NaN = (bool)(true);
 static constexpr bool has_signaling_NaN = (bool)(true);
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(true);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr bool tinyness_before = (bool)(true);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
 static constexpr int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)((-128) != 0);
 static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((_Ty)0x0000);
  }

 static constexpr _Ty (max)() noexcept
  {
  return ((_Ty)0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(0x0000 != 0);
 static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (false);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (true);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(1);
 static constexpr int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 - 1);
 static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8);
 static constexpr int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-32768));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (32767);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (short) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned short));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char16_t));
 static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);

 };


template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (int) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned int));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647L - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647L);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffUL);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };


template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char32_t));
 static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);

 };


template<> class numeric_limits<long long>
 : public _Num_int_base
 {
public:
 typedef long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (-0x7fffffffffffffff - 1);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0x7fffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long long>
 : public _Num_int_base
 {
public:
 typedef unsigned long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);

 };


template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (1.175494351e-38F);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (3.402823466e+38F);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (1.192092896e-07F);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5F);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (1.401298464e-45F);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_valf());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nanf("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nansf("1"));
  }

 static constexpr int digits = (int)(24);
 static constexpr int digits10 = (int)(6);

 static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)128);
 static constexpr int max_exponent10 = (int)((int)38);
 static constexpr int min_exponent = (int)((int)(-125));
 static constexpr int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5L);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };
# 1481 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h" 2 3



extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985)






 namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }



__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) throw();


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();




    inline void* __cdecl operator new(size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }





    inline void* __cdecl operator new[](size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

}
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {




typedef void (__cdecl * new_handler) ();



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 noexcept;

__declspec(dllimport) new_handler __cdecl get_new_handler()
 noexcept;
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 1 3







# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h" 3
extern "C++" {

#pragma pack(push, 8)







 __declspec(allocator) void* __cdecl operator new(
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );


    __declspec(allocator) void* __cdecl operator new[](
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );

    void __cdecl operator delete(
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();





#pragma pack(pop)

}
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 2 3


#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
 extern "C" {



typedef void* _HFILE;
# 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*, int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);
# 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;
# 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
        __declspec(dllimport) int* __cdecl __p__crtDbgFlag(void);
        __declspec(dllimport) long* __cdecl __p__crtBreakAlloc(void);




        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(void);

        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
                     _CRT_ALLOC_HOOK _PfnNewHook
            );

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(void);

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
                     _CRT_DUMP_CLIENT _PFnNewDump
            );



    __declspec(dllimport) int __cdecl _CrtCheckMemory(void);

    typedef void (__cdecl* _CrtDoForAllClientObjectsCallback)(void*, void*);

    __declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
             _CrtDoForAllClientObjectsCallback _Callback,
             void* _Context
        );

    __declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(void);

    __declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
                  void const* _Block,
                  unsigned int _Size,
                  long* _RequestNumber,
                  char** _FileName,
                  int* _LineNumber
        );


    __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
                 void const* _Pointer
        );


    __declspec(dllimport) int __cdecl _CrtIsValidPointer(
                 void const* _Pointer,
                 unsigned int _Size,
                 int _ReadWrite
        );

    __declspec(dllimport) void __cdecl _CrtMemCheckpoint(
              _CrtMemState* _State
        );

    __declspec(dllimport) int __cdecl _CrtMemDifference(
              _CrtMemState* _State,
              _CrtMemState const* _OldState,
              _CrtMemState const* _NewState
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
                 _CrtMemState const* _State
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
             _CrtMemState const* _State
        );


    __declspec(dllimport) int __cdecl _CrtReportBlockType(
                 void const* _Block
        );

    __declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
             long _NewValue
        );

    __declspec(dllimport) int __cdecl _CrtSetDbgFlag(
             int _NewFlag
        );
# 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
    __declspec(dllimport) void __cdecl _aligned_free_dbg(
                                       void* _Block
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _aligned_msize_dbg(
                      void* _Block,
                      size_t _Alignment,
                      size_t _Offset
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   size_t _Offset,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _calloc_dbg(
                   size_t _Count,
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _expand_dbg(
                      void* _Block,
                      size_t _Size,
                      int _BlockUse,
                      char const* _FileName,
                      int _LineNumber
        );

    __declspec(dllimport) void __cdecl _free_dbg(
                                       void* _Block,
                                       int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _malloc_dbg(
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _msize_dbg(
                      void* _Block,
                      int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
                                                                              char** _PBuffer,
                                       size_t* _PBufferSizeInBytes,
                                       char const* _VarName,
                                       int _BlockType,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath_dbg(
                                         char* _FullPath,
                                         char const* _Path,
                                         size_t _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd_dbg(
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );




    __declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd_dbg(
                                         int _Drive,
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _strdup_dbg(
                   char const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam_dbg(
                   char const* _DirName,
                   char const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup_dbg(
                   wchar_t const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
                                                                              wchar_t** _PBuffer,
                                         size_t* _PBufferSizeInWords,
                                         wchar_t const* _VarName,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath_dbg(
                                         wchar_t* _FullPath,
                                         wchar_t const* _Path,
                                         size_t _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd_dbg(
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd_dbg(
                                         int _Drive,
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam_dbg(
                   wchar_t const* _DirName,
                   wchar_t const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );
# 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
    __declspec(dllimport) int __cdecl _CrtDbgReport(
                   int _ReportType,
                   char const* _FileName,
                   int _Linenumber,
                   char const* _ModuleName,
                   char const* _Format,
        ...);

    __declspec(dllimport) int __cdecl _CrtDbgReportW(
                   int _ReportType,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
        ...);


    __declspec(dllimport) int __cdecl _VCrtDbgReportA(
                   int _ReportType,
                   void* _ReturnAddress,
                   char const* _FileName,
                   int _LineNumber,
                   char const* _ModuleName,
                   char const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) int __cdecl _VCrtDbgReportW(
                   int _ReportType,
                   void* _ReturnAddress,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
             size_t _NewDebugFillThreshold
        );

    __declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(void);

    __declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
                 int _ReportType,
                 _HFILE _ReportFile
        );

    __declspec(dllimport) int __cdecl _CrtSetReportMode(
             int _ReportType,
             int _ReportMode
        );



        extern long _crtAssertBusy;

        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(void);




        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHook2(
                     int _Mode,
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHookW2(
                     int _Mode,
                     _CRT_REPORT_HOOKW _PFnNewHook
            );
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
}
# 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\crtdbg.h" 3
#pragma pack(pop)
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
# 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { (void)( (!!(("_Count <= _Dest_size" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd", 173, 0, L"%ls", L"\"_Count <= _Dest_size\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"_Count <= _Dest_size", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd", 173, 0); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((int_type)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };


template<>
 struct char_traits<char16_t>
 : public _Char_traits<char16_t, unsigned short>
 {
 };

typedef streampos u16streampos;


template<>
 struct char_traits<char32_t>
 : public _Char_traits<char32_t, unsigned int>
 {
 };

typedef streampos u32streampos;


template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
  noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
  noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(const int_type& _Meta)
  noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((unsigned char)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
# 737 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd" 3
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size,
 class> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty,
 class> inline
 void swap(_Ty& _Left, _Ty& _Right)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)

 {
 _Ty _Tmp = ::std:: move(_Left);
 _Left = ::std:: move(_Right);
 _Right = ::std:: move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

constexpr piecewise_construct_t piecewise_construct{};


template<class...>
 class tuple;

template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_default_constructible<_Uty1>::value
      && is_default_constructible<_Uty2>::value> >
  constexpr pair()
  : first(), second()
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
    && is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
    || !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 pair(const pair&) = default;
 pair(pair&&) = default;

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<is_convertible<const _Other1&, _Ty1>::value
    && is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
    || !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2);

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)
  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))

  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;

 void swap(_Myt& _Right)
  noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)

  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }
 };



template<class _Ty1,
 class _Ty2,
 class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 constexpr pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {
template<class _Ty,
 size_t _Size>
 class array;


template<class _Tuple>
 struct tuple_size;

template<class _Ty,
 size_t _Size>
 struct tuple_size<array<_Ty, _Size> >
  : integral_constant<size_t, _Size>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<class _Ty>
 constexpr size_t tuple_size_v = tuple_size<_Ty>::value;



template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 struct tuple_element<_Idx, array<_Ty, _Size> >
 {
 static_assert(_Idx < _Size, "array index out of bounds");

 typedef _Ty type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<size_t _Index>
 struct tuple_element<_Index, tuple<> >
 {
 static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
  "tuple index out of bounds");
 };

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 0>) noexcept
 {
 return (_Pr.first);
 }

template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 1>) noexcept
 {
 return (_Pr.second);
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
 return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  _Ctype;
 return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
  get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }


template<class _Ty,
 class _Other = _Ty> inline
 _Ty exchange(_Ty& _Val, _Other&& _New_val)
 {
 _Ty _Old_val = ::std:: move(_Val);
 _Val = ::std:: forward<_Other>(_New_val);
 return (_Old_val);
 }


template<class _Ty> inline
 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
 {
 return (_Val);
 }

template<class _Ty>
 void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}



#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 25 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
typedef const wchar_t *_Dbfile_t;
typedef unsigned int _Dbline_t;

__declspec(dllimport) void __cdecl _Debug_message(const wchar_t *,
 const wchar_t *, unsigned int);






struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() noexcept
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }

  return (*this);
  }

 ~_Iterator_base12() noexcept
  {

  _Lockit _Lock(3);
  _Orphan_me();

  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;


   if (_Myproxy != _Parent_proxy)
    {
    _Lockit _Lock(3);
    _Orphan_me();
    _Mynextiter = _Parent_proxy->_Myfirstiter;
    _Parent_proxy->_Myfirstiter = this;
    _Myproxy = _Parent_proxy;
    }




   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {

  if (_Myproxy != 0)
   {
   _Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   while (*_Pnext != 0 && *_Pnext != this)
    _Pnext = &(*_Pnext)->_Mynextiter;

   if (*_Pnext == 0)
    _Debug_message(L"ITERATOR LIST CORRUPTED!", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 202);
   *_Pnext = _Mynextiter;
   _Myproxy = 0;
   }

  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {

 if (_Myproxy != 0)
  {
  _Lockit _Lock(3);

  for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   *_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
   (*_Pnext)->_Myproxy = 0;
  _Myproxy->_Myfirstiter = 0;
  }

 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {

 _Lockit _Lock(3);


 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }






typedef _Container_base12 _Container_base;
typedef _Iterator_base12 _Iterator_base;



struct _Zero_then_variadic_args_t
 {
 };

struct _One_then_variadic_args_t
 {
 };

template<class _Ty1,
 class _Ty2,
 bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
 class _Compressed_pair final
  : private _Ty1

 {
private:
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Ty1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (*this);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (*this);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (*this);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (*this);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };

template<class _Ty1,
 class _Ty2>
 class _Compressed_pair<_Ty1, _Ty2, false> final

 {
private:
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Myval1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (_Myval1);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (_Myval1);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (_Myval1);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (_Myval1);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };


template<class _Ty,
 class = void>
 struct _Is_checked_helper
  : false_type
 {
 };

template<class _Ty>
 struct _Is_checked_helper<_Ty, void_t<
  typename _Ty::_Unchecked_type> >
  : true_type
 {
 };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return {};
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }
# 445 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Iter> inline
 _Iter _Unchecked_idl0(_Iter _Src)
 {
 return (_Src);
 }




template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }
# 506 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _General_ptr_iterator_tag
 {
 };

struct _Trivially_copyable_ptr_iterator_tag
 : _General_ptr_iterator_tag
 {
 };

struct _Really_trivial_ptr_iterator_tag
 : _Trivially_copyable_ptr_iterator_tag
 {
 };


struct _Any_tag
 {
 constexpr _Any_tag() noexcept = default;
 template<class _Ty>
  constexpr _Any_tag(_Ty&&) noexcept {}
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class,
 class = void>
 struct _Iterator_traits_base
 {
 };

template<class _Iter>
 struct _Iterator_traits_base<_Iter, void_t<
  typename _Iter::iterator_category,
  typename _Iter::value_type,
  typename _Iter::difference_type,
  typename _Iter::pointer,
  typename _Iter::reference
  > >
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;

 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Iter>
 struct iterator_traits
  : _Iterator_traits_base<_Iter>
 {
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter>
 using _Iter_value_t = typename iterator_traits<_Iter>::value_type;


template<class _Iter>
 using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;


template<class _Iter>
 using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;


template<class _Ty,
 class = void>
 struct _Is_iterator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty, void_t<
  typename iterator_traits<_Ty>::iterator_category
  > >
  : true_type
 {
 };
# 683 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n1(_Iter _Src, _Diff, false_type)
 {
 return (_Src);
 }

template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n1(_Iter _Src, _Diff _Count, true_type)
 {
 if (0 < _Count)
  {
  static_cast<void>((_Src) + (_Count));
  }

 return (_Unchecked(_Src));
 }

template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n(_Iter _Src, _Diff _Count)
 {
 return (_Unchecked_n1(_Src, _Count, is_base_of<random_access_iterator_tag, _Iter_cat_t<_Iter>>()));
 }




template<class _Ty1,
 class _Ty2>
 struct _Is_same_size
  : bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
 {
 };


template<class _Elem,
 bool _Is_enum = is_enum<_Elem>::value>
 struct _Unwrap_enum
 {
 typedef underlying_type_t<_Elem> type;
 };

template<class _Elem>
 struct _Unwrap_enum<_Elem, false>
 {
 typedef _Elem type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Both_or_neither_bool
  : bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
 {
 };


template<class _Source,
 class _Dest>
 struct _Ptr_cat_helper
 {
 typedef typename _Unwrap_enum<_Source>::type _USource;
 typedef typename _Unwrap_enum<_Dest>::type _UDest;
 typedef conditional_t<
  conjunction<
   _Is_same_size<_USource, _UDest>,
   is_integral<_USource>,
   is_integral<_UDest>,
   _Both_or_neither_bool<_USource, _UDest>,

   negation<is_volatile<_Source>>,
   negation<is_volatile<_Dest>>
  >::value,
  _Really_trivial_ptr_iterator_tag,
  _General_ptr_iterator_tag> type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef conditional_t<
  is_trivially_copyable<_Elem>::value,
  conditional_t<is_trivial<_Elem>::value,
   _Really_trivial_ptr_iterator_tag,
   _Trivially_copyable_ptr_iterator_tag>,
  _General_ptr_iterator_tag> type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Really_trivial_ptr_iterator_tag type;
 };

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_copy_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_move_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }
# 887 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Pr,
 class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt_pred(_Pr&& _Pred,
  _Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
  noexcept(noexcept(!_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left)))

 {
 return (!_Pred(_Left, _Right)
  ? false
  : _Pred(_Right, _Left)
   ? (_Debug_message(L"invalid comparator", _File, _Line), true)
   : true);
 }


template<class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt(_Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
  noexcept(noexcept(!(_Left < _Right)) && noexcept(_Right < _Left))

 {
 return (_Debug_lt_pred(less<>(),
  ::std:: forward<_Ty1>(_Left), ::std:: forward<_Ty2>(_Right), _File, _Line));
 }


template<class _InIt> inline
 void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer(_Ty *_Ptr, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_pointer_if(bool, _InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer_if(bool _Test, _Ty *_Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Test && _Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_range2(_InIt _First, _InIt _Last,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 static_cast<void>(_First == _Last);
 }

template<class _RanIt> inline
 void _Debug_range2(_RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  }
 }

template<class _InIt> inline
 void _Debug_range(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range2(_First, _Last, _File, _Line, _Iter_cat_t<_InIt>());
 }


template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr2(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, input_iterator_tag)
 {
 if (_First != _Last)
  _Debug_pointer(_Ptr, _File, _Line);
 }

template<class _RanIt,
 class _Pty> inline
 void _Debug_range_ptr2(_RanIt _First, _RanIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  _Debug_pointer(_Ptr, _File, _Line);
  }
 }

template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr2(_First, _Last, _Ptr, _File, _Line, _Iter_cat_t<_InIt>());
 }


template<class _InIt,
 class _Pr> inline
 void _Debug_order2(_InIt, _InIt, _Pr&,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt,
 class _Pr> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr& _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1017))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt,
 class _Pr> inline
 void _Debug_order(_InIt _First, _InIt _Last, _Pr&& _Pred,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr(_First, _Last, _Pred, _File, _Line);
 _Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat_t<_InIt>());
 }
# 1043 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
template<class _Ty,
 size_t _Actual,
 class _Diff> inline
 void _Debug_array_size2(_Ty (&)[_Actual], _Diff _Desired,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Actual < _Desired)
  _Debug_message(L"array too small", _File, _Line);
 }





template<class _InIt,
 class _Diff> inline
 void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1063);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {

 _Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
 }


template<class _InIt> inline
 _Iter_diff_t<_InIt>
  _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
 {
 _Iter_diff_t<_InIt> _Off = 0;
 for (; _First != _Last; ++_First)
  ++_Off;

 return (_Off);
 }

template<class _RanIt> inline
 _Iter_diff_t<_RanIt>
  _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
 {

 if (_First != _Last)
  {
  _Debug_pointer(_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1114);
  _Debug_pointer(_Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1115);
  }


 return (_Last - _First);
 }

template<class _InIt> inline
 _Iter_diff_t<_InIt>
  distance(_InIt _First, _InIt _Last)
 {
 return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
 }


template<class _InIt> inline
 _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
 {
 static_assert(is_base_of<input_iterator_tag,
  typename iterator_traits<_InIt>::iterator_category>::value,
  "next requires input iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
 {
 static_assert(is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value,
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }


template<class _Ty>
 struct pointer_traits;

template<class _RanIt>
 class reverse_iterator
  : public iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference>
 {
 typedef reverse_iterator<_RanIt> _Myt;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  : current()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : current(_Right.base())
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

protected:
 _RanIt current;
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt> inline
 reverse_iterator<_RanIt> operator+(
  typename reverse_iterator<_RanIt>::difference_type _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() < _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
 {
 return (reverse_iterator<_RanIt>(_Iter));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array + _Size);
 }


template<class _Container>
 constexpr auto inline cbegin(const _Container& _Cont)
  noexcept(noexcept(::std:: begin(_Cont)))
  -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 constexpr auto inline cend(const _Container& _Cont)
  noexcept(noexcept(::std:: end(_Cont)))
  -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rbegin(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rend(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont)
  -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont)
  -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }


template<class _Container>
 constexpr auto inline size(const _Container& _Cont)
  -> decltype(_Cont.size())
 {
 return (_Cont.size());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr size_t size(const _Ty(&)[_Size]) noexcept
 {
 return (_Size);
 }

template<class _Container>
 constexpr auto inline empty(const _Container& _Cont)
  -> decltype(_Cont.empty())
 {
 return (_Cont.empty());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr bool empty(const _Ty(&)[_Size]) noexcept
 {
 return (false);
 }

template<class _Elem> inline
 constexpr bool empty(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.size() == 0);
 }

template<class _Container>
 constexpr auto inline data(_Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Container>
 constexpr auto inline data(const _Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Elem> inline
 constexpr const _Elem *data(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
# 1687 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
 _Array_const_iterator()
  : _Ptr(),
  _Idx(0)
  {
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  : _Ptr(_Parg),
  _Idx(_Off)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Idx = _Right - _Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr + _Idx);
  }

 reference operator*() const
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1718);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1719, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1719, 0); };
   }






                              ;

  return (_Ptr[_Idx]);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1743);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1744, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1744, 0); };
   }






  ++_Idx;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (_Ptr == 0
   || _Idx <= 0)
   {
   _Debug_message(L"array iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1769);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1770, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1770, 0); };
   }






  --_Idx;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Size < _Idx + _Off)
   {
   _Debug_message(L"array iterator + offset out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1794);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1795, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1795, 0); };
   }





  _Idx += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx
   ? -(difference_type)(_Right._Idx - _Idx)
   : (difference_type)_Idx - _Right._Idx);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx == _Right._Idx);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (_Ptr != _Right._Ptr)
   {
   _Debug_message(L"array iterators incompatible", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1873);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1874, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 1874, 0); };
   }
  }
# 1885 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility" 3
 pointer _Ptr;
 size_t _Idx;

 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits<_RanIt>::reference _Ref0;
 typedef conditional_t<is_reference<_Ref0>::value,
  remove_reference_t<_Ref0>&&, _Ref0> reference;
 typedef _RanIt iterator_type;

 move_iterator()
  : current()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (static_cast<reference>(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _Traits>
 struct _Char_traits_eq
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::eq(_Left, _Right));
  }
 };


template<class _Traits>
 struct _Char_traits_lt
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::lt(_Left, _Right));
  }
 };


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_memmove(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove(_Dest_ch, _First_ch, _Count);
 return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

 return (_Copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2362);
 return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_no_deprecate(_First, _Last, _Dest));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  _Copy_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 if (0 < _Count)
  {
  *_Dest = *_First;
  while (0 < --_Count)
   *++_Dest = *++_First;
  return (++_Dest);
  }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {


 return (_Copy_n_unchecked2(_First, _Count,
  _Dest, _Iter_cat_t<_InIt>()));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_array_size2(_First, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2473);
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_First, _Count, _Unchecked_n(_Dest, _Count))));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_Dest, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2485);
 return (_Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Dest));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_First, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2497);
 _Debug_array_size2(_Dest, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2498);
 return (_Copy_n_unchecked(_First, _Count, _Dest));
 }



template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 return (static_cast<_BidIt2>(
  :: memmove(_Dest_ch - _Count, _First_ch, _Count)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) - ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_backward" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2569);
 return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2626);
 return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "move" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Move_no_deprecate(_First, _Last, _Dest));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *move(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  _Move_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) - ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "move_backward" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2706);
 return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _Ty>
 struct _Is_character
  : false_type
  {
  };

template<>
 struct _Is_character<char>
  : true_type
  {
  };

template<>
 struct _Is_character<signed char>
  : true_type
  {
  };

template<>
 struct _Is_character<unsigned char>
  : true_type
  {
  };

template<class _FwdIt,
 class _Ty>
 struct _Fill_memset_is_safe_helper
 {
 typedef _Iter_value_t<_FwdIt> _Value_type;
 typedef typename conjunction<
  is_pointer<_FwdIt>,
  disjunction<
   conjunction<
    _Is_character<_Ty>,
    _Is_character<_Value_type>>,
   conjunction<
    is_same<bool, _Ty>,
    is_same<bool, _Value_type>>
  >>::type type;
 };

template<class _FwdIt,
 class _Ty> inline
 typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
 _Fill_memset_is_safe(const _FwdIt&, const _Ty&)
 {
 return {};
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2787);
 _Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_Dest, _Val, _Count);
  return (_Dest + _Count);
  }

 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {

 return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 return (_Rechecked(_Dest,
  _Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
 }


template<class _Elem1,
 class _Elem2>
 struct _Value_equality_is_bitwise_equality
  : bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
 {



 };

template<class _Elem1,
 class _Elem2,
 class _Pr>
 struct _Equal_memcmp_is_safe_helper
  : false_type
 {

 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
  : conjunction<
   _Is_same_size<_Elem1, _Elem2>,
   is_integral<_Elem1>,
   is_integral<_Elem2>,
   negation<is_same<bool, _Elem1>>,
   negation<is_same<bool, _Elem2>>,
   negation<is_volatile<_Elem1>>,
   negation<is_volatile<_Elem2>>,


   _Value_equality_is_bitwise_equality<_Elem1, _Elem2>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
  : is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {

 };

template<class _Iter1,
 class _Iter2,
 class _Pr> inline
 false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
 {
 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _Pr> inline
 typename _Equal_memcmp_is_safe_helper<
  remove_const_t<_Obj1>,
  remove_const_t<_Obj2>,
  _Pr>::type
  _Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, false_type)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr&, true_type)
 {
 const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
 const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
 const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
 return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
 return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
 {
 return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2971);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 2972);
 return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "equal" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t<!is_same<_InTy *, _Pr>::value>> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (_Equal_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }



template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   input_iterator_tag, input_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3032);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3049);
 return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3059);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3060);
 return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: equal(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _Elem1,
 class _Elem2,
 class _FTy>
 struct _Lex_compare_check_element_types_helper
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   _Is_character<_FTy>,
   is_unsigned<_FTy>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   is_unsigned<_Elem1>,
   is_unsigned<_Elem2>
  >::type
 {
 };

template<class _Memcmp_pr>
 struct _Lex_compare_optimize
 {
 };

template<class _Memcmp_pr,
 class _Obj1,
 class _Obj2,
 class _FTy>
 using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
  _Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
  _Memcmp_pr, void>>;

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 _Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
 {

 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3141))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
  }

 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3179);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3180);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3181);
 return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: lexicographical_compare(_First1, _Last1,
  _First2, _Last2, less<>()));
 }


template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  (is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3284);
 return (_Rechecked(_First,
  _Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  _Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3320);
 return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _Iter_diff_t<_InIt>
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
  forward_iterator_tag, forward_iterator_tag)
 {
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag)
 {

 while (_Pred(*--_Last1, *--_Last2))
  ;
 ++_Last1;
 ++_Last2;
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 _Trim_matching_suffixes(_Last1, _Last2, _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
 for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
  if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
   {
   _Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
   if (_Count2 == 0)
    return (false);
   _FwdIt1 _Skip1 = ::std:: next(_Next1);
   _Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
   if (_Count2 != _Count1)
    return (false);
   }

 return (true);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   _FwdIt2 _Last2 = ::std:: next(_First2,
    ::std:: distance(_First1, _Last1));
   return (_Check_match_counts(_First1, _Last1,
    _First2, _Last2, _Pred));
   }

 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
 {
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3429);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3430);
 return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "is_permutation" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
 }


template<class _FwdIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t<!is_same<_InTy *, _Pr>::value>> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (_Is_permutation_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }



template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _InTy,
 size_t _InSize> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: is_permutation(_First1, _Last1, _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3490);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   if (::std:: distance(_First1, _Last1)
    != ::std:: distance(_First2, _Last2))
    return (false);
   else
    return (_Check_match_counts(_First1, _Last1,
     _First2, _Last2, _Pred));
   }

 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3515);
 return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {

 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3526);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3527);
 return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, _Last2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3554);
 _Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
 }


template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid, _Res = _Last; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   {
   if (++_Next == _Last)
    return (_Res == _Last ? _Mid : _Res);
   else
    _Mid = _Next;
   }
  else if (++_Next == _Last)
   {
   if (_Res == _Last)
    _Res = _First;
   _Next = _Mid;
   }
  }
 }

template<class _BidIt> inline
 pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last)
 {
 while (_First != _Sentinel && _Last != _Sentinel)
  ::std:: iter_swap(_First++, --_Last);
 return (::std:: make_pair(_First, _Last));
 }

template<class _BidIt> inline
 _BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
 _Reverse_unchecked(_Tmp.first, _Tmp.second);
 return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
 }

template<class _RanIt> inline
 _RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 _Reverse_unchecked(_First, _Last);
 return (_First + (_Last - _Mid));
 }

template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 if (_First == _Mid)
  return (_Last);
 if (_Mid == _Last)
  return (_First);
 return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 _Debug_range(_First, _Mid, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3625);
 _Debug_range(_Mid, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3626);
 return (_Rechecked(_First,
  _Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last))));
 }


template<class _Diff,
 class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);


    _Myptr = (_Elem *)_malloc_dbg(_Count, 2,
     "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility", 3755);





    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }

  return (*this);
  }

                    ~_Yarn() noexcept
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)


   _free_dbg(_Myptr, 2);





  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };


template<class _Ty,
 class _Alloc>
 constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

}

#pragma warning(pop)
#pragma pack(pop)
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)







#pragma warning(disable: 4100)

namespace std {
# 45 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 3
inline
 __declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
  bool _Try_aligned_allocation = true)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  return (_Ptr);


 if ((size_t)(-1) / _Sz < _Count)
  _Xbad_alloc();
 const size_t _User_size = _Count * _Sz;


 if (_Try_aligned_allocation
  && 4096 <= _User_size)
  {
  static_assert(sizeof (void *) < 32,
   "Big allocations should at least match vector register size");
  const size_t _Block_size = (2 * sizeof(void *) + 32 - 1) + _User_size;
  if (_Block_size <= _User_size)
   _Xbad_alloc();
  const uintptr_t _Ptr_container =
   reinterpret_cast<uintptr_t>(::operator new(_Block_size));
  { if (!(_Ptr_container != 0)) { (void)( (!!(("_Ptr_container != 0" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 70, 0, L"%ls", L"\"_Ptr_container != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 70, 0); } ; };
  _Ptr = reinterpret_cast<void *>((_Ptr_container + (2 * sizeof(void *) + 32 - 1))
   & ~(32 - 1));
  static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;


  static_cast<uintptr_t *>(_Ptr)[-2] = 0xFAFAFAFAUL;

  }
 else


  {
  _Ptr = ::operator new(_User_size);
  { if (!(_Ptr != 0)) { (void)( (!!(("_Ptr != 0" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 84, 0, L"%ls", L"\"_Ptr != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 84, 0); } ; };
  }
 return (_Ptr);
 }


inline
 void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
 {

 { if (!(_Count <= (size_t)(-1) / _Sz)) { (void)( (!!(("_Count <= (size_t)(-1) / _Sz" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 94, 0, L"%ls", L"\"_Count <= (size_t)(-1) / _Sz\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 94, 0); } ; };
 const size_t _User_size = _Count * _Sz;
 if (4096 <= _User_size)
  {
  const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
  { if (!((_Ptr_user & (32 - 1)) == 0)) { (void)( (!!(("(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 100, 0, L"%ls", L"\"(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 100, 0); } ; };

  const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
  const uintptr_t _Ptr_container =
   *reinterpret_cast<uintptr_t *>(_Ptr_ptr);




  { if (!(reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == 0xFAFAFAFAUL)) { (void)( (!!(("reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 110, 0, L"%ls", L"\"reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 110, 0); } ; };





  { if (!(_Ptr_container < _Ptr_user)) { (void)( (!!(("_Ptr_container < _Ptr_user" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 114, 0, L"%ls", L"\"_Ptr_container < _Ptr_user\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 114, 0); } ; };


  { if (!(2 * sizeof(void *) <= _Ptr_user - _Ptr_container)) { (void)( (!!(("2 * sizeof(void *) <= _Ptr_user - _Ptr_container" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 118, 0, L"%ls", L"\"2 * sizeof(void *) <= _Ptr_user - _Ptr_container\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 118, 0); } ; };







  { if (!(_Ptr_user - _Ptr_container <= (2 * sizeof(void *) + 32 - 1))) { (void)( (!!(("_Ptr_user - _Ptr_container <= _NON_USER_SIZE" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 126, 0, L"%ls", L"\"_Ptr_user - _Ptr_container <= _NON_USER_SIZE\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 126, 0); } ; };


  _Ptr = reinterpret_cast<void *>(_Ptr_container);
  }


 ::operator delete(_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_lvalue_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_lvalue_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };



template<class _Ptrty> inline
 void _Destroy(_Ptrty _Ptr)
 {
 typedef typename pointer_traits<_Ptrty>::element_type _Ty;
 _Ptr->~_Ty();
 }


template<class _Ptrty> inline
 auto _Const_cast(_Ptrty _Ptr)
 {
 using _Elem = typename pointer_traits<_Ptrty>::element_type;
 using _Modifiable = remove_const_t<_Elem>;
 using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

 return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
 }

template<class _Ty> inline
 auto _Const_cast(_Ty * _Ptr)
 {
 return (const_cast<remove_const_t<_Ty> *>(_Ptr));
 }



template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_is_always_equal
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 class allocator;
template<class _Alloc>
 struct _Wrap_alloc;

template<class _Alloc>
 struct _Unwrap_alloc
 {
 typedef _Alloc type;
 };

template<class _Alloc>
 struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
 {
 typedef _Alloc type;
 };



template<class _Alloc>
 using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;



template<class _Alloc,
 class = void>
 struct _Is_default_allocator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
  : true_type
 {
 };


struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Has_no_alloc_construct_tag
 {
 };

template<class _Void,
 class... _Types>
 struct _Has_no_alloc_construct
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 struct _Has_no_alloc_construct<
  void_t<
   _Has_no_alloc_construct_tag,
   decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
  _Alloc, _Ptr, _Args...>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;



struct _Has_no_alloc_destroy_tag
 {
 };

template<class _Alloc,
 class _Ptr,
 class = void>
 struct _Has_no_alloc_destroy
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr>
 struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
   _Has_no_alloc_destroy_tag,
   decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;



struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al) noexcept
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&) noexcept
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
   / sizeof(typename _Ty::value_type));
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal<_Alloc>::type
  is_always_equal;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
   _Types&&... _Args)
  {
  ::new (static_cast<void *>(_Ptr))
   _Ty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
   _Al, _Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty>
  static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
  {
  _Ptr->~_Ty();
  }

 template<class _Ty>
  static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 class allocator
 {
public:
 static_assert(!is_const<_Ty>::value,
  "The C++ Standard forbids containers of const elements "
  "because allocator<const T> is ill-formed.");

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 allocator() noexcept
  {
  }

 allocator(const allocator<_Ty>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Deallocate(_Ptr, _Count, sizeof (_Ty));
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
  }

 __declspec(allocator) pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const noexcept
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef void _Not_user_specialized;

 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() noexcept
  {
  }

 allocator(const allocator<void>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) noexcept
 {
 return (false);
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits::is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other>
   _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (pointer_traits<pointer>::pointer_to(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (pointer_traits<const_pointer>::pointer_to(_Val));
  }

 _Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(_Wrap_alloc&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other&& _Right) noexcept
  : _Mybase(::std:: forward<_Other>(_Right))
  {
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(_Wrap_alloc&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(_Other&& _Right)
  {
  _Mybase::operator=(::std:: forward<_Other>(_Right));
  return (*this);
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 __declspec(allocator) pointer allocate(size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil())
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size(_Nil = _Nil()) const noexcept
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (static_cast<const _Ty&>(_Left)
  == static_cast<const _Other&>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
 {
 _Left = _Right;
 }

template<class _Alty> inline
 void _Pocca(_Alty&, const _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_copy_assignment _Tag;
 _Pocca(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Left = ::std:: move(_Right);
 }

template<class _Alty> inline
 void _Pocma(_Alty&, _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_move_assignment _Tag;
 _Pocma(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Swap_adl(_Left, _Right);
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
 {
 if (_Left != _Right)
  {

  _Debug_message(L"containers incompatible for swap", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0", 1080);



  }
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_swap _Tag;
 _Pocs(_Left, _Right, _Tag);
 }



template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(_Unfancy(_First));
 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
 {

 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
 {


 typedef typename _Alloc::value_type _Val;
 _Destroy_range1(_First, _Last, _Al, typename conjunction<
  is_trivially_destructible<_Val>,
  _Uses_default_destroy<_Alloc, _Val *>>::type());
 }



template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
 {
 for (; _First != _Last; ++_First)
  _Destroy(_First);
 }

template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt, _FwdIt, true_type)
 {

 }

template<class _FwdIt> inline
 void _Destroy_range(_FwdIt _First, _FwdIt _Last)
 {


 _Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
 }
}



# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
# 47 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 3
typedef long _Atomic_flag_t;




typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }
# 75 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h" 3
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
# 1148 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3



# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 1 3
# 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 2 3
# 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
#pragma pack(push, 8)
# 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
 extern "C" {
# 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
    typedef struct __JUMP_BUFFER
    {
        unsigned long Ebp;
        unsigned long Ebx;
        unsigned long Edi;
        unsigned long Esi;
        unsigned long Esp;
        unsigned long Eip;
        unsigned long Registration;
        unsigned long TryLevel;
        unsigned long Cookie;
        unsigned long UnwindFunc;
        unsigned long UnwindData[6];
    } _JUMP_BUFFER;
# 145 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
    typedef int jmp_buf[16];
# 157 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
int __cdecl _setjmp(
          jmp_buf _Buf
    );


#pragma warning(push)
#pragma warning(disable: 4987)
 __declspec(noreturn) void __cdecl longjmp(
             jmp_buf _Buf,
             int _Value
        ) throw(...);
#pragma warning(pop)








}
# 177 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h" 3
#pragma pack(pop)
# 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 1 3
# 28 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 1 3
# 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 1 3
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 1 3
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 1 3
# 25 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 1 3
# 34 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 1 3
# 42 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 1 3
# 46 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 1 3
# 29 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 3
extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;



void _m_empty(void);
__m64 _m_from_int(int _I);
int _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);
# 186 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h" 3
};
# 46 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 2 3
# 65 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
# 188 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);





extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
# 296 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);






extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);






extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);

extern void _mm_stream_pi(__m64 *, __m64);

extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
# 401 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64 _Ext_val = _m_pcmpgtw(_mm_setzero_si64(), _A);

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}
# 420 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpu16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64 _Ext_val = _mm_setzero_si64();

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}
# 439 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m64 _mm_cvtps_pi16(__m128 _A)
{
  return _m_packssdw(_mm_cvt_ps2pi(_A),
                        _mm_cvt_ps2pi(_mm_movehl_ps(_A, _A)));
}
# 454 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi8_ps(__m64 _A)
{
  __m64 _Ext_val = _m_pcmpgtb(_mm_setzero_si64(), _A);

  return _mm_cvtpi16_ps(_m_punpcklbw(_A, _Ext_val));
}
# 471 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpu8_ps(__m64 _A)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(_A, _mm_setzero_si64()));
}
# 485 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m64 _mm_cvtps_pi8(__m128 _A)
{
  return _m_packsswb(_mm_cvtps_pi16(_A), _mm_setzero_si64());
}
# 500 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi32x2_ps(__m64 _A, __m64 _B)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), _A),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), _B));
}




};
# 42 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 2 3


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
# 69 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);


extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);






extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);

extern __m64 _mm_add_si64(__m64 _A, __m64 _B);

extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);

extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);

extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);

extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);

extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);






extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);

extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);

extern __m128i _mm_set1_epi64(__m64 _Q);

extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);

extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);

extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);

extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);






extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);
# 436 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h" 3
};
# 34 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 2 3
# 58 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h" 3
extern "C" {







extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


};
# 25 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 2 3
# 35 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
extern "C" {
# 45 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);


    extern __m64 _mm_hadd_pi16 (__m64, __m64);
    extern __m64 _mm_hadd_pi32 (__m64, __m64);
    extern __m64 _mm_hadds_pi16 (__m64, __m64);
# 63 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);


    extern __m64 _mm_hsub_pi16 (__m64, __m64);
    extern __m64 _mm_hsub_pi32 (__m64, __m64);
    extern __m64 _mm_hsubs_pi16 (__m64, __m64);
# 82 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h" 3
    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);


    extern __m64 _mm_maddubs_pi16 (__m64, __m64);





    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);


    extern __m64 _mm_mulhrs_pi16 (__m64, __m64);





    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);


    extern __m64 _mm_shuffle_pi8 (__m64, __m64);





    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);


    extern __m64 _mm_sign_pi8 (__m64, __m64);
    extern __m64 _mm_sign_pi16 (__m64, __m64);
    extern __m64 _mm_sign_pi32 (__m64, __m64);





    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);


    extern __m64 _mm_alignr_pi8 (__m64, __m64, int);





    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);


    extern __m64 _mm_abs_pi8 (__m64);
    extern __m64 _mm_abs_pi16 (__m64);
    extern __m64 _mm_abs_pi32 (__m64);



};
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 2 3
# 83 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);




        extern __m128 _mm_blend_ps (__m128, __m128, const int );
        extern __m128 _mm_blendv_ps(__m128, __m128, __m128 );




        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );




        extern __m128 _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );




        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);



        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);




        extern __m128i _mm_mullo_epi32(__m128i, __m128i);




        extern __m128i _mm_mul_epi32(__m128i, __m128i);




        extern int _mm_testz_si128(__m128i , __m128i );




        extern int _mm_testc_si128(__m128i , __m128i );





        extern int _mm_testnzc_si128(__m128i , __m128i );







        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );
# 170 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
        extern int _mm_extract_ps(__m128 , const int );
# 188 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );







        extern int _mm_extract_epi8 (__m128i , const int );
        extern int _mm_extract_epi32(__m128i , const int );
# 207 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h" 3
        extern __m128i _mm_minpos_epu16(__m128i);



        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );



        extern __m128 _mm_round_ps(__m128 , int );
        extern __m128 _mm_round_ss(__m128 , __m128 , int );



        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);



        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);





        extern __m128i _mm_packus_epi32(__m128i, __m128i);





        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );





        extern __m128i _mm_stream_load_si128(const __m128i*);


};
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 2 3




extern "C" {
# 83 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 3
    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int _mm_cmpistrz (__m128i , __m128i , const int );
    extern int _mm_cmpistrc (__m128i , __m128i , const int );
    extern int _mm_cmpistrs (__m128i , __m128i , const int );
    extern int _mm_cmpistro (__m128i , __m128i , const int );
    extern int _mm_cmpistra (__m128i , __m128i , const int );

    extern int _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );
# 126 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h" 3
    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );






};
# 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h" 2 3




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



};
# 28 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 2 3



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
# 106 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
# 116 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
# 129 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
# 142 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
# 151 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
# 160 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
# 178 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
# 192 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
# 206 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
# 216 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
# 226 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
# 235 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
# 244 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
# 259 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
# 268 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
# 277 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
# 286 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
# 295 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
# 304 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
# 313 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
# 322 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
# 331 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
# 341 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
# 351 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
# 360 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
# 369 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
# 381 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
# 394 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
# 403 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
# 413 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
# 422 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
# 431 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
# 447 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
# 464 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
# 478 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);
# 497 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);
# 512 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
# 521 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
# 531 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
# 540 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
# 550 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
# 563 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
# 572 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
# 585 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
# 620 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
# 631 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
# 642 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
# 653 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
# 663 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
# 674 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
# 702 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
# 713 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
# 723 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
# 733 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
# 743 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
# 753 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
# 763 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
# 836 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
# 859 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
# 896 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
# 913 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _mm256_stream_pd(double *, __m256d);
# 922 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _mm256_stream_ps(float *, __m256);
# 932 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rcp_ps(__m256);
# 943 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
# 952 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
# 961 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
# 974 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
# 989 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256 __cdecl _mm256_round_ps(__m256, int);
# 999 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
# 1033 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
# 1056 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
# 1074 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
# 1088 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_pd(__m256d);
# 1097 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
# 1138 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
# 1219 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);
# 1239 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _xsaveopt(void *, unsigned __int64);
# 1248 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _xsavec(void *, unsigned __int64);
# 1258 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _xrstor(void const *, unsigned __int64);
# 1268 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _xsaves(void *, unsigned __int64);
# 1278 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _xrstors(void const *, unsigned __int64);
# 1287 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _fxsave(void *);
# 1296 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _fxrstor(void const *);
# 1307 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);
# 1334 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );







extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );
# 1862 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int _lzcnt_u32(unsigned int);
# 1874 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int _tzcnt_u32(unsigned int);
# 1884 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);
# 1948 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
# 1960 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);
# 1975 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );
# 1992 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h" 3
extern unsigned short __cdecl _load_be_u16(void const*);
extern unsigned int __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


};
# 24 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 1 3
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
extern "C" {
# 127 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
# 226 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);






unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
# 278 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
# 301 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h" 3
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


};
# 25 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3




# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mm3dnow.h" 1 3
# 30 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mm3dnow.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 30 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mm3dnow.h" 2 3





extern "C" {




void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


};
# 29 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 2 3
# 44 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
extern "C" {
# 129 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);


unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
# 155 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);



long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);
# 170 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
char _InterlockedAnd8(char volatile * _Value, char _Mask);
# 179 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);






short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);




__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);




char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);
# 209 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long __cdecl _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);
# 222 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long __cdecl _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);
# 272 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);
# 283 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
char _InterlockedOr8(char volatile * _Value, char _Mask);
# 292 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);
# 303 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
char _InterlockedXor8(char volatile * _Value, char _Mask);
# 320 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);






void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);
# 348 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);
# 374 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
# 389 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);



void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);

unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);







unsigned char _interlockedbittestandset(long volatile *, long);
# 547 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h" 3
unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);
__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);
__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);


void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
# 1151 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 2 3
# 1168 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;


template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  : _Ptr()
  {
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pstring);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Unfancy(_Ptr) < _Contptr
   || _Contptr + _Mycont->_Mysize <= _Unfancy(_Ptr))
   {
   _Debug_message(L"string iterator not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 76);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 77, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 77, 0); };
   }
# 88 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
                                        ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Mycont->_Myptr() + _Mycont->_Mysize <= _Unfancy(_Ptr))
   {
   _Debug_message(L"string iterator not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 106);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 107, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 107, 0); };
   }
# 117 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Unfancy(_Ptr) <= _Mycont->_Myptr())
   {
   _Debug_message(L"string iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 136);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 137, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 137, 0); };
   }
# 147 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Off != 0)
   {
   const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
   const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
   if (_Mycont == 0
    || _Ptr == nullptr_t{}
    || _Unfancy(_Ptr) + _Off < _Contptr
    || _Contptr + _Mycont->_Mysize < _Unfancy(_Ptr) + _Off)
    {
    _Debug_message(L"string iterator + offset out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 170);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 171, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 171, 0); };
    }
   }
# 187 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"string iterators incompatible", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 256);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 257, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 257, 0); };
   }
  }
# 273 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Const_cast(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  : _Bx(),
  _Mysize(0),
  _Myres(0)
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 union _Bxty
  {
  _Bxty()
   {
   }

  ~_Bxty() noexcept
   {
   }

  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<class _Alloc_types>
 class _String_alloc
 {
public:
 typedef _String_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_String_val<_Val_types> > iterator;
 typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
  };

 value_type *_Myptr()
  {
  return (_Get_data()._Myptr());
  }

 const value_type *_Myptr() const
  {
  return (_Get_data()._Myptr());
  }
# 611 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 _String_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  _Alloc_proxy();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _String_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Alloc_proxy();
  }

 ~_String_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _String_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _String_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 typedef typename _String_val<_Val_types>::_Bxty _Bxty;

 _Bxty& _Bx() noexcept
  {
  return (_Get_data()._Bx);
  }

 const _Bxty& _Bx() const noexcept
  {
  return (_Get_data()._Bx);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

 size_type& _Myres() noexcept
  {
  return (_Get_data()._Myres);
  }

 const size_type& _Myres() const noexcept
  {
  return (_Get_data()._Myres);
  }

private:
 _Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<_String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 868);
  _Tidy();
  _Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
  size_type _Count = ::std:: distance(_First, _Last);
  reserve(_Count);
  _Construct(_First, _Last, input_iterator_tag());
  }

 void _Construct(_Elem *_First,
  _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 void _Construct(const _Elem *_First,
  const _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) noexcept
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres())
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres() < this->_BUF_SIZE)
   _Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
    _Right._Mysize() + 1);
  else
   {
   this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
   _Right._Bx()._Ptr = pointer();
   }
  this->_Mysize() = _Right._Mysize();
  this->_Myres() = _Right._Myres();
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() noexcept
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Copy_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1088);
  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1106);
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Chassign(this->_Mysize(), _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);

  if (this == &_Right)
   erase((size_type)(_Roff + _Count)), erase(0, _Roff);
  else if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1166);
  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1181);
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1251);
  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1272);
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  _Check_offset(_Off);
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  _Check_offset(_Off);
  if (this->_Mysize() - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize() - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Where - begin();
  erase(_Count, 1);
  return (begin() + _Count);
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1370);
  size_type _Count = _First - begin();
  erase(_Count, _Last - _First);
  return (begin() + _Count);
  }

 void clear() noexcept
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff,
   size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();

  const size_type _Nm = this->_Mysize() - _N0 - _Off;
  const size_type _Newsize = this->_Mysize() + _Count - _N0;
  if (this->_Mysize() < _Newsize)
   _Grow(_Newsize);

  if (_Count == _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count < _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1454);
  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1484);
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(_First - begin(), _Last - _First, _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(_First - begin(), _Last - _First, _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 const_iterator begin() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 iterator end() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 const_iterator end() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1682);





  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1695);





  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  auto& _Dx = this->_Get_data();
  auto& _Sz = _Dx._Mysize;
  if (_Sz == _Dx._Myres)
   _Grow(_Sz + 1);
  auto _Ptr = _Dx._Myptr();
  _Traits::assign(_Ptr[_Sz], _Ch);
  ++_Sz;
  _Traits::assign(_Ptr[_Sz], _Elem());
  }

 void pop_back()
  {
  erase(this->_Mysize() - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const noexcept
  {
  return (this->_Myptr());
  }

 const _Elem *data() const noexcept
  {
  return (this->_Myptr());
  }
# 1758 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring" 3
 size_type length() const noexcept
  {
  return (this->_Mysize());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  const size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize())
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize(), _Ch);
  }

 size_type capacity() const noexcept
  {
  return (this->_Myres());
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
   {
   size_type _Size = this->_Mysize();
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const noexcept
  {
  return (this->_Mysize() == 0);
  }

 __declspec(deprecated("Call to 'std::" "basic_string::copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'"))
 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1811);
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1821);
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres())
   if (this->_BUF_SIZE <= _Right._Myres())
    _Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
   else
    {
    pointer _Ptr = this->_Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
    _Traits::copy(this->_Bx()._Buf,
     _Right._Bx()._Buf, _Right._Mysize() + 1);
    this->_Getal().construct(::std:: addressof(_Right._Bx()._Ptr), _Ptr);
    }
  else
   if (_Right._Myres() < this->_BUF_SIZE)
    ::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
   else
    {
    pointer _Ptr = _Right._Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(_Right._Bx()._Ptr));
    _Traits::copy(_Right._Bx()._Buf,
     this->_Bx()._Buf, this->_Mysize() + 1);
    this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
    }
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   ::std:: swap(this->_Myres(), _Right._Myres());
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1876);
  if (_Count == 0 && _Off <= this->_Mysize())
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1896);
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1913);
  if (_Count == 0)
   return (_Off < this->_Mysize() ? _Off
    : this->_Mysize());
  if (_Count <= this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize() - _Count ? _Off
     : this->_Mysize() - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1935);
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1953);
  if (0 < _Count && _Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1969);
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 1988);
  if (0 < _Count && 0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2006);
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2026);
  if (_Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2041);
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2060);
  if (0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2077);
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size)
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  if (_Ans != 0)
   return (_Ans);

  if (_Left_size < _Right_size)
   return (-1);

  if (_Left_size > _Right_size)
   return (1);

  return (0);
  }

 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
  {
  const size_type _Max_effective_size = this->_Mysize() - _Off;
  if (_Size <= _Max_effective_size)
   return (_Size);
  else
   return (_Max_effective_size);
  }

 int compare(const _Myt& _Right) const noexcept
  {
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right) const
  {
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count = npos) const
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
  }

 int compare(const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2145);
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2152);
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstring", 2161);
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Count));
  }

 allocator_type get_allocator() const noexcept
  {
  allocator_type _Ret(this->_Getal());
  return (_Ret);
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres() / 2 <= _Newres / 3)
   ;
  else if (this->_Myres() <= max_size() - this->_Myres() / 2)
   _Newres = this->_Myres()
    + this->_Myres() / 2;
  else
   _Newres = max_size();

  pointer _Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Unfancy(_Ptr), this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
  this->_Myres() = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  auto& _Dx = this->_Get_data();
  _Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres() < _Newsize)
   _Copy(_Newsize, this->_Mysize());
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize() <= _Ptr)
   return (false);
  else
   return (true);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres())
   {
   pointer _Ptr = this->_Bx()._Ptr;
   this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
   if (0 < _Newsize)
    _Traits::copy(this->_Bx()._Buf,
     _Unfancy(_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
   }
  this->_Myres() = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 void _Check_offset(const size_type _Off) const
  {
  if (this->_Mysize() < _Off)
   _Xran();
  }

 void _Check_offset_exclusive(const size_type _Off) const
  {
  if (this->_Mysize() <= _Off)
   _Xran();
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
  size_type;
 return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
 {
 typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 40 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 68 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 96 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 124 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 152 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 180 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 208 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 236 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 264 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdexcept" 3
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 1 3
# 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 3
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 2 3



#pragma pack(push, 8)







 struct __type_info_node;





    extern __type_info_node __type_info_root_node;




#pragma pack(push, 8)
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
         __std_type_info_data const* _Lhs,
         __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
         __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
            __std_type_info_data* _Data,
            __type_info_node* _RootNode
    );

}
# 58 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h" 3
#pragma pack(pop)



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {



        return __std_type_info_name(&_Data, &__type_info_root_node);

    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
 using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

}



#pragma pack(pop)
# 29 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 2 3
# 90 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo" 3
#pragma pack(pop)
#pragma warning(pop)
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 1 3





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
 extern "C" {
# 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isdigit( int _C);

               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isspace( int _C);

               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl toupper( int _C);


                                  __declspec(dllimport) int __cdecl tolower( int _C);

                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
# 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
        __declspec(dllimport) int __cdecl _chvalidator( int _Ch, int _Mask);
# 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }


    __declspec(dllimport) int __cdecl _chvalidator_l( _locale_t, int _Ch, int _Mask);


    __inline int __cdecl _chvalidchk_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {

        return _chvalidator_l(_Locale, _C, _Mask);
# 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
    }




    __inline int __cdecl _ischartype_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
}
# 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\ctype.h" 3
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 2 3

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
#pragma pack(push, 8)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
 extern "C" {
# 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
struct lconv
{
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
__declspec(dllimport) void __cdecl _lock_locales(void);
__declspec(dllimport) void __cdecl _unlock_locales(void);


__declspec(dllimport) int __cdecl _configthreadlocale(
         int _Flag
    );


__declspec(dllimport) char* __cdecl setlocale(
               int _Category,
               char const* _Locale
    );


__declspec(dllimport) struct lconv* __cdecl localeconv(void);


__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


__declspec(dllimport) _locale_t __cdecl _create_locale(
           int _Category,
           char const* _Locale
    );

__declspec(dllimport) void __cdecl _free_locale(
             _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func (void);
__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);



}
# 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\locale.h" 3
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 56 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);
# 93 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {


__declspec(dllimport) char *__cdecl _Getdays(void);



__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);


__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *, const struct tm *,
          void *);



__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);



__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);


__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *, const struct tm *,
          void *);
}
# 172 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo.h" 3
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocinfo" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() noexcept
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() noexcept
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfacet" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() noexcept
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
# 12 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

struct __declspec(dllimport) _Crt_new_delete
 {

 void * __cdecl operator new(size_t _Size)
  {
  void * _Ptr = operator new(_Size, nothrow);
  if (!_Ptr)
   _Xbad_alloc();
  return (_Ptr);
  }

 void * __cdecl operator new(size_t _Size, const nothrow_t&) noexcept
  {
  return (_malloc_dbg(_Size > 0 ? _Size : 1, 2, "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 74));
  }

 void __cdecl operator delete(void * _Ptr) noexcept
  {
  :: free(_Ptr);
  }

 void __cdecl operator delete(void * _Ptr, const nothrow_t&) noexcept
  {
  operator delete(_Ptr);
  }

 void * __cdecl operator new(size_t, void *_Ptr) noexcept
  {
  return (_Ptr);
  }

 void __cdecl operator delete(void *, void *) noexcept
  {
  }

 };

class locale
 : public _Locbase<int>, public _Crt_new_delete
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base, public _Crt_new_delete
  {
 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Myrefs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() noexcept
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() noexcept
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = none;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   _Ptr->_Catmask = none;
   _Ptr->_Name = "*";
   }
  }

 locale(_Uninitialized)
  {
  }
# 323 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 3
 locale(const locale& _Right) noexcept
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() noexcept
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj;
     _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
     _Lobj._Addcats(_Loc._Ptr->_Catmask,
      _Loc.name().c_str());
     _Lobj._Addcats(_Other._Ptr->_Catmask,
      _Other.name().c_str());
     _Ptr->_Catmask = _Loc._Ptr->_Catmask
      | _Other._Ptr->_Catmask;
     _Ptr->_Name = _Lobj._Getname();
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  _Init();
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj(_Cat, _Str.c_str());
     if (_Badname(_Lobj))
      _Bad = true;
     else
      {
      _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
      _Ptr->_Catmask = _Cat;
      _Ptr->_Name = _Str.c_str();
      }
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }

  if (_Bad)
   {
   delete _Ptr->_Decref();
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Str, _Cat);
  }


 ~locale() noexcept
  {
  if (_Ptr != 0)
   delete _Ptr->_Decref();
  }

 locale& operator=(const locale& _Right) noexcept
  {
  if (_Ptr != _Right._Ptr)
   {
   delete _Ptr->_Decref();
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr0 = _Getgloballocale();
   return (_Id < _Ptr0->_Facetcount
    ? _Ptr0->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
# 535 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale" 3
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;

 _Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),
  2, "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 723);

 if (!_Ptrdest)
  _Xbad_alloc();

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 756);

 if (!_Ptrdest)
  _Xbad_alloc();
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 796);

 if (!_Ptrdest)
  _Xbad_alloc();

 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const noexcept
  {
  return (do_always_noconv());
  }

 int max_length() const noexcept
  {
  return (do_max_length());
  }

 int encoding() const noexcept
  {
  return (do_encoding());
  }

                    ~codecvt_base() noexcept
  {
  }

protected:
 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (1);
  }

 virtual int do_encoding() const noexcept
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;


enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  for (; _Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1674);
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1675);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1710);
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1711);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1747);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1772);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1908);
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1909);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1944);
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1945);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 1981);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2006);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() noexcept
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
  cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
  lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
  punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
  xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() noexcept
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2235);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2244);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2253);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2271);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2293);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2311);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2336);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2370);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2379);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2388);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const noexcept
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() noexcept
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() noexcept
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   :: free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] _Ctype._Table;

  :: free(_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2518);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2532);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2546);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2559);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2692);
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2699);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2708);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2722);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2736);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2758);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2780);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2916);
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2924);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2933);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2947);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2961);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 2983);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocale", 3005);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cerrno" 1 3
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 3
namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc _Errc;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;



template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<_Errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;


class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;


class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
 {
public:
                 error_category() noexcept
  {
  _Addr = reinterpret_cast<uintptr_t>(this);
  }

 virtual ~error_category() noexcept
  {
  }

 virtual const char *name() const noexcept = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const noexcept;

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const noexcept;

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const noexcept;

 bool operator==(const error_category& _Right) const noexcept
  {
  return (_Addr == _Right._Addr);
  }

 bool operator!=(const error_category& _Right) const noexcept
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const noexcept
  {
  return (_Addr < _Right._Addr);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;

protected:
 uintptr_t _Addr;

 enum : uintptr_t
  {
  _Future_addr = 1,
  _Generic_addr = 3,
  _Iostream_addr = 5,
  _System_addr = 7
  };
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code() noexcept
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const noexcept;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() noexcept
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline bool operator==(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }

inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }


inline bool operator!=(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


inline bool operator<(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }

inline bool operator<(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }


inline error_condition
 error_category::default_error_condition(int _Errval) const noexcept
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const noexcept
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const noexcept
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const noexcept
 {
 return (category().default_error_condition(value()));
 }


inline error_code make_error_code(_Errc _Errno) noexcept
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) noexcept
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(_Errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
 {
 typedef error_code argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }
# 582 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\system_error" 3
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
 unsigned long _Message_id, char *_Narrow, unsigned long _Size);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category() noexcept
  {
  _Addr = _Generic_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  return (_Syserror_map(_Errcode));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category() noexcept
  {
  _Addr = _Iostream_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public error_category
 {
public:
 _System_error_category() noexcept
  {
  _Addr = _System_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const unsigned long _Size = 32767;
  string _Narrow(_Size, '\0');

  const unsigned long _Val = _Winerror_message(
   static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

  if (_Val == 0)
   return ("unknown error");

  _Narrow.resize(_Val);
  _Narrow.shrink_to_fit();
  return (_Narrow);
  }

 virtual error_condition
  default_error_condition(int _Errval) const noexcept
  {
  int _Posv = _Winerror_map(_Errval);

  if (_Posv != 0)
   return (error_condition(_Posv, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Ty>
 struct _Immortalizer
 {
 _Immortalizer()
  {
  ::new (static_cast<void *>(&_Storage)) _Ty();
  }

 ~_Immortalizer() noexcept
  {
  }

 _Immortalizer(const _Immortalizer&) = delete;
 _Immortalizer& operator=(const _Immortalizer&) = delete;

 typename aligned_union<1, _Ty>::type _Storage;
 };

template<class _Ty> inline
 _Ty& _Immortalize()
 {
             static _Immortalizer<_Ty> _Static;
 return (*reinterpret_cast<_Ty *>(&_Static._Storage));
 }

inline const error_category& generic_category() noexcept
 {
 return (_Immortalize<_Generic_error_category>());
 }

inline const error_category& iostream_category() noexcept
 {
 return (_Immortalize<_Iostream_error_category>());
 }

inline const error_category& system_category() noexcept
 {
 return (_Immortalize<_System_error_category>());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\share.h" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
# 47 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
 static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
 static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
 static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
 static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
 static constexpr _Fmtflags left = (_Fmtflags)0x0040;
 static constexpr _Fmtflags right = (_Fmtflags)0x0080;
 static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
 static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
 static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
 static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
 static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
 static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

 static constexpr _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static constexpr _Iostate goodbit = (_Iostate)0x0;
 static constexpr _Iostate eofbit = (_Iostate)0x1;
 static constexpr _Iostate failbit = (_Iostate)0x2;
 static constexpr _Iostate badbit = (_Iostate)0x4;

 enum _Openmode
  {
  _Openmask = 0xff};

 static constexpr _Openmode in = (_Openmode)0x01;
 static constexpr _Openmode out = (_Openmode)0x02;
 static constexpr _Openmode ate = (_Openmode)0x04;
 static constexpr _Openmode app = (_Openmode)0x08;
 static constexpr _Openmode trunc = (_Openmode)0x10;
 static constexpr _Openmode _Nocreate = (_Openmode)0x40;
 static constexpr _Openmode _Noreplace = (_Openmode)0x80;
 static constexpr _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekbeg,
  _Seekcur,
  _Seekend
  };

 static constexpr _Seekdir beg = _Seekbeg;
 static constexpr _Seekdir cur = _Seekcur;
 static constexpr _Seekdir end = _Seekend;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;


 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;


 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);


 typedef unsigned int io_state, open_mode, seek_dir;



 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 251 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xiosbase" 3
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() noexcept
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }


 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }


 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() noexcept
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  : public _Crt_new_delete
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  : public _Crt_new_delete
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete _Ptr1;
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete _Pfa1;
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst0 = pbase();
   _Elem *_Pnext0 = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst0 = eback();
   _Elem *_Gnext0 = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst0, _Pnext0, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst0, _Gnext0, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }


 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }


 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }


 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }


 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
# 484 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf" 3
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
  : _Strbuf(_Sb), _Got(_Sb == 0), _Val()
  {
  }

 istreambuf_iterator(istream_type& _Istr) noexcept
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();


  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf", 517);


  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {

  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\streambuf", 532);


  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) noexcept
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) noexcept
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const noexcept
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) long long __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long long __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {


inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 double _Val = :: strtod(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: pow(10.0, static_cast<double>(_Pten));

 return (_Val);
 }


inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 float _Val = :: strtof(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: powf(10.0f, static_cast<float>(_Pten));

 return (_Val);
 }


template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),
  2, "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 102);

 if (!_Ptrdest)
  _Xbad_alloc();
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() noexcept
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Falsename);
  :: free((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() noexcept
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 427);
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 464);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 487);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 509);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 529);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 549);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 569);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }







 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 595);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 619);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 643);
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }



 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 669);
  char _Ac[32], *_Ep;
  int _Errno = 0;

  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned long long _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  char *_Leading = _Ptr;
  *_Ptr++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     {
     ++_Pten;
     if (0 < _Idx)
      _Sticky = true;
     }
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      {
      ++_Pten;
      if (0 < _Idx)
       _Sticky = true;
      }
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (*_Phexexp != 1000000000 && _Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }
   else if (0 < _Idx)
    _Sticky = true;

  if (_Sticky)
   {
   char *_Px = _Ptr;
   for (; --_Px != _Leading; )
    {
    if (*_Px == localeconv()->decimal_point[0])
     ;
    else if (*_Px != '9')
     {
     ++*_Px;
     break;
     }
    else
     *_Px = '0';
    }

   if (_Px == _Leading)
    {
    *_Px = '1';
    ++_Pten;
    }
   }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
    || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }



 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1256);
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabs(_Val))
   {
   int _Ptwo;
   (void):: frexp(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabsl(_Val))
   {
   int _Ptwo;
   (void):: frexpl(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Count) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1414);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  if (_Poff != _Count)
   _Groupstring[_Poff] = _Punct_fac.decimal_point();

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum", 1516);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1619 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocnum" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() noexcept
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) noexcept
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
# 213 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ios" 3
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }


namespace tr1 {
using ::std:: hexfloat;
}


inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
# 35 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() noexcept
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
# 196 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 198);
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 204);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 211);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 270 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else if (0 < _Count)
   {
   _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream", 562);
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
# 676 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
# 690 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
# 42 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
# 197 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 199);
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 205);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 212);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 271 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 572);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 675);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != (numeric_limits<streamsize>::max)()
     && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 732);
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Count && 0 < _Num)
   {
   _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 758);
   read(_Str, _Num < _Count ? _Num : _Count);
   }

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
# 923 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
# 934 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() noexcept
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
# 1004 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 _Debug_pointer(_Str, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\istream", 1009);
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width()
   : (numeric_limits<streamsize>::max)();
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
# 26 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iostream" 3
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() noexcept;
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
# 11 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 2 3


#pragma pack(push, 8)
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
 extern "C" {
# 24 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
}
# 24 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h" 3
#pragma pack(pop)
# 12 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\fstream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const char *,
 ios_base::openmode, int);
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const wchar_t *,
 ios_base::openmode, int);


extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const unsigned short *,
 ios_base::openmode, int);



template<class _Elem> inline
 bool _Fgetc(_Elem& _Ch, FILE *_File)
 {
 return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
 }

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
 {
 int _Meta;
 if ((_Meta = fgetc(_File)) == (-1))
  return (false);
 else
  {
  _Byte = (char)_Meta;
  return (true);
  }
 }

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (wchar_t)_Meta;
  return (true);
  }
 }


template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (unsigned short)_Meta;
  return (true);
  }
 }



template<class _Elem> inline
 bool _Fputc(_Elem _Ch, FILE *_File)
 {
 return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
 }

template<> inline bool _Fputc(char _Byte, FILE *_File)
 {
 return (fputc(_Byte, _File) != (-1));
 }

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem> inline
 bool _Ungetc(const _Elem& _Ch, FILE *_File)
 {
 return (false);
 }

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
 {
 return (ungetc(_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem,
 class _Traits>
 class basic_filebuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_filebuf<_Elem, _Traits> _Myt;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef typename _Traits::state_type _Myst;
 typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

 basic_filebuf(FILE *_File = 0)
  : _Mysb()
  {
  _Init(_File, _Newfl);
  }

 virtual ~basic_filebuf() noexcept
  {
  if (_Myfile != 0)
   _Reset_back();
  if (_Closef)
   close();
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_filebuf(_Uninitialized)
  : _Mysb(_Noinit)
  {
  }

 basic_filebuf(_Myt&& _Right)
  {
  _Init(_Right._Myfile, _Newfl);
  _Init((FILE *)0, _Closefl);
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {

   FILE *_Myfile_sav = _Myfile;
   const _Cvt *_Pcvt_sav = _Pcvt;
   typename _Traits::state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
   bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

   _Elem *_Pfirst0 = _Mysb::pbase();
   _Elem *_Pnext0 = _Mysb::pptr();
   _Elem *_Pend = _Mysb::epptr();
   _Elem *_Gfirst0 = _Mysb::eback();
   _Elem *_Gnext0 = _Mysb::gptr();
   _Elem *_Gend = _Mysb::egptr();


   _Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
   _Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   if (_Right.eback() != &_Right._Mychar)
    _Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   else if (_Right.gptr() != &_Right._Mychar)
    _Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
   else
    _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

   _Pcvt = _Right._Pcvt;
   _State = _Right._State;
   _Wrotesome = _Right._Wrotesome;
   _Closef = _Right._Closef;


   _Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
   _Right.setp(_Pfirst0, _Pnext0, _Pend);
   if (!_Set_eback_sav)
    _Right.setg(_Gfirst0, _Gnext0, _Gend);
   else if (!_Set_eback_live)
    _Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
     &_Right._Mychar + 1);
   else
    _Right.setg(&_Right._Mychar, &_Right._Mychar,
     &_Right._Mychar + 1);

   _Right._Pcvt = _Pcvt_sav;
   _Right._State = _State_sav;
   _Right._Wrotesome = _Wrotesome_sav;
   _Right._Closef = _Closef_sav;


   ::std:: swap(_Set_eback, _Right._Set_eback);
   ::std:: swap(_Set_egptr, _Right._Set_egptr);

   ::std:: swap(_Mychar, _Right._Mychar);
   ::std:: swap(_Mysb::_Plocale, _Right._Plocale);
   }
  }

 basic_filebuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl};

 bool is_open() const
  {
  return (_Myfile != 0);
  }

 _Myt *open(const char *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const string& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }


 _Myt *open(const char *_Filename, ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }


 _Myt *open(const wchar_t *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const wstring& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }


 _Myt *open(const wchar_t *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }



 _Myt *open(const unsigned short *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }


 _Myt *open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }



 _Myt *close()
  {
  _Myt *_Ans = this;
  if (_Myfile == 0)
   _Ans = 0;
  else
   {
   if (!_Endwrite())
    _Ans = 0;
   if (fclose(_Myfile) != 0)
    _Ans = 0;
   }
  _Init(0, _Closefl);
  return (_Ans);
  }

 virtual void _Lock()
  {
  if (_Myfile)
   :: _lock_file(_Myfile);
  }

 virtual void _Unlock()
  {
  if (_Myfile)
   :: _unlock_file(_Myfile);
  }

protected:
 virtual int_type overflow(int_type _Meta =
  _Traits::eof())
  {
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));
  else if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
    ? _Meta : _Traits::eof());
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits::to_char_type(_Meta);
   const _Elem *_Src;
   char *_Dest;

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->out(_State,
     &_Ch, &_Ch + 1, _Src,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::partial:
    case codecvt_base::ok:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (_Traits::eof());

     _Wrotesome = true;
     if (_Src != &_Ch)
      return (_Meta);

     if (0 < _Count)
      ;
     else if (_Str.size() < 4 * _STRING_INC)
      _Str.append(_STRING_INC, '\0');
     else
      return (_Traits::eof());
     break;
     }

    case codecvt_base::noconv:
     return (_Fputc(_Ch, _Myfile) ? _Meta
      : _Traits::eof());

    default:
     return (_Traits::eof());
    }
   }
 }

 virtual int_type pbackfail(int_type _Meta =
  _Traits::eof())
  {
  if (_Mysb::gptr() != 0
   && _Mysb::eback() < _Mysb::gptr()
   && (_Traits::eq_int_type(_Traits::eof(), _Meta)
   || _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
    _Meta)))
   {
   _Mysb::_Gndec();
   return (_Traits::not_eof(_Meta));
   }
  else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::eof());
  else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
   return (_Meta);
  else if (_Mysb::gptr() != &_Mychar)
   {
   _Mychar = _Traits::to_char_type(_Meta);
   _Set_back();
   return (_Meta);
   }
  else
   return (_Traits::eof());
 }

 virtual int_type underflow()
  {
  int_type _Meta;
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
   return (_Meta);
  else
   {
   pbackfail(_Meta);
   return (_Meta);
   }
  }

 virtual int_type uflow()
  {
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(
    *_Mysb::_Gninc()));
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   {
   _Elem _Ch = 0;
   return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
    : _Traits::eof());
   }
  else
   {
   string _Str;

   for (; ; )
    {
    _Elem _Ch, *_Dest;
    const char *_Src;
    int _Nleft;
    int _Meta = fgetc(_Myfile);

    if (_Meta == (-1))
     return (_Traits::eof());

    _Str.append(1, (char)_Meta);
    switch (_Pcvt->in(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
     &_Ch, &_Ch + 1, _Dest))
     {
    case codecvt_base::partial:
    case codecvt_base::ok:
     if (_Dest != &_Ch)
      {
      _Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
      for (; 0 < _Nleft; )
       ungetc(_Src[--_Nleft], _Myfile);
      return (_Traits::to_int_type(_Ch));
      }
     else
      _Str.erase((size_t)0,
       (size_t)(_Src - &*_Str.begin()));
     break;

    case codecvt_base::noconv:
     if (_Str.size() < sizeof (_Elem))
      break;

     ::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));


     return (_Traits::to_int_type(_Ch));

    default:
     return (_Traits::eof());
     }
    }
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition;

  if (_Mysb::gptr() == &_Mychar
   && _Way == ios_base::cur
   && _Pcvt == 0)
   _Off -= (off_type)sizeof (_Elem);

  if (_Myfile == 0 || !_Endwrite()
   || ((_Off != 0 || _Way != ios_base::cur)
    && _fseeki64(_Myfile, _Off, _Way) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual pos_type seekpos(pos_type _Pos,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition = _Pos.seekpos();
  off_type _Off = (off_type)_Pos - (off_type)((long long)(_Fileposition));

  if (_Myfile == 0 || !_Endwrite()
   || fsetpos(_Myfile, &_Fileposition) != 0
   || (_Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _State = _Pos.state();

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
  {
  if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
   _Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
   (size_t)_Count * sizeof (_Elem)) != 0)
   return (0);
  else
   {
   _Init(_Myfile, _Openfl);
   return (this);
   }
  }

 virtual int sync()
  {
  return (_Myfile == 0
   || _Traits::eq_int_type(_Traits::eof(), overflow())
   || 0 <= fflush(_Myfile) ? 0 : -1);
  }

 virtual void imbue(const locale& _Loc)
  {
  _Initcvt(&use_facet< _Cvt >(_Loc));
  }

 void _Init(FILE *_File, _Initfl _Which)
  {
                          static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb::_Init();






#pragma warning(push)
#pragma warning(disable: 6240)
 if (_File != 0 && sizeof (_Elem) == 1)
#pragma warning(pop)

 {
   _Elem **_Pb = 0;
   _Elem **_Pn = 0;
   int *_Nr = 0;

   ::_get_stream_buffer_pointers(
    _File,
    reinterpret_cast<char***>(&_Pb),
    reinterpret_cast<char***>(&_Pn),
    &_Nr);
   int *_Nw = _Nr;

   _Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite()
  {
  if (_Pcvt == 0 || !_Wrotesome)
   return (true);
  else
   {
   const int _STRING_INC = 8;
   char *_Dest;
   if (_Traits::eq_int_type(_Traits::eof(), overflow()))
    return (false);

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->unshift(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::ok:
     _Wrotesome = false;

    case codecvt_base::partial:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (false);
     if (!_Wrotesome)
      return (true);
     if (_Count == 0)
      _Str.append(_STRING_INC, '\0');
     break;
     }

    case codecvt_base::noconv:
     return (true);

    default:
     return (false);
    }
   }
  }

 void _Initcvt(const _Cvt *_Newpcvt)
  {
  if (_Newpcvt->always_noconv())
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb::_Init();
   }
  }

private:
 const _Cvt *_Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits::state_type _State;
 bool _Closef;
 FILE *_Myfile;

 void _Reset_back()
  {
  if (_Mysb::eback() == &_Mychar)
   _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
  }

 void _Set_back()
  {
  if (_Mysb::eback() != &_Mychar)
   {
   _Set_eback = _Mysb::eback();
   _Set_egptr = _Mysb::egptr();
   }
  _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
  }

 _Elem *_Set_eback;
 _Elem *_Set_egptr;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_filebuf<_Elem, _Traits>& _Left,
  basic_filebuf<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ifstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_ifstream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ifstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ifstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ifstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ifstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_ifstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ifstream<_Elem, _Traits>& _Left,
  basic_ifstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ofstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ofstream<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ofstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ofstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ofstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ofstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_ofstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ofstream<_Elem, _Traits>& _Left,
  basic_ofstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_fstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_fstream<_Elem, _Traits> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_fstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_fstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_fstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_fstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }


 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }



 virtual ~basic_fstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }


 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
 }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_fstream<_Elem, _Traits>& _Left,
  basic_fstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 13 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>
  get_temporary_buffer(ptrdiff_t _Count) noexcept
 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 103);
 return (_Uninitialized_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_FwdIt>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "uninitialized_copy_n" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_array_size2(_First, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 184);
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_First, _Count, _Unchecked_n(_Dest, _Count))));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_Dest, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 196);
 return (_Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Dest));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 _Debug_array_size2(_First, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 208);
 _Debug_array_size2(_Dest, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 209);
 return (_Uninitialized_copy_n_unchecked(_First, _Count, _Dest));
 }



template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_copy_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_copy_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), ::std:: move(*_First));
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_move_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef decltype(::std:: move(*_First)) _Src_type;
 return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_move_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninitialized_fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 355);
 _Uninitialized_fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_First, _Val, _Count);
  return (_First + _Count);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val)
 {
 return (_Uninitialized_fill_n_unchecked1(_First, _Count, _Val, _Fill_memset_is_safe(_First, _Val)));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Rechecked(_First,
  _Uninitialized_fill_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Val)));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First), *_Pval);
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, *_Pval, _Count);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Iter_value_t<_FwdIt> * _Pval, _Wrap_alloc<_Alloc>& _Al)
 {
 _Uninit_alloc_fill_n1(_First, _Count, _Pval, _Al,
  typename conjunction<decltype(_Fill_memset_is_safe(_First, *_Pval)),
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(*_Pval)>>::type());
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First));
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef _Iter_value_t<_FwdIt> _Ty;
 _Uninitialized_default_fill_n1(_First, _Count, _Al,
  typename conjunction<
   is_pointer<_FwdIt>,
   is_scalar<_Ty>,
   negation<is_volatile<_Ty>>,
   negation<is_member_pointer<_Ty>>,
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator& operator*()
  {
  return (*this);
  }

 raw_storage_iterator& operator=(const _Ty& _Val)
  {
  _Construct(_Unfancy(_Next), _Val);
  return (*this);
  }

 raw_storage_iterator& operator=(_Ty&& _Val)
  {
  _Construct(_Unfancy(_Next), ::std:: move(_Val));
  return (*this);
  }

 raw_storage_iterator& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator operator++(int)
  {
  raw_storage_iterator _Ans = *this;
  ++_Next;
  return (_Ans);
  }

 _OutIt base() const
  {
  return (_Next);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() noexcept
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator& operator=(const _Temp_iterator& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator*()
  {
  return (*this);
  }

 _Temp_iterator& operator++()
  {
  return (*this);
  }

 _Temp_iterator& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }

  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };



template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) noexcept
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() noexcept
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() noexcept
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() noexcept
  {
  delete _Myptr;
  }

 _Ty& operator*() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 764);


  return (*get());
  }

 _Ty *operator->() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory", 774);


  return (get());
  }

 _Ty *get() const noexcept
  {
  return (_Myptr);
  }

 _Ty *release() noexcept
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Const_cast(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == _Tptr()
   || _Ptr < _Mycont->_Myfirst
   || _Mycont->_Mylast <= _Ptr)
   {
   _Debug_message(L"vector iterator not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 73);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 74, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 74, 0); };
   }
# 84 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
                                    ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Mycont->_Mylast <= _Ptr)
   {
   _Debug_message(L"vector iterator not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 102);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 103, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 103, 0); };
   }
# 113 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
  if (_Mycont == 0
   || _Ptr == nullptr_t{}
   || _Ptr <= _Mycont->_Myfirst)
   {
   _Debug_message(L"vector iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 132);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 133, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 133, 0); };
   }
# 143 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Off != 0)
   {
   const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
   if (_Mycont == 0
    || _Ptr + _Off < _Mycont->_Myfirst
    || _Mycont->_Mylast < _Ptr + _Off)
    {
    _Debug_message(L"vector iterator + offset out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 164);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 165, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 165, 0); };
    }
   }
# 179 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"vector iterators incompatible", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 248);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 249, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 249, 0); };
   }
  }
# 265 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (this->_Ptr);
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  : _Myfirst(),
  _Mylast(),
  _Myend()
  {
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<class _Alloc_types>
 class _Vector_alloc
 {
public:
 typedef _Vector_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
 typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
# 542 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 _Vector_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  _Alloc_proxy();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _Vector_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Alloc_proxy();
  }

 ~_Vector_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Vector_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Vector_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 pointer& _Myfirst() noexcept
  {
  return (_Get_data()._Myfirst);
  }

 const pointer& _Myfirst() const noexcept
  {
  return (_Get_data()._Myfirst);
  }

 pointer& _Mylast() noexcept
  {
  return (_Get_data()._Mylast);
  }

 const pointer& _Mylast() const noexcept
  {
  return (_Get_data()._Mylast);
  }

 pointer& _Myend() noexcept
  {
  return (_Get_data()._Myend);
  }

 const pointer& _Myend() const noexcept
  {
  return (_Get_data()._Myend);
  }

private:
 _Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   try {
   _Uninitialized_default_fill_n(this->_Myfirst(), _Count,
    this->_Getal());
   this->_Mylast() += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst() = _Right._Myfirst();
  this->_Mylast() = _Right._Mylast();
  this->_Myend() = _Right._Myend();

  _Right._Myfirst() = pointer();
  _Right._Mylast() = pointer();
  _Right._Myend() = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(this->_Myfirst()[_Idx]));
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast();
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast() == this->_Myend())
   _Reserve(1);
  _Orphan_range(this->_Mylast(), this->_Mylast());
  this->_Getal().construct(_Unfancy(this->_Mylast()),
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast();
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector emplace iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 941);


  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Construct(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Copy_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_unchecked(_Right._Myfirst(),
     _Right._Mylast(), this->_Myfirst());
    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = this->_Myfirst() + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst() + size();
    _Copy_unchecked(_Right._Myfirst(),
     _Ptr, this->_Myfirst());
    this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
     this->_Mylast());
    }
   else
    {
    if (this->_Myfirst() != pointer())
     {
     _Destroy(this->_Myfirst(), this->_Mylast());
     this->_Getal().deallocate(this->_Myfirst(),
      this->_Myend() - this->_Myfirst());
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast() =
      _Ucopy(_Right._Myfirst(), _Right._Mylast(),
      this->_Myfirst());
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const noexcept
  {
  return (this->_Myend() - this->_Myfirst());
  }

 size_type _Unused_capacity() const noexcept
  {
  return (this->_Myend() - this->_Mylast());
  }

 size_type _Has_unused_capacity() const noexcept
  {
  return (this->_Myend() != this->_Mylast());
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myfirst(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myfirst(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Mylast(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Mylast(), &this->_Get_data()));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
    this->_Getal());
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - _Unfancy(this->_Myfirst());
    _Reserve(_Newsize - size());
    _Ptr = _Unfancy(this->_Myfirst()) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 size_type size() const noexcept
  {
  return (this->_Mylast() - this->_Myfirst());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (this->_Myfirst() == this->_Mylast());
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Getal());
  return (_Ret);
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1218);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1219, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1219, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1234);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1235, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1235, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 _Ty * data() noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 const _Ty * data() const noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    this->_Myfirst()[_Idx]);
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    _Val);
   ++this->_Mylast();
   }
  }


 void pop_back()
  {
  if (empty())
   _Debug_message(L"vector empty before pop", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1302);
  else
   {
   _Orphan_range(this->_Mylast() - 1, this->_Mylast());
   this->_Getal().destroy(_Unfancy(this->_Mylast() - 1));
   --this->_Mylast();
   }
  }
# 1319 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector insert iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1388);


  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    forward_iterator_tag)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1417);
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1418);


  size_type _Count = ::std:: distance(_First, _Last);
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast());
   ::std:: rotate((_Where)._Ptr, this->_Mylast(),
    this->_Mylast() + _Count);
   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   }
  }


 iterator erase(const_iterator _Where)
  {
  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() <= (_Where)._Ptr)
   _Debug_message(L"vector erase iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1474);
  _Move_unchecked((_Where)._Ptr + 1, this->_Mylast(), (_Where)._Ptr);
  _Destroy(this->_Mylast() - 1, this->_Mylast());
  _Orphan_range((_Where)._Ptr, this->_Mylast());
  --this->_Mylast();
  return (_Make_iter(_Where));
  }
# 1493 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {

    if (_Last < _First || _First._Getcont() != &this->_Get_data()
     || (_First)._Ptr < this->_Myfirst()
     || this->_Mylast() < (_Last)._Ptr)
     _Debug_message(L"vector erase iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1509);
    pointer _Ptr = _Move_unchecked((_Last)._Ptr, this->_Mylast(),
     (_First)._Ptr);
    _Orphan_range((_First)._Ptr, this->_Mylast());






    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast() - _Count;


  _Orphan_range(_Ptr, this->_Mylast());


  _Destroy(_Ptr, this->_Mylast());
  this->_Mylast() = _Ptr;
  }

 void clear() noexcept
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst(), this->_Mylast());
  this->_Mylast() = this->_Myfirst();
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst() = pointer();
  this->_Mylast() = pointer();
  this->_Myend() = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst() = this->_Getal().allocate(_Capacity);
   this->_Mylast() = this->_Myfirst();
   this->_Myend() = this->_Myfirst() + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Destroy_range(_First, _Last, this->_Getal());
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   }

  this->_Orphan_all();
  this->_Myend() = _Ptr + _Count;
  this->_Mylast() = _Ptr + _Size;
  this->_Myfirst() = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst() != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   this->_Myfirst() = pointer();
   this->_Mylast() = pointer();
   this->_Myend() = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, this->_Getal()));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_move(_First, _Last,
   _Ptr, this->_Getal()));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1670);


  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst();
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else if ((size_type)(this->_Mylast() - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast(),
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast(),
    _Count - (this->_Mylast() - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast() + _Count);
   throw;
   }

   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   ::std:: fill((_Where)._Ptr, this->_Mylast() - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast();
   this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast());

   _Orphan_range((_Where)._Ptr, this->_Mylast());
   _Move_backward_unchecked((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
  return (_Ptr + _Count);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }


 void _Orphan_range(pointer _First, pointer _Last) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   {
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
   }
  }






 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {

  const auto _Cont = static_cast<const _Mycont *>(this->_Getcont());
  _Sizet _Mysize = _Cont->_Mysize;

  _Inc += _Myoff;
  _Inc += _VBITS * (_Myptr - _Cont->_Myvec.data());
  return (_Inc < _Mysize ? -1 : _Inc == _Mysize ? 0 : +1);





  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() noexcept
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) noexcept
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) noexcept
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() noexcept
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const noexcept
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {

  if (this->_Getcont() == 0
   || this->_Myptr == 0
   || 0 <= this->_Valid(0))
   {
   _Debug_message(L"vector<bool> iterator not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1966);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1967, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 1967, 0); };
   }






  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1) << this->_Myoff);
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Mytype& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   _Debug_message(L"vector<bool> iterators incompatible", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2140);
  }
# 2155 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid((size_type)-1))
    {
    _Debug_message(L"vector<bool> iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2164);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2165, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2165, 0); };
    }






   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid(1))
    {
    _Debug_message(L"vector<bool> iterator not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2187);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2188, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2188, 0); };
    }






   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val)
  : _Myvec(_Nw(_Count), (_Vbase) (_Val ? -1 : 0))
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() noexcept
  {
  _Free_proxy();
  }
# 2391 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector" 3
 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec._Getal());
  this->_Myproxy = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec._Getal());
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(_Alproxy.address(*this->_Myproxy), 1);
  this->_Myproxy = 0;
  }


 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef vector<bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, false, _Al)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  push_back(_Tmp);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  return (insert(_Where, _Tmp));
  }


 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const noexcept
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myvec.data(), this));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myvec.data(), this));
  }

 iterator end() noexcept
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const noexcept
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Myvec.get_allocator());
  return (_Ret);
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, (void)++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2816);
  size_type _Count = ::std:: distance(_First, _Last);
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();


  if (end() <= _Where)
   _Debug_message(L"vector<bool> erase iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2829);
  ::std:: copy(_Where + 1, end(), _Where);
  _Orphan_range(_Off, this->_Mysize);





  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {

   if (_Last < _First || end() < _Last)
    _Debug_message(L"vector<bool> erase iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2852);
   iterator _Next = ::std:: copy(_Last, end(), _First);
   size_type _Newsize = _Next - begin();
   _Orphan_range(_Newsize, this->_Mysize);
   _Trim(_Newsize);





   }
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  erase(begin(), end());
  }

 void flip() noexcept
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  }

 static void swap(reference _Left, reference _Right) noexcept
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();


  if (end() < _Where)
   _Debug_message(L"vector<bool> insert iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vector", 2917);
  bool _Realloc = capacity() - size() < _Count;


  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }


   _Orphan_range(_Realloc ? 0 : _Off, this->_Mysize);

   }
  return (_Off);
  }


 void _Orphan_range(size_type _Offlo, size_type _Offhi) const
  {
  typedef _Vb_iter_base<_Alty> _Myiterbase;

  _Lockit _Lock(3);
  auto _Base = const_cast<_Vbase *>(this->_Myvec.data());

  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    {
    size_type _Off = _VBITS * ((*_Pnext)->_Myptr - _Base)
     + (*_Pnext)->_Myoff;
    if (_Off < _Offlo || _Offhi < _Off)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
    }
  }







 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= ((_Vbase)(1) << _Size) - 1;
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<bool, _Alloc> >
 {
 typedef vector<bool, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 15 "D:\\my_project\\TestSln\\TestSln/stdafx.h" 2
# 4 "d:\\my_project\\testsln\\testsln\\testsln.cpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/platform.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/platform.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 1
# 30 "D:\\my_project\\boost_1_65_1\\boost/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/user.hpp" 1
# 30 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2





# 1 "D:\\my_project\\boost_1_65_1\\boost/config/detail/select_compiler_config.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/compiler/gcc_xml.hpp" 1
# 39 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2





# 1 "D:\\my_project\\boost_1_65_1\\boost/config/detail/select_stdlib_config.hpp" 1
# 44 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/stdlib/dinkumware.hpp" 1
# 48 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2





# 1 "D:\\my_project\\boost_1_65_1\\boost/config/detail/select_platform_config.hpp" 1
# 53 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/platform/win32.hpp" 1
# 57 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/detail/suffix.hpp" 1
# 484 "D:\\my_project\\boost_1_65_1\\boost/config/detail/suffix.hpp"
namespace boost{




   typedef long long long_long_type;
   typedef unsigned long long ulong_long_type;

}
# 61 "D:\\my_project\\boost_1_65_1\\boost/config.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/platform.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/config/requires_threads.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/platform.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/mutex.hpp" 1








# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/workaround.hpp" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/config/workaround.hpp" 1
# 8 "D:\\my_project\\boost_1_65_1\\boost/detail/workaround.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/config.hpp" 2
# 465 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/auto_link.hpp" 1
# 465 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/config.hpp" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/mingw.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/mingw.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/version_number.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/mingw.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1






# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/test.h" 1
# 7 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/mingw.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/os_detected.h" 1
# 43 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/platform_detected.h" 1
# 37 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_desktop.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_store.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_store.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_store.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_store.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_phone.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_phone.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_phone.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_phone.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_runtime.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_runtime.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_runtime.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/windows_runtime.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/ios.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/ios.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/ios.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/os/ios.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/os/ios.h" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/platform/ios.h" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/throw_exception.hpp" 1






#pragma warning(push, 1)
# 42 "D:\\my_project\\boost_1_65_1\\boost/throw_exception.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/exception/exception.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/exception/exception.hpp"
#pragma warning(push, 1)






namespace boost { template <class T> class shared_ptr; };
namespace boost { namespace exception_detail { using boost::shared_ptr; } }


namespace
boost
    {
    namespace
    exception_detail
        {
        template <class T>
        class
        refcount_ptr
            {
            public:

            refcount_ptr():
                px_(0)
                {
                }

            ~refcount_ptr()
                {
                release();
                }

            refcount_ptr( refcount_ptr const & x ):
                px_(x.px_)
                {
                add_ref();
                }

            refcount_ptr &
            operator=( refcount_ptr const & x )
                {
                adopt(x.px_);
                return *this;
                }

            void
            adopt( T * px )
                {
                release();
                px_=px;
                add_ref();
                }

            T *
            get() const
                {
                return px_;
                }

            private:

            T * px_;

            void
            add_ref()
                {
                if( px_ )
                    px_->add_ref();
                }

            void
            release()
                {
                if( px_ && px_->release() )
                    px_=0;
                }
            };
        }



    template <class Tag,class T>
    class error_info;

    typedef error_info<struct throw_function_,char const *> throw_function;
    typedef error_info<struct throw_file_,char const *> throw_file;
    typedef error_info<struct throw_line_,int> throw_line;

    template <>
    class
    error_info<throw_function_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_file_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_line_,int>
        {
        public:
        typedef int value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };






    class exception;






    namespace
    exception_detail
        {
        class error_info_base;
        struct type_info_;

        struct
        error_info_container
            {
            virtual char const * diagnostic_information( char const * ) const = 0;
            virtual shared_ptr<error_info_base> get( type_info_ const & ) const = 0;
            virtual void set( shared_ptr<error_info_base> const &, type_info_ const & ) = 0;
            virtual void add_ref() const = 0;
            virtual bool release() const = 0;
            virtual refcount_ptr<exception_detail::error_info_container> clone() const = 0;

            protected:

            ~error_info_container() throw()
                {
                }
            };

        template <class>
        struct get_info;

        template <>
        struct get_info<throw_function>;

        template <>
        struct get_info<throw_file>;

        template <>
        struct get_info<throw_line>;

        template <class>
        struct set_info_rv;

        template <>
        struct set_info_rv<throw_function>;

        template <>
        struct set_info_rv<throw_file>;

        template <>
        struct set_info_rv<throw_line>;

        char const * get_diagnostic_information( exception const &, char const * );

        void copy_boost_exception( exception *, exception const * );

        template <class E,class Tag,class T>
        E const & set_info( E const &, error_info<Tag,T> const & );

        template <class E>
        E const & set_info( E const &, throw_function const & );

        template <class E>
        E const & set_info( E const &, throw_file const & );

        template <class E>
        E const & set_info( E const &, throw_line const & );
        }






    class
    exception
        {

        public:
        template <class Tag> void set( typename Tag::type const & );
        template <class Tag> typename Tag::type const * get() const;


        protected:

        exception():
            throw_function_(0),
            throw_file_(0),
            throw_line_(-1)
            {
            }
# 254 "D:\\my_project\\boost_1_65_1\\boost/exception/exception.hpp"
        virtual ~exception() throw()

            = 0

            ;




        private:

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_function const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_file const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_line const & );

        template <class E,class Tag,class T>
        friend E const & exception_detail::set_info( E const &, error_info<Tag,T> const & );

        friend char const * exception_detail::get_diagnostic_information( exception const &, char const * );

        template <class>
        friend struct exception_detail::get_info;
        friend struct exception_detail::get_info<throw_function>;
        friend struct exception_detail::get_info<throw_file>;
        friend struct exception_detail::get_info<throw_line>;
        template <class>
        friend struct exception_detail::set_info_rv;
        friend struct exception_detail::set_info_rv<throw_function>;
        friend struct exception_detail::set_info_rv<throw_file>;
        friend struct exception_detail::set_info_rv<throw_line>;
        friend void exception_detail::copy_boost_exception( exception *, exception const * );

        mutable exception_detail::refcount_ptr<exception_detail::error_info_container> data_;
        mutable char const * throw_function_;
        mutable char const * throw_file_;
        mutable int throw_line_;
        };






    inline
    exception::
    ~exception() throw()
        {
        }

    namespace
    exception_detail
        {
        template <class E>
        E const &
        set_info( E const & x, throw_function const & y )
            {
            x.throw_function_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_file const & y )
            {
            x.throw_file_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_line const & y )
            {
            x.throw_line_=y.v_;
            return x;
            }
        }



    namespace
    exception_detail
        {





        template <class T>
        struct
        error_info_injector:
            public T,
            public exception
            {
            explicit
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
                {
                }
            };






        struct large_size { char c[256]; };
        large_size dispatch_boost_exception( exception const * );

        struct small_size { };
        small_size dispatch_boost_exception( void const * );

        template <class,int>
        struct enable_error_info_helper;

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(large_size)>
            {
            typedef T type;
            };

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(small_size)>
            {
            typedef error_info_injector<T> type;
            };

        template <class T>
        struct
        enable_error_info_return_type
            {
            typedef typename enable_error_info_helper<T,sizeof(exception_detail::dispatch_boost_exception(static_cast<T *>(0)))>::type type;
            };
        }

    template <class T>
    inline
    typename
    exception_detail::enable_error_info_return_type<T>::type
    enable_error_info( T const & x )
        {
        typedef typename exception_detail::enable_error_info_return_type<T>::type rt;
        return rt(x);
        }



    namespace
    exception_detail
        {





        class
        clone_base
            {
            public:

            virtual clone_base const * clone() const = 0;
            virtual void rethrow() const = 0;

            virtual
            ~clone_base() throw()
                {
                }
            };






        inline
        void
        copy_boost_exception( exception * a, exception const * b )
            {
            refcount_ptr<error_info_container> data;
            if( error_info_container * d=b->data_.get() )
                data = d->clone();
            a->throw_file_ = b->throw_file_;
            a->throw_line_ = b->throw_line_;
            a->throw_function_ = b->throw_function_;
            a->data_ = data;
            }

        inline
        void
        copy_boost_exception( void *, void const * )
            {
            }






        template <class T>
        class
        clone_impl:
            public T,
            public virtual clone_base
            {
            struct clone_tag { };
            clone_impl( clone_impl const & x, clone_tag ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            public:

            explicit
            clone_impl( T const & x ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            ~clone_impl() throw()
                {
                }

            private:

            clone_base const *
            clone() const
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
                {
                throw*this;
                }
            };
        }






    template <class T>
    inline
    exception_detail::clone_impl<T>
    enable_current_exception( T const & x )
        {
        return exception_detail::clone_impl<T>(x);
        }
    }


#pragma warning(pop)
# 42 "D:\\my_project\\boost_1_65_1\\boost/throw_exception.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/current_function.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/current_function.hpp"
namespace boost
{

namespace detail
{

inline void current_function_helper()
{
# 69 "D:\\my_project\\boost_1_65_1\\boost/current_function.hpp"
}

}

}
# 44 "D:\\my_project\\boost_1_65_1\\boost/throw_exception.hpp" 2








namespace boost
{






inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> __declspec(noreturn) inline void throw_exception( E const & e )
{


    throw_exception_assert_compatibility(e);


    throw enable_current_exception(enable_error_info(e));



}




    namespace
    exception_detail
    {
        template <class E>
        __declspec(noreturn)
        void
        throw_exception_( E const & x, char const * current_function, char const * file, int line )
        {
            boost::throw_exception(
                set_info(
                    set_info(
                        set_info(
                            enable_error_info(x),
                            throw_function(current_function)),
                        throw_file(file)),
                    throw_line(line)));
        }
    }

}


#pragma warning(pop)
# 15 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\string" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }



inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: strtof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: strtold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: wcstof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: wcstold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


#pragma warning(push)
#pragma warning(disable: 4127)
template<class _Elem,
 class _UTy> inline
 _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
 {
 static_assert(is_unsigned<_UTy>::value, "_UTy must be unsigned");




 if (sizeof(_UTy) > 4)
  {
  while (_UVal > 0xFFFFFFFFU)
   {
   auto _UVal_chunk = static_cast<_Uint32t>(_UVal % 1000000000);
   _UVal /= 1000000000;

   for (int _Idx = 0; _Idx != 9; ++_Idx)
    {
    *--_RNext = '0' + _UVal_chunk % 10;
    _UVal_chunk /= 10;
    }
   }
  }

 auto _UVal_trunc = static_cast<_Uint32t>(_UVal);


 do
  {
  *--_RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while (_UVal_trunc != 0);
 return (_RNext);
 }
#pragma warning(pop)

template<class _Elem,
 class _Ty> inline
 basic_string<_Elem> _Integral_to_string(const _Ty _Val)
 {
 static_assert(is_integral<_Ty>::value, "_Ty must be integral");
 using _UTy = make_unsigned_t<_Ty>;
 _Elem _Buff[21];
 _Elem* const _Buff_end = ::std:: end(_Buff);
 _Elem* _RNext = _Buff_end;
 auto _UVal = static_cast<_UTy>(_Val);
 if (_Val < 0)
  {
  _RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
  *--_RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff(_RNext, _UVal);

 return (basic_string<_Elem>(_RNext, _Buff_end));
 }

template<class _Ty> inline
 string _Floating_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scprintf(_Fmt, _Val);
 string _Str(_Len + 1, '\0');
 :: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }

template<class _Ty> inline
 wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scwprintf(_Fmt, _Val);
 wstring _Str(_Len + 1, L'\0');
 :: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }




inline string to_string(int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(float _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(double _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(long double _Val)
 {
 return (_Floating_to_string("%Lf", _Val));
 }


inline wstring to_wstring(int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(double _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(long double _Val)
 {
 return (_Floating_to_wstring(L"%Lf", _Val));
 }







inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
 {
 return (string(_Str, _Len));
 }

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
 {
 return (wstring(_Str, _Len));
 }

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
 {
 return (u16string(_Str, _Len));
 }

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
 {
 return (u32string(_Str, _Len));
 }
}
}





}


#pragma warning(pop)
#pragma pack(pop)
# 20 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/system/system_error.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/system/system_error.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cassert" 1 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
#pragma pack(pop)
# 4 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cassert" 2 3
# 13 "D:\\my_project\\boost_1_65_1\\boost/system/system_error.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/system/api_config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp" 2
# 66 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/auto_link.hpp" 1
# 66 "D:\\my_project\\boost_1_65_1\\boost/system/config.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 193 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/limits.hpp" 1
# 193 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 2




namespace boost
{
# 211 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
     typedef signed char int8_t;
     typedef signed char int_least8_t;
     typedef signed char int_fast8_t;
     typedef unsigned char uint8_t;
     typedef unsigned char uint_least8_t;
     typedef unsigned char uint_fast8_t;
# 234 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
     typedef short int16_t;
     typedef short int_least16_t;
     typedef short int_fast16_t;
     typedef unsigned short uint16_t;
     typedef unsigned short uint_least16_t;
     typedef unsigned short uint_fast16_t;
# 263 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
     typedef int int32_t;
     typedef int int_least32_t;
     typedef int int_fast32_t;
     typedef unsigned int uint32_t;
     typedef unsigned int uint_least32_t;
     typedef unsigned int uint_fast32_t;
# 309 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
     typedef ::boost::long_long_type intmax_t;
     typedef ::boost::ulong_long_type uintmax_t;
     typedef ::boost::long_long_type int64_t;
     typedef ::boost::long_long_type int_least64_t;
     typedef ::boost::long_long_type int_fast64_t;
     typedef ::boost::ulong_long_type uint64_t;
     typedef ::boost::ulong_long_type uint_least64_t;
     typedef ::boost::ulong_long_type uint_fast64_t;
# 359 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
}
# 379 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp"
namespace boost {
    using ::intptr_t;
    using ::uintptr_t;
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/noncopyable.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/noncopyable.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/noncopyable.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/core/noncopyable.hpp"
namespace boost {






namespace noncopyable_
{
  class noncopyable
  {
  protected:




      noncopyable() {}
      ~noncopyable() {}





  private:
      noncopyable( const noncopyable& );
      noncopyable& operator=( const noncopyable& );

  };
}

typedef noncopyable_::noncopyable noncopyable;

}
# 15 "D:\\my_project\\boost_1_65_1\\boost/noncopyable.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/utility/enable_if.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/utility/enable_if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/enable_if.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/core/enable_if.hpp"
namespace boost
{
  template<typename T, typename R=void>
  struct enable_if_has_type
  {
    typedef R type;
  };

  template <bool B, class T = void>
  struct enable_if_c {
    typedef T type;
  };

  template <class T>
  struct enable_if_c<false, T> {};

  template <class Cond, class T = void>
  struct enable_if : public enable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_enable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_enable_if_c<false, T> {};

  template <class Cond, class T>
  struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};


  template <bool B, class T = void>
  struct disable_if_c {
    typedef T type;
  };

  template <class T>
  struct disable_if_c<true, T> {};

  template <class Cond, class T = void>
  struct disable_if : public disable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_disable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_disable_if_c<true, T> {};

  template <class Cond, class T>
  struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};

}
# 15 "D:\\my_project\\boost_1_65_1\\boost/utility/enable_if.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2




# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\functional" 1 3





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4180 4244)





namespace std {
# 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 3
template<class _Ty = void>
 struct divides
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left / _Right);
  }
 };


template<class _Ty = void>
 struct modulus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left % _Right);
  }
 };


template<class _Ty = void>
 struct negate
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (-_Left);
  }
 };





template<class _Ty = void>
 struct not_equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left != _Right);
  }
 };


template<class _Ty = void>
 struct greater
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left > _Right);
  }
 };





template<class _Ty = void>
 struct greater_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left >= _Right);
  }
 };


template<class _Ty = void>
 struct less_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left <= _Right);
  }
 };


template<class _Ty = void>
 struct logical_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left && _Right);
  }
 };


template<class _Ty = void>
 struct logical_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left || _Right);
  }
 };


template<class _Ty = void>
 struct logical_not
 {
 typedef _Ty argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left) const
  {
  return (!_Left);
  }
 };


template<class _Ty = void>
 struct bit_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left & _Right);
  }
 };


template<class _Ty = void>
 struct bit_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left | _Right);
  }
 };


template<class _Ty = void>
 struct bit_xor
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left ^ _Right);
  }
 };


template<class _Ty = void>
 struct bit_not
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (~_Left);
  }
 };
# 240 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 3
template<>
 struct divides<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct modulus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct negate<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(-::std:: forward<_Ty>(_Left))
  {
  return (-::std:: forward<_Ty>(_Left));
  }
 };





template<>
 struct not_equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct greater<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right));
  }
 };

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<greater<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const greater<_FTy>&)
 {
 return {};
 }





template<>
 struct greater_equal<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct less_equal<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_and<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_or<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_not<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(!::std:: forward<_Ty>(_Left))
  {
  return (!::std:: forward<_Ty>(_Left));
  }
 };


template<>
 struct bit_and<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_or<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_xor<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_not<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(~::std:: forward<_Ty>(_Left))
  {
  return (~::std:: forward<_Ty>(_Left));
  }
 };


template<class _Fn1>
 class unary_negate
 {
public:
 typedef typename _Fn1::argument_type argument_type;
 typedef bool result_type;

 constexpr explicit unary_negate(const _Fn1& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const argument_type& _Left) const
  {
  return (!_Functor(_Left));
  }

private:
 _Fn1 _Functor;
 };


template<class _Fn1> inline
 constexpr unary_negate<_Fn1> not1(const _Fn1& _Func)
 {
 return (unary_negate<_Fn1>(_Func));
 }


template<class _Fn2>
 class binary_negate
 {
public:
 typedef typename _Fn2::first_argument_type first_argument_type;
 typedef typename _Fn2::second_argument_type second_argument_type;
 typedef bool result_type;

 constexpr explicit binary_negate(const _Fn2& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const first_argument_type& _Left,
  const second_argument_type& _Right) const
  {
  return (!_Functor(_Left, _Right));
  }

private:
 _Fn2 _Functor;
 };


template<class _Fn2> inline
 constexpr binary_negate<_Fn2> not2(const _Fn2& _Func)
 {
 return (binary_negate<_Fn2>(_Func));
 }



template<class _Fn2>
 class binder1st
  : public unary_function<typename _Fn2::second_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::second_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder1st(const _Fn2& _Func,
  const typename _Fn2::first_argument_type& _Left)
  : op(_Func), value(_Left)
  {
  }

 result_type operator()(const argument_type& _Right) const
  {
  return (op(value, _Right));
  }

 result_type operator()(argument_type& _Right) const
  {
  return (op(value, _Right));
  }

protected:
 _Fn2 op;
 typename _Fn2::first_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
 {
 typename _Fn2::first_argument_type _Val(_Left);
 return (binder1st<_Fn2>(_Func, _Val));
 }


template<class _Fn2>
 class binder2nd
  : public unary_function<typename _Fn2::first_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::first_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder2nd(const _Fn2& _Func,
  const typename _Fn2::second_argument_type& _Right)
  : op(_Func), value(_Right)
  {
  }

 result_type operator()(const argument_type& _Left) const
  {
  return (op(_Left, value));
  }

 result_type operator()(argument_type& _Left) const
  {
  return (op(_Left, value));
  }

protected:
 _Fn2 op;
 typename _Fn2::second_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
 {
 typename _Fn2::second_argument_type _Val(_Right);
 return (binder2nd<_Fn2>(_Func, _Val));
 }


template<class _Arg,
 class _Result,
 class _Fn = _Result (*)(_Arg)>
 class pointer_to_unary_function
  : public unary_function<_Arg, _Result>
 {
public:
 explicit pointer_to_unary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg _Left) const
  {
  return (_Pfun(_Left));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg1,
 class _Arg2,
 class _Result,
 class _Fn = _Result (*)(_Arg1, _Arg2)>
 class pointer_to_binary_function
  : public binary_function<_Arg1, _Arg2, _Result>
 {
public:
 explicit pointer_to_binary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg1 _Left, _Arg2 _Right) const
  {
  return (_Pfun(_Left, _Right));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>(_Left));
 }


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__stdcall *)(_Arg)>
   ptr_fun(_Result (__stdcall *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__stdcall *)(_Arg)>(_Left));
 }


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__fastcall *)(_Arg)>
   ptr_fun(_Result (__fastcall *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__fastcall *)(_Arg)>(_Left));
 }
# 698 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 3
template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
 }


template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result(__stdcall *)(_Arg1, _Arg2)>
   ptr_fun(_Result (__stdcall *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__stdcall *)(_Arg1, _Arg2)>(_Left));
 }


template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result(__fastcall *)(_Arg1, _Arg2)>
   ptr_fun(_Result (__fastcall *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__fastcall *)(_Arg1, _Arg2)>(_Left));
 }
# 749 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xfunctional" 3
template<class _Result,
 class _Ty>
 class mem_fun_t
  : public unary_function<_Ty *, _Result>
 {
public:
 explicit mem_fun_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_t
  : public binary_function<_Ty *, _Arg, _Result>
 {
public:
 explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_t
  : public unary_function<const _Ty *, _Result>
 {
public:
 explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_t
  : public binary_function<const _Ty *, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_t<_Result, _Ty>
  mem_fun(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_t<_Result, _Ty, _Arg>
  mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }


template<class _Result,
 class _Ty>
 class mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_ref_t<_Result, _Ty>
  mem_fun_ref(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\functional" 2 3



# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple" 3
#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
  : conjunction<
   is_constructible<_Dests, _Srcs>...,
   is_convertible<_Srcs, _Dests>...
  >::type
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val
  : _Tuple_implicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_implicit_t = enable_if_t<_Tuple_implicit_val<_Dest, _Srcs...>::value, int>;


template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
  : conjunction<
   is_constructible<_Dests, _Srcs>...,
   negation<conjunction<is_convertible<_Srcs, _Dests>...>>
  >::type
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val
  : _Tuple_explicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_explicit_t = enable_if_t<_Tuple_explicit_val<_Dest, _Srcs...>::value, int>;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_copy
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_copy<tuple<_This>, _Uty>
  : enable_if<!is_same<_This, _Uty>::value
   && !is_constructible<_This, const tuple<_Uty>&>::value
   && !is_convertible<const tuple<_Uty>&, _This>::value, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_copy_t = typename _Tuple_convert_copy<_Myt, _Other...>::type;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_move
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_move<tuple<_This>, _Uty>
  : enable_if<!is_same<_This, _Uty>::value
   && !is_constructible<_This, tuple<_Uty> >::value
   && !is_convertible<tuple<_Uty>, _This>::value, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_move_t = typename _Tuple_convert_move<_Myt, _Other...>::type;


template<class _Myt,
 class _This2,
 class... _Rest2>
 struct _Tuple_perfect_val
  : true_type
 {
 };

template<class _Myt,
 class _This2>
 struct _Tuple_perfect_val<_Myt, _This2>
  : negation<is_same<_Myt, remove_const_t<remove_reference_t<_This2>>>>::type
 {
 };


struct _Ignore
 {
 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

constexpr _Ignore ignore{};


struct _Tuple_alloc_t
 {
 };

constexpr _Tuple_alloc_t _Tuple_alloc{};


template<class _Ty>
 struct _Tuple_val
 {
 constexpr _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  constexpr _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Other>
  _Tuple_val& operator=(_Other&& _Right)
  {
  _Val = ::std:: forward<_Other>(_Right);
  return (*this);
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc&,
   typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && !is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }

 _Ty _Val;
 };


struct _Exact_args_t
 {
 };

struct _Unpack_tuple_t
 {
 };

struct _Alloc_exact_args_t
 {
 };

struct _Alloc_unpack_tuple_t
 {
 };

template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 typedef tuple<> _Myt;

 constexpr tuple() noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 constexpr tuple(const tuple&) noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const _Myt&) noexcept
  {
  }

 template<class _Tag,
  enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
  constexpr tuple(_Tag) noexcept
  {
  }

 template<class _Tag,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, const _Myt&) noexcept
  {
  }

 template<class _Tag,
  class _Alloc,
  enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
  tuple(_Tag, const _Alloc&) noexcept
  {
  }

 void swap(_Myt&) noexcept
  {
  }

 constexpr bool _Equals(const _Myt&) const noexcept
  {
  return (true);
  }

 constexpr bool _Less(const _Myt&) const noexcept
  {
  return (false);
  }
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static constexpr size_t _Mysize = 1 + sizeof...(_Rest);

 template<class _Tag,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
  constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }
# 326 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple" 3
 template<class _Tag,
  class... _Other,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, const tuple<_Other...>& _Right)
  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Tag,
  class... _Other,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, tuple<_Other...>&& _Right)
  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class _Tag,
  class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, _Tuple_alloc, ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0> inline
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>);

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
   make_integer_sequence<size_t, tuple_size<remove_reference_t<_Tpl>>::value>{})
  {
  }

 template<class _This2 = _This,
  class = enable_if_t<conjunction<is_default_constructible<_This2>,
          is_default_constructible<_Rest>...>::value> >
  constexpr tuple()
  : _Mybase(), _Myfirst()
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr tuple(const tuple<_Other...>& _Right)


  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(const tuple<_Other...>& _Right)


  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
  {
  }

 template<class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr tuple(tuple<_Other...>&& _Right)


  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(tuple<_Other...>&& _Right)


  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
   (_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  constexpr bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  constexpr bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc,
  class _This2 = _This,
  class = enable_if_t<conjunction<is_default_constructible<_This2>,
          is_default_constructible<_Rest>...>::value> >
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al), _Myfirst(_Al, _Tuple_alloc)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 tuple(const _Myt&) = default;
 tuple(_Myt&&) = default;

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr tuple(const pair<_First, _Second>& _Right)


  : _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr explicit tuple(const pair<_First, _Second>& _Right)


  : _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  _Get_rest()._Myfirst._Val = _Right.second;
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  constexpr tuple(pair<_First, _Second>&& _Right)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  constexpr explicit tuple(pair<_First, _Second>&& _Right)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(is_nothrow_move_assignable<_This>::value && is_nothrow_move_assignable<_Mybase>::value)

  {
  _Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  _Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
  return (*this);
  }

 _Mybase& _Get_rest() noexcept
  {
  return (*this);
  }

 constexpr const _Mybase& _Get_rest() const noexcept
  {
  return (*this);
  }

 _Tuple_val<_This> _Myfirst;

 void swap(tuple& _Right)
  noexcept((conjunction<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>::value))

  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap(_Right._Get_rest());
  }
 };




template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator==(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator!=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types,
 class = enable_if_t<conjunction<_Is_swappable<_Types>...>::value>> inline
 void swap(tuple<_Types...>& _Left,
  tuple<_Types...>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 return (_Left.swap(_Right));
 }



template<class _Ty,
 class _Tuple>
 struct _Tuple_element;

template<class _This,
 class... _Rest>
 struct _Tuple_element<_This, tuple<_This, _Rest...> >
 {
 typedef int _Check_type;
 static_assert(is_void<typename _Tuple_element<_This,
  tuple<_Rest...> >::_Check_type>::value,
  "duplicate type T in get<T>(tuple)");

 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<class _Ty,
 class _This,
 class... _Rest>
 struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
  : public _Tuple_element<_Ty, tuple<_Rest...> >
 {
 };

template<class _Ty>
 struct _Tuple_element<_Ty, tuple<> >
 {
 typedef void _Check_type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };


template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&
  get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr const typename tuple_element<_Index, tuple<_Types...> >::type&
  get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&&
  get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
  _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class _Ty,
 class... _Types> inline
 constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
 }
# 950 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple" 3
template<class _This,
 class... _Rest>
 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int>> inline
  tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
  {
  }


template<class... _Types> inline
 constexpr tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types> inline
 constexpr tuple<_Types&...>
  tie(_Types&... _Args) noexcept
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types> inline
 constexpr tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) noexcept
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Seq_type1,
 class _Seq_type2>
 struct _Cat_sequences;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_sequences<integer_sequence<size_t, _Indexes1...>,
  integer_sequence<size_t, _Indexes2...> >
 {
 typedef integer_sequence<size_t, _Indexes1..., _Indexes2...> type;
 };


template<class _Ty,
 size_t _Size>
 class array;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;


template<class _Ty,
 class... _For_array>
 struct _View_as_tuple
 {
 static_assert(_Always_false<_Ty>::value,
  "Unsupported tuple_cat arguments.");
 };

template<class... _Types>
 struct _View_as_tuple<tuple<_Types...> >
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty1,
 class _Ty2>
 struct _View_as_tuple<pair<_Ty1, _Ty2> >
 {
 typedef tuple<_Ty1, _Ty2> type;
 };

template<class _Ty,
 class... _Types>
 struct _View_as_tuple<array<_Ty, 0>, _Types...>
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty,
 size_t _Size,
 class... _Types>
 struct _View_as_tuple<array<_Ty, _Size>, _Types...>
  : _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
 {
 };


template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_seq;
 typedef _Ix_arg _Ix_arg_seq;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
  integer_sequence<size_t, _Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_sequences<_Kx_arg,
    make_integer_sequence<size_t, sizeof...(_Types2)> >::type,
   integer_sequence<size_t, _Ix...,
    _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, integer_sequence<size_t>,
    integer_sequence<size_t>, 0,
   typename _View_as_tuple<typename decay<_Tuples>::type>::type...>
 {
 };

template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty> inline
 constexpr _Ret _Tuple_cat(integer_sequence<size_t, _Kx...>,
  integer_sequence<size_t, _Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }

template<class _Ret,
 class _Ty> inline
 constexpr _Ret _Tuple_cat(integer_sequence<size_t>,
  integer_sequence<size_t>, _Ty&&)
 {
 return (_Ret());
 }

template<class... _Tuples> inline
 constexpr typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }



template<class _Tpl,
 class _Fx,
 size_t... _Indices> inline
 void _For_each_tuple_element_impl(_Tpl&& _Tuple,
  _Fx _Func, integer_sequence<size_t, _Indices...>)
 {
 int _Ignored[] = { (static_cast<void>(_Func(
  ::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
  )), 0)... };
 (void)_Ignored;
 }

template<class _Tpl,
 class _Fx> inline
 void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
 {
 _For_each_tuple_element_impl(
  ::std:: forward<_Tpl>(_Tuple),
  _Func,
  make_integer_sequence<size_t,
   tuple_size<remove_reference_t<_Tpl>>::value>()
  );
 }



template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  (void) _Val1;
  (void) _Val2;
  }


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)
  : pair(_Val1, _Val2,
   make_integer_sequence<size_t, sizeof...(_Types1)>(),
   make_integer_sequence<size_t, sizeof...(_Types2)>())
  {
  }

}

namespace std {

template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };

}


namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}
}



#pragma warning(pop)
#pragma pack(pop)
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\functional" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Memptr>
 class _Mem_fn
  : public _Weak_types<_Memptr>::type
 {
private:
 _Memptr _Pm;

public:
 explicit _Mem_fn(_Memptr _Val) noexcept
  : _Pm(_Val)
  {
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Rx,
 class _Ty> inline
 _Mem_fn<_Rx _Ty::*> mem_fn(_Rx _Ty::* _Pm) noexcept
 {
 return (_Mem_fn<_Rx _Ty::*>(_Pm));
 }




class bad_function_call
 : public ::std:: exception
 {
public:
 bad_function_call() noexcept
  {
  }

 virtual const char * what() const noexcept
  {
  return ("bad function call");
  }
 };

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_function_call();


template<class _Fty>
 class function;

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg, true_type) noexcept
 {
 return (!!_Arg);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty&, false_type) noexcept
 {
 return (true);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg) noexcept
 {
 _Cat_base<is_member_pointer<_Ty>::value || (is_pointer<_Ty>::value
  && is_function<typename remove_pointer<_Ty>::type>::value)> _Testable;
 return (_Test_callable(_Arg, _Testable));
 }

template<class _Fty> inline
 bool _Test_callable(const function<_Fty>& _Arg) noexcept
 {
 return (!!_Arg);
 }


#pragma warning(push)
#pragma warning(disable: 4265)
template<class _Rx,
 class... _Types>
 class _Func_base
 {
public:
 typedef _Func_base<_Rx, _Types...> _Myt;

 virtual _Myt *_Copy(void *) const = 0;
 virtual _Myt *_Move(void *) = 0;
 virtual _Rx _Do_call(_Types&&...) = 0;
 virtual const type_info& _Target_type() const noexcept = 0;
 virtual void _Delete_this(bool) noexcept = 0;

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Target_type() == _Info ? _Get() : 0);
  }

 _Func_base(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 _Func_base() = default;

 ~_Func_base() noexcept
  {
  }

private:
 virtual const void *_Get() const noexcept = 0;
 };
#pragma warning(pop)


const int _Num_ptrs = 6 + 16 / sizeof (void *);

const size_t _Space_size = (_Num_ptrs - 1) * sizeof (void *);

template<class _Impl>
 struct _Is_large
  : bool_constant<_Space_size < sizeof (_Impl)
   || !_Impl::_Nothrow_move::value>
 {
 };


#pragma warning(push)
#pragma warning(disable: 4265)
template<class _Callable,
 class _Alloc,
 class _Rx,
 class... _Types>
 class _Func_impl final
  : public _Func_base<_Rx, _Types...>
 {
public:
 typedef _Func_impl<_Callable, _Alloc, _Rx, _Types...> _Myt;
 typedef _Func_base<_Rx, _Types...> _Mybase;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef is_nothrow_move_constructible<_Callable> _Nothrow_move;

 template<class _Other1,
  class _Other2>
  _Func_impl(_Other1&& _Val, _Other2&& _Ax)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Other2>(_Ax), ::std:: forward<_Other1>(_Val))
  {
  }

 ~_Func_impl() noexcept
  {
  }

private:
 virtual _Mybase *_Copy(void *_Where) const
  {
  return (_Clone(_Where, _Is_large<_Myt>()));
  }

 template<class _Void>
  _Mybase *_Clone(_Void *, true_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, _Callee(), _Myax());
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  return (_Ptr);
  }

 template<class _Void>
  _Mybase *_Clone(_Void *_Where, false_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, _Callee(), _Myax());
  return (_Ptr);
  }

 virtual _Mybase *_Move(void *_Where)
  {
  _Myalty _Al(_Myax());
  _Myt *_Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, ::std:: move(_Callee()), ::std:: move(_Myax()));
  return (_Ptr);
  }

 virtual _Rx _Do_call(_Types&&... _Args)
  {
  return (_Invoke_ret(_Forced<_Rx>(), _Callee(),
   ::std:: forward<_Types>(_Args)...));
  }

 virtual const type_info& _Target_type() const noexcept
  {
  return (typeid(_Callable));
  }

 virtual const void *_Get() const noexcept
  {
  return (::std:: addressof(_Callee()));
  }

 virtual void _Delete_this(bool _Deallocate) noexcept
  {
  _Myalty _Al(_Myax());
  _Al.destroy(this);
  if (_Deallocate)
   _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Alloc, _Callable> _Mypair;

 _Alloc& _Myax() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alloc& _Myax() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Callable& _Callee() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Callable& _Callee() const noexcept
  {
  return (_Mypair._Get_second());
  }
 };
#pragma warning(pop)


template<class _Ret,
 class... _Types>
 class _Func_class
  : public _Arg_types<_Types...>
 {
public:
 typedef _Ret result_type;

 typedef _Func_class<_Ret, _Types...> _Myt;
 typedef _Func_base<_Ret, _Types...> _Ptrt;

 _Func_class() noexcept
  {
  _Set(0);
  }

 _Ret operator()(_Types... _Args) const
  {
  if (_Empty())
   _Xbad_function_call();
  return (_Getimpl()->_Do_call(::std:: forward<_Types>(_Args)...));
  }

 ~_Func_class() noexcept
  {
  _Tidy();
  }

protected:
 template<class _Fx>
  using _Result_of_invoking_t = result_of_t<_Fx(_Types...)>;

 template<class _Inv_res>
  using _Enable_if_returnable_t = enable_if_t<
   is_convertible<_Inv_res, _Ret>::value || is_void<_Ret>::value>;

 bool _Empty() const noexcept
  {
  return (_Getimpl() == 0);
  }

 void _Reset_copy(const _Myt& _Right)
  {
  if (_Right._Empty())
   ;
  else
   _Set(_Right._Getimpl()->_Copy(_Getspace()));
  }

 void _Reset_move(_Myt&& _Right)
  {
  if (_Right._Empty())
   ;
  else if (_Right._Local())
   {
   _Set(_Right._Getimpl()->_Move(_Getspace()));
   _Right._Tidy();
   }
  else
   {
   _Set(_Right._Getimpl());
   _Right._Set(0);
   }
  }

 template<class _Fx>
  void _Reset(_Fx&& _Val)
  {
  _Reset_alloc(::std:: forward<_Fx>(_Val), allocator<int>());
  }

 template<class _Fx,
  class _Alloc>
  void _Reset_alloc(_Fx&& _Val, const _Alloc& _Ax)
  {
  if (!_Test_callable(_Val))
   {
   return;
   }

  typedef typename decay<_Fx>::type _Decayed;
  typedef _Func_impl<_Decayed, _Alloc, _Ret, _Types...> _Myimpl;
  _Myimpl *_Ptr = 0;

  typedef _Wrap_alloc<_Alloc> _Alimpl0;
  typedef typename _Alimpl0::template rebind<_Myimpl>::other _Alimpl;
  _Alimpl _Al(_Ax);

  _Reset_impl(::std:: forward<_Fx>(_Val), _Ax,
   _Ptr, _Al, _Is_large<_Myimpl>());
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, true_type)
  {
  _Myimpl *_Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  _Set(_Ptr);
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, false_type)
  {
  _Myimpl *_Ptr = static_cast<_Myimpl *>(_Getspace());
  _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  _Set(_Ptr);
  }

 void _Tidy() noexcept
  {
  if (!_Empty())
   {
   _Getimpl()->_Delete_this(!_Local());
   _Set(0);
   }
  }

 void _Swap(_Myt& _Right) noexcept
  {
  if (!_Local() && !_Right._Local())
   {
   _Ptrt *_Temp = _Getimpl();
   _Set(_Right._Getimpl());
   _Right._Set(_Temp);
   }
  else
   {
   _Myt _Temp;
   _Temp._Reset_move(::std:: move(*this));
   _Reset_move(::std:: move(_Right));
   _Right._Reset_move(::std:: move(_Temp));
   }
  }

 const type_info& _Target_type() const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target_type() : typeid(void));
  }

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target(_Info) : 0);
  }

private:
 bool _Local() const noexcept
  {
  return (_Getimpl() == _Getspace());
  }

 union _Storage
  {
  max_align_t _Dummy1;
  char _Dummy2[_Space_size];
  _Ptrt *_Ptrs[_Num_ptrs];
  };

 _Storage _Mystorage;
 enum {_EEN_IMPL = _Num_ptrs - 1};
 _Ptrt *_Getimpl() const noexcept
  {
  return (_Mystorage._Ptrs[_Num_ptrs - 1]);
  }

 void _Set(_Ptrt *_Ptr) noexcept
  {
  _Mystorage._Ptrs[_Num_ptrs - 1] = _Ptr;
  }

 void *_Getspace() noexcept
  {
  return (&_Mystorage);
  }

 const void *_Getspace() const noexcept
  {
  return (&_Mystorage);
  }
 };


template<class _Tx>
 struct _Get_function_impl;
# 466 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\functional" 3
template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __fastcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __stdcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __vectorcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };



template<class _Fty>
 class function
  : public _Get_function_impl<_Fty>::type
 {
private:
 typedef typename _Get_function_impl<_Fty>::type _Mybase;

public:
 typedef function<_Fty> _Myt;

 function() noexcept
  {
  }

 function(nullptr_t) noexcept
  {
  }

 function(const _Myt& _Right)
  {
  this->_Reset_copy(_Right);
  }

 template<class _Fx,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<_Fx&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  function(_Fx _Func)
  {
  this->_Reset(::std:: move(_Func));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&, nullptr_t) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Ax, const _Myt& _Right)
  {
  this->_Reset_alloc(_Right, _Ax);
  }

 template<class _Fx,
  class _Alloc,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<_Fx&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  function(allocator_arg_t, const _Alloc& _Ax, _Fx _Func)
  {
  this->_Reset_alloc(::std:: move(_Func), _Ax);
  }

 ~function() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myt(_Right).swap(*this);
  return (*this);
  }

 function(_Myt&& _Right)
  {
  this->_Reset_move(::std:: move(_Right));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Al, _Myt&& _Right)
  {
  this->_Reset_alloc(::std:: move(_Right), _Al);
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   this->_Tidy();
   this->_Reset_move(::std:: move(_Right));
   }
  return (*this);
  }

 template<class _Fx,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<decay_t<_Fx>&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  _Myt& operator=(_Fx&& _Func)
  {
  _Myt(::std:: forward<_Fx>(_Func)).swap(*this);
  return (*this);
  }


 template<class _Fx,
  class _Alloc>
  void assign(_Fx&& _Func, const _Alloc& _Ax)
  {
  _Myt(allocator_arg, _Ax, ::std:: forward<_Fx>(_Func)).swap(*this);
  }


 _Myt& operator=(nullptr_t) noexcept
  {
  this->_Tidy();
  return (*this);
  }

 template<class _Fx>
  _Myt& operator=(reference_wrapper<_Fx> _Func) noexcept
  {
  this->_Tidy();
  this->_Reset(_Func);
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  this->_Swap(_Right);
  }

 explicit operator bool() const noexcept
  {
  return (!this->_Empty());
  }

 const type_info& target_type() const noexcept
  {
  return (this->_Target_type());
  }

 template<class _Fx>
  _Fx *target() noexcept
  {
  return (static_cast<_Fx *>(const_cast<void *>(
   this->_Target(typeid(_Fx)))));
  }

 template<class _Fx>
  const _Fx *target() const noexcept
  {
  return (static_cast<const _Fx *>(this->_Target(typeid(_Fx))));
  }
 };


template<class _Fty> inline
 void swap(function<_Fty>& _Left, function<_Fty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class _Fty> inline
 bool operator==(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator==(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator!=(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (static_cast<bool>(_Other));
 }

template<class _Fty> inline
 bool operator!=(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (static_cast<bool>(_Other));
 }



template<int _Nx>
 struct _Ph
 {
 };

template<class _Tx>
 struct is_placeholder
  : integral_constant<int, 0>
 {
 };

template<int _Nx>
 struct is_placeholder<_Ph<_Nx> >
  : integral_constant<int, _Nx>
 {
 };

template<class _Tx>
 struct is_placeholder<const _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<volatile _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<const volatile _Tx>
  : is_placeholder<_Tx>
 {
 };


template<class _Ty>
 constexpr int is_placeholder_v = is_placeholder<_Ty>::value;



template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder;


template<class _Tx>
 struct is_bind_expression
  : false_type
 {
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 struct is_bind_expression<_Binder<_Ret, _Fx, _Types...> >
  : true_type
 {
 };

template<class _Tx>
 struct is_bind_expression<const _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<const volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };


template<class _Ty>
 constexpr bool is_bind_expression_v = is_bind_expression<_Ty>::value;



template<class _Cv_TiD,
 bool = _Unrefwrap<_Cv_TiD>::_Is_refwrap,
 bool = is_bind_expression<_Cv_TiD>::value,
 int = is_placeholder<_Cv_TiD>::value>
 struct _Select_fixer;

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, true, false, 0>
 {
 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&&)
  -> typename _Cv_TiD::type&
  {
  return (_Tid.get());
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, true, 0>
 {
 template<class _Untuple,
  size_t... _Jx>
  static auto _Apply(_Cv_TiD& _Tid, _Untuple&& _Ut,
   integer_sequence<size_t, _Jx...>)
  -> decltype(_Tid(::std:: get<_Jx>(::std:: move(_Ut))...))
  {
  return (_Tid(::std:: get<_Jx>(::std:: move(_Ut))...));
  }

 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut)
  -> decltype(_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()))
  {
  return (_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()));
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, false, 0>
 {
 template<class _Untuple>
  static _Cv_TiD& _Fix(_Cv_TiD& _Tid, _Untuple&&)
  {
  return (_Tid);
  }
 };

template<class _Cv_TiD,
 int _Jx>
 struct _Select_fixer<_Cv_TiD, false, false, _Jx>
 {
 static_assert(_Jx > 0, "invalid is_placeholder value");

 template<class _Untuple>
  static auto _Fix(_Cv_TiD&, _Untuple&& _Ut)
  -> decltype(::std:: get<_Jx - 1>(::std:: move(_Ut)))
  {
  return (::std:: get<_Jx - 1>(::std:: move(_Ut)));
  }
 };

template<class _Cv_TiD,
 class _Untuple> inline
 auto _Fix_arg(_Cv_TiD& _Tid, _Untuple&& _Ut)
 -> decltype(_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)))
 {
 return (_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)));
 }


template<class _Ret,
 size_t... _Ix,
 class _Cv_FD,
 class _Cv_tuple_TiD,
 class _Untuple> inline
 auto _Call_binder(_Forced<_Ret> _Fr, integer_sequence<size_t, _Ix...>,
  _Cv_FD& _Obj, _Cv_tuple_TiD& _Tpl, _Untuple&& _Ut)
 -> decltype(_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...))
 {
 (void) _Tpl;
 (void) _Ut;
 return (_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...));
 }


template<class _Ret>
 struct _Forced_result_type
 {
 typedef _Ret result_type;
 };

template<class _Ret,
 class _Fx>
 struct _Binder_result_type
 {
 typedef typename decay<_Fx>::type _Decayed;

 typedef typename _Weak_types<_Decayed>::type _All_weak_types;

 typedef typename _If<is_same<_Ret, _Unforced>::value,
  _Weak_result_type<_All_weak_types>,
  _Forced_result_type<_Ret> >::type type;
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder
  : public _Binder_result_type<_Ret, _Fx>::type
 {
private:
 typedef make_integer_sequence<size_t, sizeof...(_Types)> _Seq;
 typedef typename decay<_Fx>::type _First;
 typedef tuple<typename decay<_Types>::type...> _Second;

 _Compressed_pair<_First, _Second> _Mypair;

public:
 explicit _Binder(_Fx&& _Func, _Types&&... _Args)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...)
  {
  }
# 881 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\functional" 3
template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); } template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) const -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); }

 };


template<class _Fx,
 class... _Types> inline
 _Binder<_Unforced, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Unforced, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


template<class _Ret,
 class _Fx,
 class... _Types> inline
 _Binder<_Ret, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Ret, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


  namespace placeholders {
constexpr _Ph<1> _1{};
constexpr _Ph<2> _2{};
constexpr _Ph<3> _3{};
constexpr _Ph<4> _4{};
constexpr _Ph<5> _5{};
constexpr _Ph<6> _6{};
constexpr _Ph<7> _7{};
constexpr _Ph<8> _8{};
constexpr _Ph<9> _9{};
constexpr _Ph<10> _10{};
constexpr _Ph<11> _11{};
constexpr _Ph<12> _12{};
constexpr _Ph<13> _13{};
constexpr _Ph<14> _14{};
constexpr _Ph<15> _15{};
constexpr _Ph<16> _16{};
constexpr _Ph<17> _17{};
constexpr _Ph<18> _18{};
constexpr _Ph<19> _19{};
constexpr _Ph<20> _20{};
  }


namespace tr1 {
using ::std:: bad_function_call;
using ::std:: bind;
using ::std:: function;
using ::std:: is_bind_expression;
using ::std:: is_placeholder;
using ::std:: mem_fn;
using ::std:: swap;

namespace placeholders {
 using namespace ::std:: placeholders;
 }
}

}

namespace std {

template<class _Fty,
 class _Alloc>
 struct uses_allocator<function<_Fty>, _Alloc>
  : true_type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 22 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/cerrno.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2
# 35 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2






namespace boost
{
  namespace system
  {

    class error_code;
    class error_condition;




    template< class T >
    struct is_error_code_enum { static const bool value = false; };

    template< class T >
    struct is_error_condition_enum { static const bool value = false; };



    namespace errc
    {
      enum errc_t
      {
        success = 0,
        address_family_not_supported = 102,
        address_in_use = 100,
        address_not_available = 101,
        already_connected = 113,
        argument_list_too_long = 7,
        argument_out_of_domain = 33,
        bad_address = 14,
        bad_file_descriptor = 9,
        bad_message = 104,
        broken_pipe = 32,
        connection_aborted = 106,
        connection_already_in_progress = 103,
        connection_refused = 107,
        connection_reset = 108,
        cross_device_link = 18,
        destination_address_required = 109,
        device_or_resource_busy = 16,
        directory_not_empty = 41,
        executable_format_error = 8,
        file_exists = 17,
        file_too_large = 27,
        filename_too_long = 38,
        function_not_supported = 40,
        host_unreachable = 110,
        identifier_removed = 111,
        illegal_byte_sequence = 42,
        inappropriate_io_control_operation = 25,
        interrupted = 4,
        invalid_argument = 22,
        invalid_seek = 29,
        io_error = 5,
        is_a_directory = 21,
        message_size = 115,
        network_down = 116,
        network_reset = 117,
        network_unreachable = 118,
        no_buffer_space = 119,
        no_child_process = 10,
        no_link = 121,
        no_lock_available = 39,
        no_message_available = 120,
        no_message = 122,
        no_protocol_option = 123,
        no_space_on_device = 28,
        no_stream_resources = 124,
        no_such_device_or_address = 6,
        no_such_device = 19,
        no_such_file_or_directory = 2,
        no_such_process = 3,
        not_a_directory = 20,
        not_a_socket = 128,
        not_a_stream = 125,
        not_connected = 126,
        not_enough_memory = 12,
        not_supported = 129,
        operation_canceled = 105,
        operation_in_progress = 112,
        operation_not_permitted = 1,
        operation_not_supported = 130,
        operation_would_block = 140,
        owner_dead = 133,
        permission_denied = 13,
        protocol_error = 134,
        protocol_not_supported = 135,
        read_only_file_system = 30,
        resource_deadlock_would_occur = 36,
        resource_unavailable_try_again = 11,
        result_out_of_range = 34,
        state_not_recoverable = 127,
        stream_timeout = 137,
        text_file_busy = 139,
        timed_out = 138,
        too_many_files_open_in_system = 23,
        too_many_files_open = 24,
        too_many_links = 31,
        too_many_symbolic_link_levels = 114,
        value_too_large = 132,
        wrong_protocol_type = 136
      };

    }


    namespace posix = errc;
    namespace posix_error = errc;


    template<> struct is_error_condition_enum<errc::errc_t>
      { static const bool value = true; };
# 188 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
    class error_category;







                      const error_category & system_category() ;
                      const error_category & generic_category() ;




    inline const error_category & get_system_category() { return system_category(); }
    inline const error_category & get_generic_category() { return generic_category(); }
    inline const error_category & get_posix_category() { return generic_category(); }
    static const error_category & posix_category
      = generic_category();
    static const error_category & errno_ecat
      = generic_category();
    static const error_category & native_ecat
      = system_category();




    class error_category : public noncopyable
    {


    private:

      class std_category: public std::error_category
      {
      private:

        boost::system::error_category const * pc_;

      public:

        explicit std_category( boost::system::error_category const * pc ): pc_( pc )
        {
        }

        virtual const char * name() const
        {
          return pc_->name();
        }

        virtual std::string message( int ev ) const
        {
          return pc_->message( ev );
        }

        virtual std::error_condition default_error_condition( int ev ) const
                        ;
        virtual bool equivalent( int code, const std::error_condition & condition ) const
                        ;
        virtual bool equivalent( const std::error_code & code, int condition ) const
                        ;
      };

      std_category std_cat_;

    public:

      error_category() : std_cat_( this ) {}

      operator std::error_category const & () const
      {



        return std_cat_;
      }
# 310 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
    public:
      virtual ~error_category(){}

      virtual const char * name() const = 0;
      virtual std::string message( int ev ) const = 0;
      inline virtual error_condition default_error_condition( int ev ) const
                             ;
      inline virtual bool equivalent( int code,
                                           const error_condition & condition ) const
                             ;
      inline virtual bool equivalent( const error_code & code,
                                           int condition ) const ;

      bool operator==(const error_category & rhs) const
        { return this == &rhs; }
      bool operator!=(const error_category & rhs) const
        { return this != &rhs; }
      bool operator<( const error_category & rhs ) const
        { return std::less<const error_category*>()( this, &rhs ); }
    };





    class error_condition
    {
    public:


      error_condition() : m_val(0), m_cat(&generic_category()) {}
      error_condition( int val, const error_category & cat )
        : m_val(val), m_cat(&cat) {}

      template <class ErrorConditionEnum>
        error_condition(ErrorConditionEnum e,
          typename boost::enable_if<is_error_condition_enum<ErrorConditionEnum> >::type*
            = 0)
      {
        *this = make_error_condition(e);
      }



      void assign( int val, const error_category & cat )
      {
        m_val = val;
        m_cat = &cat;
      }

      template<typename ErrorConditionEnum>
        typename boost::enable_if<is_error_condition_enum<ErrorConditionEnum>,
          error_condition>::type &
          operator=( ErrorConditionEnum val )
      {
        *this = make_error_condition(val);
        return *this;
      }

      void clear()
      {
        m_val = 0;
        m_cat = &generic_category();
      }


      int value() const { return m_val; }
      const error_category & category() const { return *m_cat; }
      std::string message() const { return m_cat->message(value()); }

      typedef void (*unspecified_bool_type)();
      static void unspecified_bool_true() {}

      operator unspecified_bool_type() const
      {
        return m_val == 0 ? 0 : unspecified_bool_true;
      }

      bool operator!() const
      {
        return m_val == 0;
      }




      inline friend bool operator==( const error_condition & lhs,
                                     const error_condition & rhs )
      {
        return lhs.m_cat == rhs.m_cat && lhs.m_val == rhs.m_val;
      }

      inline friend bool operator<( const error_condition & lhs,
                                    const error_condition & rhs )


      {
        return lhs.m_cat < rhs.m_cat
          || (lhs.m_cat == rhs.m_cat && lhs.m_val < rhs.m_val);
      }



      operator std::error_condition () const
      {
        return std::error_condition( value(), category() );
      }



    private:
      int m_val;
      const error_category * m_cat;

    };
# 434 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
    class error_code
    {
    public:


      error_code() : m_val(0), m_cat(&system_category()) {}
      error_code( int val, const error_category & cat )
        : m_val(val), m_cat(&cat) {}

      template <class ErrorCodeEnum>
        error_code(ErrorCodeEnum e,
          typename boost::enable_if<is_error_code_enum<ErrorCodeEnum> >::type* = 0)

      {
        *this = make_error_code(e);
      }


      void assign( int val, const error_category & cat )
      {
        m_val = val;
        m_cat = &cat;
      }

      template<typename ErrorCodeEnum>
        typename boost::enable_if<is_error_code_enum<ErrorCodeEnum>, error_code>::type &
          operator=( ErrorCodeEnum val )
      {
        *this = make_error_code(val);
        return *this;
      }

      void clear()
      {
        m_val = 0;
        m_cat = &system_category();
      }


      int value() const { return m_val; }
      const error_category & category() const { return *m_cat; }
      error_condition default_error_condition() const
        { return m_cat->default_error_condition(value()); }
      std::string message() const { return m_cat->message(value()); }

      typedef void (*unspecified_bool_type)();
      static void unspecified_bool_true() {}

      operator unspecified_bool_type() const
      {
        return m_val == 0 ? 0 : unspecified_bool_true;
      }

      bool operator!() const
      {
        return m_val == 0;
      }


      inline friend bool operator==( const error_code & lhs,
                                     const error_code & rhs )


      {
        return lhs.m_cat == rhs.m_cat && lhs.m_val == rhs.m_val;
      }

      inline friend bool operator<( const error_code & lhs,
                                    const error_code & rhs )


      {
        return lhs.m_cat < rhs.m_cat
          || (lhs.m_cat == rhs.m_cat && lhs.m_val < rhs.m_val);
      }



      operator std::error_code () const
      {
        return std::error_code( value(), category() );
      }



    private:
      int m_val;
      const error_category * m_cat;

    };



                      extern error_code throws;






  }

  namespace detail { inline system::error_code * throws() { return 0; } }
# 545 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp"
  inline system::error_code & throws()
    { return *detail::throws(); }

  namespace system
  {


    inline bool operator!=( const error_code & lhs,
                            const error_code & rhs )
    {
      return !(lhs == rhs);
    }

    inline bool operator!=( const error_condition & lhs,
                            const error_condition & rhs )
    {
      return !(lhs == rhs);
    }

    inline bool operator==( const error_code & code,
                            const error_condition & condition )
    {
      return code.category().equivalent( code.value(), condition )
        || condition.category().equivalent( code, condition.value() );
    }

    inline bool operator!=( const error_code & lhs,
                            const error_condition & rhs )
    {
      return !(lhs == rhs);
    }

    inline bool operator==( const error_condition & condition,
                            const error_code & code )
    {
      return condition.category().equivalent( code, condition.value() )
        || code.category().equivalent( code.value(), condition );
    }

    inline bool operator!=( const error_condition & lhs,
                            const error_code & rhs )
    {
      return !(lhs == rhs);
    }



    template <class charT, class traits>
    inline std::basic_ostream<charT,traits>&
      operator<< (std::basic_ostream<charT,traits>& os, error_code ec)
    {
      os << ec.category().name() << ':' << ec.value();
      return os;
    }

    inline std::size_t hash_value( const error_code & ec )
    {
      return static_cast<std::size_t>(ec.value())
        + reinterpret_cast<std::size_t>(&ec.category());
    }



    namespace errc
    {

      inline error_code make_error_code( errc_t e )
        { return error_code( e, generic_category() ); }


      inline error_condition make_error_condition( errc_t e )
        { return error_condition( e, generic_category() ); }
    }



    error_condition error_category::default_error_condition( int ev ) const

    {
      return error_condition( ev, *this );
    }

    bool error_category::equivalent( int code,
      const error_condition & condition ) const
    {
      return default_error_condition( code ) == condition;
    }

    bool error_category::equivalent( const error_code & code,
      int condition ) const
    {
      return *this == code.category() && code.value() == condition;
    }



    inline std::error_condition error_category::std_category::default_error_condition(
      int ev ) const
    {
      return pc_->default_error_condition( ev );
    }

    inline bool error_category::std_category::equivalent( int code,
      const std::error_condition & condition ) const
    {
      if( condition.category() == *this )
      {
        boost::system::error_condition bn( condition.value(), *pc_ );
        return pc_->equivalent( code, bn );
      }
      else if( condition.category() == std::generic_category()
        || condition.category() == boost::system::generic_category() )
      {
        boost::system::error_condition bn( condition.value(),
          boost::system::generic_category() );

        return pc_->equivalent( code, bn );
      }

      else if( std_category const* pc2 = dynamic_cast< std_category const* >(
        &condition.category() ) )
      {
        boost::system::error_condition bn( condition.value(), *pc2->pc_ );
        return pc_->equivalent( code, bn );
      }

      else
      {
        return default_error_condition( code ) == condition;
      }
    }

    inline bool error_category::std_category::equivalent( const std::error_code & code,
      int condition ) const
    {
      if( code.category() == *this )
      {
        boost::system::error_code bc( code.value(), *pc_ );
        return pc_->equivalent( bc, condition );
      }
      else if( code.category() == std::generic_category()
        || code.category() == boost::system::generic_category() )
      {
        boost::system::error_code bc( code.value(),
          boost::system::generic_category() );

        return pc_->equivalent( bc, condition );
      }

      else if( std_category const* pc2 = dynamic_cast< std_category const* >(
        &code.category() ) )
      {
        boost::system::error_code bc( code.value(), *pc2->pc_ );
        return pc_->equivalent( bc, condition );
      }

      else if( *pc_ == boost::system::generic_category() )
      {
        return std::generic_category().equivalent( code, condition );
      }
      else
      {
        return false;
      }
    }



  }
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 716 "D:\\my_project\\boost_1_65_1\\boost/system/error_code.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/system/system_error.hpp" 2


namespace boost
{
  namespace system
  {


    class system_error : public std::runtime_error


    {
    public:
      system_error( error_code ec )
          : std::runtime_error(""), m_error_code(ec) {}

      system_error( error_code ec, const std::string & what_arg )
          : std::runtime_error(what_arg), m_error_code(ec) {}

      system_error( error_code ec, const char* what_arg )
          : std::runtime_error(what_arg), m_error_code(ec) {}

      system_error( int ev, const error_category & ecat )
          : std::runtime_error(""), m_error_code(ev,ecat) {}

      system_error( int ev, const error_category & ecat,
        const std::string & what_arg )
          : std::runtime_error(what_arg), m_error_code(ev,ecat) {}

      system_error( int ev, const error_category & ecat,
        const char * what_arg )
          : std::runtime_error(what_arg), m_error_code(ev,ecat) {}

      virtual ~system_error() throw() {}

      const error_code & code() const throw() { return m_error_code; }
      const char * what() const throw();

    private:
      error_code m_error_code;
      mutable std::string m_what;
    };



    inline const char * system_error::what() const throw()

    {
      if ( m_what.empty() )
      {

        try

        {
          m_what = this->std::runtime_error::what();
          if ( !m_what.empty() ) m_what += ": ";
          m_what += m_error_code.message();
        }

        catch (...) { return std::runtime_error::what(); }

      }
      return m_what.c_str();
    }

  }
}
# 22 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp" 2


namespace boost
{


    class thread_interrupted
    {};


    class thread_exception:
        public system::system_error

    {
          typedef system::system_error base_type;
    public:
        thread_exception()
          : base_type(0,system::generic_category())
        {}

        thread_exception(int sys_error_code)
          : base_type(sys_error_code, system::generic_category())
        {}

        thread_exception( int ev, const char * what_arg )
        : base_type(system::error_code(ev, system::generic_category()), what_arg)
        {
        }
        thread_exception( int ev, const std::string & what_arg )
        : base_type(system::error_code(ev, system::generic_category()), what_arg)
        {
        }

        ~thread_exception() throw()
        {}


        int native_error() const
        {
            return code().value();
        }

    };

    class condition_error:
        public system::system_error

    {
          typedef system::system_error base_type;
    public:
          condition_error()
          : base_type(system::error_code(0, system::generic_category()), "Condition error")
          {}
          condition_error( int ev )
          : base_type(system::error_code(ev, system::generic_category()), "Condition error")
          {
          }
          condition_error( int ev, const char * what_arg )
          : base_type(system::error_code(ev, system::generic_category()), what_arg)
          {
          }
          condition_error( int ev, const std::string & what_arg )
          : base_type(system::error_code(ev, system::generic_category()), what_arg)
          {
          }
    };


    class lock_error:
        public thread_exception
    {
          typedef thread_exception base_type;
    public:
        lock_error()
        : base_type(0, "boost::lock_error")
        {}

        lock_error( int ev )
        : base_type(ev, "boost::lock_error")
        {
        }
        lock_error( int ev, const char * what_arg )
        : base_type(ev, what_arg)
        {
        }
        lock_error( int ev, const std::string & what_arg )
        : base_type(ev, what_arg)
        {
        }

        ~lock_error() throw()
        {}

    };

    class thread_resource_error:
        public thread_exception
    {
          typedef thread_exception base_type;
    public:
          thread_resource_error()
          : base_type(static_cast<int>(system::errc::resource_unavailable_try_again), "boost::thread_resource_error")
          {}

          thread_resource_error( int ev )
          : base_type(ev, "boost::thread_resource_error")
          {
          }
          thread_resource_error( int ev, const char * what_arg )
          : base_type(ev, what_arg)
          {
          }
          thread_resource_error( int ev, const std::string & what_arg )
          : base_type(ev, what_arg)
          {
          }


        ~thread_resource_error() throw()
        {}

    };

    class unsupported_thread_option:
        public thread_exception
    {
          typedef thread_exception base_type;
    public:
          unsupported_thread_option()
          : base_type(static_cast<int>(system::errc::invalid_argument), "boost::unsupported_thread_option")
          {}

          unsupported_thread_option( int ev )
          : base_type(ev, "boost::unsupported_thread_option")
          {
          }
          unsupported_thread_option( int ev, const char * what_arg )
          : base_type(ev, what_arg)
          {
          }
          unsupported_thread_option( int ev, const std::string & what_arg )
          : base_type(ev, what_arg)
          {
          }

    };

    class invalid_thread_argument:
        public thread_exception
    {
          typedef thread_exception base_type;
    public:
        invalid_thread_argument()
        : base_type(static_cast<int>(system::errc::invalid_argument), "boost::invalid_thread_argument")
        {}

        invalid_thread_argument( int ev )
        : base_type(ev, "boost::invalid_thread_argument")
        {
        }
        invalid_thread_argument( int ev, const char * what_arg )
        : base_type(ev, what_arg)
        {
        }
        invalid_thread_argument( int ev, const std::string & what_arg )
        : base_type(ev, what_arg)
        {
        }

    };

    class thread_permission_error:
        public thread_exception
    {
          typedef thread_exception base_type;
    public:
          thread_permission_error()
          : base_type(static_cast<int>(system::errc::permission_denied), "boost::thread_permission_error")
          {}

          thread_permission_error( int ev )
          : base_type(ev, "boost::thread_permission_error")
          {
          }
          thread_permission_error( int ev, const char * what_arg )
          : base_type(ev, what_arg)
          {
          }
          thread_permission_error( int ev, const std::string & what_arg )
          : base_type(ev, what_arg)
          {
          }

    };

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 223 "D:\\my_project\\boost_1_65_1\\boost/thread/exceptions.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/interlocked.hpp" 1
# 175 "D:\\my_project\\boost_1_65_1\\boost/detail/interlocked.hpp"
namespace boost
{

namespace detail
{

extern "C" __declspec(dllimport) long __stdcall InterlockedIncrement( long volatile * );
extern "C" __declspec(dllimport) long __stdcall InterlockedDecrement( long volatile * );
extern "C" __declspec(dllimport) long __stdcall InterlockedCompareExchange( long volatile *, long, long );
extern "C" __declspec(dllimport) long __stdcall InterlockedExchange( long volatile *, long );
extern "C" __declspec(dllimport) long __stdcall InterlockedExchangeAdd( long volatile *, long );






}

}
# 18 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/winapi/config.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp" 2






extern "C" void _ReadWriteBarrier(void);
#pragma intrinsic(_ReadWriteBarrier)
# 40 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp"
namespace boost
{
    namespace detail
    {
        inline long interlocked_read_acquire(long volatile* x)
        {
            long const res=*x;
            _ReadWriteBarrier();
            return res;
        }
        inline void* interlocked_read_acquire(void* volatile* x)
        {
            void* const res=*x;
            _ReadWriteBarrier();
            return res;
        }

        inline void interlocked_write_release(long volatile* x,long value)
        {
            _ReadWriteBarrier();
            *x=value;
        }
        inline void interlocked_write_release(void* volatile* x,void* value)
        {
            _ReadWriteBarrier();
            *x=value;
        }
    }
}
# 212 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 212 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/interlocked_read.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4244 28309 28285)

namespace std {

const int _ISORT_MAX = 32;

template<class _Iter1,
 class _Iter2,
 class _UIter1,
 class _UIter2> inline
 pair<_Iter1, _Iter2>
  _Rechecked_both(_Iter1 _Dest1, _Iter2 _Dest2, pair<_UIter1, _UIter2> _Src)
 {
 return (pair<_Iter1, _Iter2>(
  _Rechecked(_Dest1, _Src.first),
  _Rechecked(_Dest2, _Src.second)
  ));
 }


template<class _Iter1,
 class _Iter2> inline
 pair<decltype(_Unchecked(::std:: declval<_Iter1>())), decltype(_Unchecked(::std:: declval<_Iter2>()))>
  _Unchecked_both(pair<_Iter1, _Iter2> _Src)
 {
 return (pair<decltype(_Unchecked(::std:: declval<_Iter1>())), decltype(_Unchecked(::std:: declval<_Iter2>()))>(
  _Unchecked(_Src.first),
  _Unchecked(_Src.second)));
 }

template<class _Iter1,
 class _Iter2> inline
 pair<decltype(_Unchecked(::std:: declval<_Iter1>())), _Iter2>
  _Unchecked_first(pair<_Iter1, _Iter2> _Src)
 {
 return (pair<decltype(_Unchecked(::std:: declval<_Iter1>())), _Iter2>(
  _Unchecked(_Src.first),
  _Src.second));
 }

template<class _Iter1,
 class _Iter2> inline
 pair<_Iter1, decltype(_Unchecked(::std:: declval<_Iter2>()))>
  _Unchecked_second(pair<_Iter1, _Iter2> _Src)
 {
 return (pair<_Iter1, decltype(_Unchecked(::std:: declval<_Iter2>()))>(
  _Src.first,
  _Unchecked(_Src.second)));
 }



template<class _InIt,
 class _Fn1> inline
 void _For_each_unchecked(_InIt _First, _InIt _Last, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First)
  _Func(*_First);
 }

template<class _InIt,
 class _Fn1> inline
 _Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
 {
 _Debug_range_ptr(_First, _Last, _Func, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 76);
 _For_each_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 return (_Func);
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 96);
 return (_Rechecked(_First,
  _Find_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Adjacent_find_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    return (_Firstb);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 117);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 118);
 return (_Rechecked(_First,
  _Adjacent_find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: adjacent_find(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 149);
 return (_Count_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }

 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 auto _Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
   -> pair<_InIt1, decltype(_Unchecked_idl0(_First2))>
 {
 return (_Mismatch_unchecked(_First1, _Last1,
  _Unchecked_idl0(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, decltype(_Unchecked(::std:: declval<_InIt2>()))>
  _Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Mismatch_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 199);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 200);
 return (_Rechecked_both(_First1, _First2,
  _Mismatch_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>())));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "mismatch" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Mismatch_no_deprecate(_First1, _Last1, _First2, _Pred));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr,
 class = enable_if_t<!is_same<_InTy *, _Pr>::value>> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (_Unchecked_second(_Mismatch_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred)));
 }



template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize])
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2
  && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }

 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 281);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 282);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 283);
 return (_Rechecked_both(_First1, _First2,
  _Mismatch_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 bool _All_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 315);
 return (_All_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _Any_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (true);
 return (false);
 }

template<class _InIt,
 class _Pr> inline
 bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 334);
 return (_Any_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _None_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 353);
 return (_None_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_not_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 372);
 return (_Rechecked(_First,
  _Find_if_not_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 387);
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if_no_deprecate(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr& _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 400);
 return (_Rechecked(_Dest,
  _Copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "copy_if" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *copy_if(_InIt _First, _InIt _Last, _OutTy (&_Dest)[_OutSize],
  _Pr _Pred)
 {
 return (_Unchecked(
  _Copy_if_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy_unchecked(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
   _Debug_pointer(_Dest1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 442);
   *_Dest1++ = *_First;
   }
  else
   {
   _Debug_pointer(_Dest2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 447);
   *_Dest2++ = *_First;
   }

 return (pair<_OutIt1, _OutIt2>(_Dest1, _Dest2));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy_no_deprecate(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 462);
 return (_Rechecked_both(_Dest1, _Dest2,
  _Partition_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest1), _Unchecked_idl0(_Dest2), _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "partition_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest1)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest2)));
 return (_Partition_copy_no_deprecate(_First, _Last, _Dest1, _Dest2, _Pred));
 }


template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutTy1 *, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutIt2 _Dest2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "partition_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest2)));
 return (_Unchecked_first(
  _Partition_copy_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy1, _OutSize1>(_Dest1), _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutIt1, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutTy2 (&_Dest2)[_OutSize2], _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "partition_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest1)));
 return (_Unchecked_second(
  _Partition_copy_no_deprecate(_First, _Last,
   _Dest1, _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred)));
 }

template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutTy1 *, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutTy2 (&_Dest2)[_OutSize2],
   _Pr _Pred)
 {
 return (_Unchecked_both(
  _Partition_copy_no_deprecate(_First, _Last,
    _Array_iterator<_OutTy1, _OutSize1>(_Dest1),
    _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred)));
 }



template<class _InIt,
 class _Pr> inline
 bool _Is_partitioned_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 549);
 return (_Is_partitioned_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Pred));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition_point_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);
 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 582);
 return (_Rechecked(_First,
  _Partition_point_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {
 for (; ; ++_First1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (_Mid1 == _Last1)
    return (_Last1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _Iter_diff_t<_FwdIt1> _Count1 = _Last1 - _First1;
 _Iter_diff_t<_FwdIt2> _Count2 = _Last2 - _First2;

 for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }

 return (_Last1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 637);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 638);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 639);
 return (_Rechecked(_First1,
  _Search_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>())));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: search(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr& _Pred, forward_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   {
   _FwdIt _Mid = _First;

   for (_Diff _Count1 = _Count; ; )
    if (--_Count1 == 0)
     return (_First);
    else if (++_Mid == _Last)
     return (_Last);
    else if (!_Pred(*_Mid, _Val))
     {
     break;
     }

   _First = _Mid;
   }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr& _Pred, random_access_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 _FwdIt _Oldfirst = _First;
 for (_Diff _Inc = 0; _Count <= _Last - _Oldfirst; )
  {
  _First = _Oldfirst + _Inc;
  if (_Pred(*_First, _Val))
   {
   _Diff _Count1 = _Count;
   _FwdIt _Mid = _First;

   for (; _Oldfirst != _First && _Pred(_First[-1], _Val);
    --_First)
    --_Count1;

   if (_Count1 <= _Last - _Mid)
    for (; ; )
     {
     if (--_Count1 == 0)
      return (_First);
     else if (!_Pred(*++_Mid, _Val))
      {
      break;
      }
     }
   _Oldfirst = ++_Mid;
   _Inc = 0;
   }
  else
   {
   _Oldfirst = _First + 1;
   _Inc = _Count - 1;
   }
  }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 741);
 return (_Rechecked(_First,
  _Search_n_unchecked(_Unchecked(_First), _Unchecked(_Last), _Count, _Val,
   _Pred, _Iter_cat_t<_FwdIt>())));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val)
 {
 return (::std:: search_n(_First, _Last, _Count, _Val,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_end_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt1> _Count1 = ::std:: distance(_First1, _Last1);
 _Iter_diff_t<_FwdIt2> _Count2 = ::std:: distance(_First2, _Last2);
 _FwdIt1 _Ans = _Last1;

 if (0 < _Count2)
  {
  _Debug_pointer_if(_Count2 <= _Count1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 771);
  for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
   {
   _FwdIt1 _Mid1 = _First1;
   for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
    if (!_Pred(*_Mid1, *_Mid2))
     break;
    else if (++_Mid2 == _Last2)
     {
     _Ans = _First1;
     break;
     }
   }
  }

 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 795);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 796);
 return (_Rechecked(_First1,
  _Find_end_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_end(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_first_of_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1; ++_First1)
  for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
   if (_Pred(*_First1, *_Mid2))
    return (_First1);
 return (_First1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 832);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 833);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 834);
 return (_Rechecked(_First1,
  _Find_first_of_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_Dest)
  ::std:: iter_swap(_First1, _Dest);
 return (_Dest);
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  forward_iterator_tag, forward_iterator_tag)
 {
 return (_Rechecked(_Dest,
  _Swap_ranges_unchecked(_First1, _Last1, _Unchecked_idl0(_Dest))));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last1) - (_First1)));
 return (_Rechecked(_Dest,
  _Swap_ranges_unchecked(_First1, _Last1, _Unchecked(_Dest))));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "swap_ranges" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First1, _Last1, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 888);
 return (_Swap_ranges1(_Unchecked(_First1), _Unchecked(_Last1),
  _Dest, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }


template<class _FwdIt1,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: swap_ranges(_First1, _Last1,
  _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Func(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Func)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First, _Last, _Unchecked(_Dest), _Func)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 947);
 _Debug_pointer_if(_First != _Last, _Func, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 948);
 return (_Transform_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Func, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "transform" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First, _Last, _Dest, _Func));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Fn1> inline
 _OutTy *transform(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Fn1 _Func)
 {
 return (_Unchecked(
  _Transform_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2, ++_Dest)
  *_Dest = _Func(*_First1, *_First2);
 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First1, _Last1, _First2, _Unchecked_idl0(_Dest), _Func)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last1) - (_First1)));
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First1, _Last1, _First2, _Unchecked(_Dest), _Func)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  input_iterator_tag, input_iterator_tag)
 {
 return (_Transform_no_deprecate2(_First1, _Last1,
  _Unchecked_idl0(_First2), _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_First2) + ((_Last1) - (_First1)));
 return (_Transform_no_deprecate2(_First1, _Last1,
  _Unchecked(_First2), _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1049);
 _Debug_pointer_if(_First1 != _Last1, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1050);
 _Debug_pointer_if(_First1 != _Last1, _Func, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1051);
 return (_Transform_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "transform" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First1, _Last1, _First2, _Dest, _Func));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutIt _Dest, _Fn2 _Func)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "transform" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Dest, _Func));
 }

template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "transform" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Unchecked(
  _Transform_no_deprecate(_First1, _Last1,
   _First2, _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 return (_Unchecked(
  _Transform_no_deprecate(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2),
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }



template<class _FwdIt,
 class _Ty> inline
 void _Replace_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Oldval)
   *_First = _Newval;
 }

template<class _FwdIt,
 class _Ty> inline
 void replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1130);
 _Replace_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Oldval, _Newval);
 }


template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void _Replace_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_First = _Val;
 }

template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1151);
 _Replace_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Pred, _Val);
 }


template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = *_First == _Oldval ? _Newval : *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Replace_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest),
  _Oldval, _Newval)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Replace_copy_unchecked(_First, _Last, _Unchecked(_Dest),
  _Oldval, _Newval)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "replace_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1200);
 return (_Replace_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval,
  _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *replace_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Oldval, const _Ty& _Newval)
 {
 return (_Unchecked(
  ::std:: replace_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Oldval, _Newval)));
 }



template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Pred(*_First) ? _Val : *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Replace_copy_if_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Pred, _Val)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Replace_copy_if_unchecked(_First, _Last, _Unchecked(_Dest), _Pred, _Val)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1265);
 _Debug_pointer_if(_First != _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1266);
 return (_Replace_copy_if_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Val,
  _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "replace_copy_if" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Replace_copy_if_no_deprecate(_First, _Last, _Dest, _Pred, _Val));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr,
 class _Ty> inline
 _OutTy *replace_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred, const _Ty& _Val)
 {
 return (_Unchecked(
  _Replace_copy_if_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred, _Val)));
 }



template<class _FwdIt,
 class _Fn0> inline
 void _Generate_unchecked(_FwdIt _First, _FwdIt _Last, _Fn0& _Func)
 {
 for (; _First != _Last; ++_First)
  *_First = _Func();
 }

template<class _FwdIt,
 class _Fn0> inline
 void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
 _Debug_range_ptr(_First, _Last, _Func, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1311);
 _Generate_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 }


template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n_unchecked(_OutIt _Dest, _Diff _Count, _Fn0& _Func)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Func();
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 return (_Rechecked(_Dest,
  _Generate_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Func)));
 }


template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Fn0> inline
 _OutTy *generate_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, _Fn0 _Func)
 {
 _Debug_array_size2(_Dest, _Count, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1342);
 return (_Generate_n_unchecked(_Dest, _Count, _Func));
 }



template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (!(*_First == _Val))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1357);
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "remove_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1371);
 return (_Rechecked(_Dest,
  _Remove_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Val)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *remove_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Val)
 {
 return (_Unchecked(
  ::std:: remove_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Val)));
 }



template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1401);
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1414);
 return (_Rechecked(_Dest,
  _Remove_copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "remove_copy_if" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Remove_copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *remove_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Remove_copy_if_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _FwdIt,
 class _Ty> inline
 _FwdIt _Remove_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _First = _Find_unchecked(_First, _Last, _Val);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  for (++_First; _First != _Last; ++_First)
   if (!(*_First == _Val))
    *_Next++ = ::std:: move(*_First);
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Ty> inline
 _FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1465);
 return (_Rechecked(_First,
  _Remove_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Remove_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _First = _Find_if_unchecked(_First, _Last, _Pred);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  for (++_First; _First != _Last; ++_First)
  if (!_Pred(*_First))
   *_Next++ = ::std:: move(*_First);
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1491);
 return (_Rechecked(_First,
  _Remove_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Unique_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    {
    for (; ++_First != _Last; )
     if (!_Pred(*_Firstb, *_First))
      *++_Firstb = ::std:: move(*_First);
    return (++_Firstb);
    }

 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1518);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1519);
 return (_Rechecked(_First,
  _Unique_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: unique(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, input_iterator_tag)
 {
 if (_First != _Last)
  {
  _Iter_value_t<_InIt> _Val = *_First;

  for (*_Dest++ = _Val; ++_First != _Last; )
   if (!_Pred(_Val, *_First))
    {
    _Val = *_First;
    *_Dest++ = _Val;
    }
  }

 return (_Dest);
 }

template<class _FwdIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
  _OutIt _Dest, _Pr& _Pred, forward_iterator_tag)
 {
 if (_First != _Last)
  {
  _FwdIt _Firstb = _First;

  for (*_Dest++ = *_Firstb; ++_First != _Last; )
   if (!_Pred(*_Firstb, *_First))
    {
    _Firstb = _First;
    *_Dest++ = *_Firstb;
    }
  }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1580);
 _Debug_pointer_if(_First != _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1581);
 return (_Rechecked(_Dest,
  _Unique_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked_idl0(_Dest), _Pred, _Iter_cat_t<_InIt>())));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "unique_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Unique_copy_no_deprecate(_First, _Last, _Dest, _Pred));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Unique_copy_no_deprecate(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt,
 class _OutIt> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }



template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy_unchecked(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 for (; _First != _Last; ++_Dest)
  *_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  bidirectional_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Reverse_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Reverse_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "reverse_copy" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 _Debug_range_ptr(_First, _Last, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1670);
 return (_Reverse_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt>(), _Iter_cat_t<_OutIt>()));
 }


template<class _BidIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *reverse_copy(_BidIt _First, _BidIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: reverse_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }



template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
 _Dest = _Copy_unchecked(_Mid, _Last, _Dest);
 return (_Copy_unchecked(_First, _Mid, _Dest));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest, forward_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last) - (_First)));
 return (_Rechecked(_Dest,
  _Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked(_Dest))));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
 _Debug_range(_First, _Mid, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1722);
 _Debug_range(_Mid, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1723);
 return (_Rotate_copy1(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last), _Dest, _Iter_cat_t<_FwdIt>(), _Iter_cat_t<_OutIt>()));
 }


template<class _RanIt,
 class _Fn1> inline
 void _Random_shuffle_unchecked(_RanIt _First, _RanIt _Last, _Fn1& _Func)
 {
 if (_Last - _First < 2)
  return;

 _RanIt _Next = _First;
 for (_Iter_diff_t<_RanIt> _Index = 2; ++_Next != _Last; ++_Index)
  {
  _Iter_diff_t<_RanIt> _Off = _Func(_Index);


  if (_Off < 0 || _Index <= _Off)
   {
   _Debug_message(L"random value out of range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1744);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1745, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1745, 0); };
   }





  ::std:: iter_swap(_Next, _First + _Off);
  }
 }

template<class _RanIt,
 class _Fn1> inline
 void _Random_shuffle1(_RanIt _First, _RanIt _Last, _Fn1& _Func)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1760);
 _Random_shuffle_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 }

template<class _RanIt,
 class _Urng> inline
 void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
 {
 typedef typename iterator_traits<_RanIt>::difference_type _Diff;
 typedef typename remove_reference<_Urng>::type _Urng0;
 _Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
 _Random_shuffle1(_First, _Last, _Rng);
 }



template<class _RanIt,
 class _Fn1> inline
 void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
 {
 _Random_shuffle1(_First, _Last, _Func);
 }


struct _Rand_urng_from_func
 {
 typedef unsigned int result_type;

 static result_type (min)()
  {
  return (0);
  }

 static result_type (max)()
  {
  return (0x7fff);
  }

 result_type operator()()
  {
  return (:: rand());
  }
 };


template<class _RanIt> inline
 void random_shuffle(_RanIt _First, _RanIt _Last)
 {
 _Rand_urng_from_func _Func;
 ::std:: shuffle(_First, _Last, _Func);
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred,
  forward_iterator_tag)
 {
 while (_First != _Last && _Pred(*_First))
  ++_First;

 if (_First == _Last)
  return (_First);

 for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
  if (_Pred(*_Next))
   ::std:: iter_swap(_First++, _Next);

 return (_First);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred,
  bidirectional_iterator_tag)
 {
 for (; ; ++_First)
  {
  for (; _First != _Last && _Pred(*_First); ++_First)
   ;
  if (_First == _Last)
   break;

  for (; _First != --_Last && !_Pred(*_Last); )
   ;
  if (_First == _Last)
   break;

  ::std:: iter_swap(_First, _Last);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1859);
 return (_Rechecked(_First,
  _Partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Iter_cat_t<_FwdIt>())));
 }


template<class _BidIt,
 class _Diff,
 class _Ty> inline
 _BidIt _Buffered_rotate_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count1 == 0 || _Count2 == 0)
  {
  ::std:: advance(_First, _Count2);
  return (_First);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_First, _Mid, _Tempbuf._Init());
  _Move_unchecked(_Mid, _Last, _First);
  return (_Move_backward_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
   _Last));
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_Mid, _Last, _Tempbuf._Init());
  _Move_backward_unchecked(_First, _Mid, _Last);
  return (_Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First));
  }
 else
  {
  return (_Rotate_unchecked(_First, _Mid, _Last));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr& _Pred,
  _Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count == 0)
  return (_First);
 else if (_Count == 1)
  return (_Pred(*_First) ? _Last : _First);
 else if (_Count <= _Tempbuf._Maxlen())
  {
  _BidIt _Next = _First;
  for (_Tempbuf._Init(); _First != _Last; ++_First)
   if (_Pred(*_First))
    *_Next++ = ::std:: move(*_First);
   else
    *_Tempbuf++ = ::std:: move(*_First);

  _Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _Next);
  return (_Next);
  }
 else
  {
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count / 2);

  _BidIt _Left = _Stable_partition_unchecked1(_First, _Mid, _Pred,
   _Count / 2, _Tempbuf);
  _BidIt _Right = _Stable_partition_unchecked1(_Mid, _Last, _Pred,
   _Count - _Count / 2, _Tempbuf);

  _Diff _Count1 = ::std:: distance(_Left, _Mid);
  _Diff _Count2 = ::std:: distance(_Mid, _Right);

  return (_Buffered_rotate_unchecked(_Left, _Mid, _Right,
   _Count1, _Count2, _Tempbuf));
  }
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First == _Last)
  return (_First);
 _Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
 _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count);
 return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Count, _Tempbuf));
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1952);
 return (_Rechecked(_First,
  _Stable_partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }



template<class _RanIt,
 class _Pr> inline
 void _Debug_heap(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_RanIt _Root = _First; ++_First != _Last; ++_Root)
   {
   if (_Debug_lt_pred(_Pred, *_Root, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1966))
    _Debug_message(L"invalid heap", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1967);
   else if (++_First == _Last)
    break;
   else if (_Debug_lt_pred(_Pred, *_Root, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1970))
    _Debug_message(L"invalid heap", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1971);
   }
 }
# 1983 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm" 3
template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap_by_index(_RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty&& _Val, _Pr& _Pred)
 {
 for (_Diff _Idx = (_Hole - 1) / 2;
  _Top < _Hole && _Debug_lt_pred(_Pred, *(_First + _Idx), _Val, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 1991);
  _Idx = (_Hole - 1) / 2)
  {
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 *(_First + _Hole) = ::std:: move(_Val);
 }

template<class _RanIt,
 class _Pr> inline
 void _Push_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 typedef _Iter_diff_t<_RanIt> _Diff;
 _Diff _Count = _Last - _First;
 if (2 <= _Count)
  {
  _Iter_value_t<_RanIt> _Val = ::std:: move(*--_Last);
  _Push_heap_by_index(_First, --_Count, _Diff(0), ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2018);
 _Push_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void push_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: push_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_by_index(_RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty&& _Val, _Pr& _Pred)
 {

 const _Diff _Top = _Hole;
 _Diff _Idx = _Hole;



 const _Diff _Max_sequence_non_leaf = (_Bottom - 1) / 2;
 while (_Idx < _Max_sequence_non_leaf)
  {
  _Idx = 2 * _Idx + 2;
  if (_Debug_lt_pred(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2047))
   --_Idx;
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
  {
  *(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
  _Hole = _Bottom - 1;
  }

 _Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty&& _Val, _Pr& _Pred)
 {


 *_Dest = ::std:: move(*_First);
 _Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
  ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 if (2 <= _Last - _First)
  {
  --_Last;
  _Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
  _Pop_heap_hole_unchecked(_First, _Last, _Last,
   ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2092);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 _Pop_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void pop_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: pop_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_RanIt> _Bottom = _Last - _First;
 if (2 <= _Bottom)
  {
  for (_Iter_diff_t<_RanIt> _Hole = _Bottom / 2; 0 < _Hole; )
   {
   --_Hole;
   _Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
   _Pop_heap_hole_by_index(_First, _Hole, _Bottom,
    ::std:: move(_Val), _Pred);
   }
  }
 }

template<class _RanIt,
 class _Pr> inline
 void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2126);
 _Make_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void make_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: make_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 for (; 2 <= _Last - _First; --_Last)
  _Pop_heap_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2150);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2151);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 _Sort_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort_heap(_First, _Last, less<>());
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Lower_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid, _Val))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2196);
 return (_Rechecked(_First,
  _Lower_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: lower_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Upper_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (!_Pred(_Val, *_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2242);
 return (_Rechecked(_First,
  _Upper_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: upper_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Equal_range_unchecked(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Debug_lt_pred(_Pred, *_Mid, _Val, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2271))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else if (_Pred(_Val, *_Mid))
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = _Lower_bound_unchecked(_First, _Mid, _Val, _Pred);
   ::std:: advance(_First, _Count);
   _FwdIt _Last2 = _Upper_bound_unchecked(++_Mid, _First, _Val, _Pred);
   return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
   }
  }

 return (pair<_FwdIt, _FwdIt>(_First, _First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2297);
 return (_Rechecked_both(_First, _Last,
  _Equal_range_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val)
 {
 return (::std:: equal_range(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool _Binary_search_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _First = _Lower_bound_unchecked(_First, _Last, _Val, _Pred);
 return (_First != _Last && !_Pred(_Val, *_First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2329);
 return (_Binary_search_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Val, _Pred));
 }


template<class _FwdIt,
 class _Ty> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: binary_search(_First, _Last, _Val, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2354))
    {
    *_Dest++ = *_First2++;
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = *_First1++;
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Copy_unchecked(_First1, _Last1, _Dest);
 return (_Copy_unchecked(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, input_iterator_tag,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, random_access_iterator_tag,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 static_cast<void>((_Dest) + ((_Last1 - _First1) + (_Last2 - _First2)));
 return (_Rechecked(_Dest,
  _Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2407);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2408);
 _Debug_pointer_if(_First1 != _Last1 || _First2 != _Last2, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2409);
 return (_Merge_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "merge" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Merge_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Merge_no_deprecate(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _BidIt1,
 class _BidIt2,
 class _BidIt3,
 class _Pr> inline
 _BidIt3 _Buffered_merge_backward_unchecked(_BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr& _Pred,
  bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *--_Last2, *--_Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2483))
    {
    *--_Dest = ::std:: move(*_Last1);
    ++_Last2;
    if (_First1 == _Last1)
     break;
    }
   else
    {
    *--_Dest = ::std:: move(*_Last2);
    ++_Last1;
    if (_First2 == _Last2)
     break;
    }
   }

 _Dest = _Move_backward_unchecked(_First2, _Last2, _Dest);
 if (!_In_place)
  _Dest = _Move_backward_unchecked(_First1, _Last1, _Dest);
 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Buffered_merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2516))
    {
    *_Dest++ = ::std:: move(*_First2++);
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = ::std:: move(*_First1++);
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Move_unchecked(_First1, _Last1, _Dest);
 if (!_In_place)
  _Dest = _Move_unchecked(_First2, _Last2, _Dest);
 return (_Dest);
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 if (_Count1 == 0 || _Count2 == 0)
  ;
 else if (_Count1 + _Count2 == 2)
  {
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2548))
   ::std:: iter_swap(_First, _Mid);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_First, _Mid, _Tempbuf._Init());
  _Buffered_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
   _Mid, _Last, _First, _Pred, true);
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_Mid, _Last, _Tempbuf._Init());
  _Buffered_merge_backward_unchecked(_First, _Mid,
   _Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred, true);
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;
  if (_Count2 < _Count1)
   {
   _Count1n = _Count1 / 2;
   _Firstn = _First;
   ::std:: advance(_Firstn, _Count1n);
   _Lastn = _Lower_bound_unchecked(_Mid, _Last, *_Firstn, _Pred);
   _Count2n = ::std:: distance(_Mid, _Lastn);
   }
  else
   {
   _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   ::std:: advance(_Lastn, _Count2n);
   _Firstn = _Upper_bound_unchecked(_First, _Mid, *_Lastn, _Pred);
   _Count1n = ::std:: distance(_First, _Firstn);
   }
  _BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf);
  _Buffered_merge_unchecked(_First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf, _Pred);
  _Buffered_merge_unchecked(_Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void _Inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Mid && _Mid != _Last)
  {
  _Iter_diff_t<_BidIt> _Count1 = ::std:: distance(_First, _Mid);
  _Iter_diff_t<_BidIt> _Count2 = ::std:: distance(_Mid, _Last);
  _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
  _Buffered_merge_unchecked(_First, _Mid, _Last,
   _Count1, _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
 {
 _Debug_order(_First, _Mid, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2610);
 _Debug_order(_Mid, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2611);
 _Inplace_merge_unchecked(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
 }


template<class _BidIt> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {
 ::std:: inplace_merge(_First, _Mid, _Last, less<>());
 }


template<class _BidIt,
 class _Pr> inline
 void _Insertion_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_BidIt _Next = _First; ++_Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

   if (_Debug_lt_pred(_Pred, _Val, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2634))
    {
    _Move_backward_unchecked(_First, _Next, ++_Next1);
    *_First = ::std:: move(_Val);
    }
   else
    {
    for (_BidIt _First1 = _Next1;
     _Debug_lt_pred(_Pred, _Val, *--_First1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2642);
     _Next1 = _First1)
     *_Next1 = ::std:: move(*_First1);
    *_Next1 = ::std:: move(_Val);
    }
   }
 }

template<class _RanIt,
 class _Pr> inline
 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
 {
 if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2654))
  ::std:: iter_swap(_Mid, _First);
 if (_Debug_lt_pred(_Pred, *_Last, *_Mid, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2656))
  {
  ::std:: iter_swap(_Last, _Mid);
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2659))
   ::std:: iter_swap(_Mid, _First);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
 {
 if (40 < _Last - _First)
  {
  size_t _Step = (_Last - _First + 1) / 8;
  _Med3_unchecked(_First, _First + _Step, _First + 2 * _Step, _Pred);
  _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
  _Med3_unchecked(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
  _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
  }
 else
  _Med3_unchecked(_First, _Mid, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 pair<_RanIt, _RanIt>
  _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _RanIt _Mid = _First + (_Last - _First) / 2;
 _Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while (_First < _Pfirst
  && !_Debug_lt_pred(_Pred, *(_Pfirst - 1), *_Pfirst, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2691)
  && !_Pred(*_Pfirst, *(_Pfirst - 1)))
  --_Pfirst;
 while (_Plast < _Last
  && !_Debug_lt_pred(_Pred, *_Plast, *_Pfirst, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2695)
  && !_Pred(*_Pfirst, *_Plast))
  ++_Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (; ; )
  {
  for (; _Gfirst < _Last; ++_Gfirst)
   if (_Debug_lt_pred(_Pred, *_Pfirst, *_Gfirst, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2705))
    ;
   else if (_Pred(*_Gfirst, *_Pfirst))
    break;
   else if (_Plast++ != _Gfirst)
    ::std:: iter_swap(_Plast - 1, _Gfirst);
  for (; _First < _Glast; --_Glast)
   if (_Debug_lt_pred(_Pred, *(_Glast - 1), *_Pfirst, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2712))
    ;
   else if (_Pred(*_Pfirst, *(_Glast - 1)))
    break;
   else if (--_Pfirst != _Glast - 1)
    ::std:: iter_swap(_Pfirst, _Glast - 1);
  if (_Glast == _First && _Gfirst == _Last)
   return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  if (_Glast == _First)
   {
   if (_Plast != _Gfirst)
    ::std:: iter_swap(_Pfirst, _Plast);
   ++_Plast;
   ::std:: iter_swap(_Pfirst++, _Gfirst++);
   }
  else if (_Gfirst == _Last)
   {
   if (--_Glast != --_Pfirst)
    ::std:: iter_swap(_Glast, _Pfirst);
   ::std:: iter_swap(_Pfirst, --_Plast);
   }
  else
   ::std:: iter_swap(_Gfirst++, --_Glast);
  }
 }

template<class _RanIt,
 class _Diff,
 class _Pr> inline
 void _Sort_unchecked1(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr& _Pred)
 {
 _Diff _Count;
 while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
  {
  pair<_RanIt, _RanIt> _Mid =
   _Partition_by_median_guess_unchecked(_First, _Last, _Pred);
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if (_Mid.first - _First < _Last - _Mid.second)
   {
   _Sort_unchecked1(_First, _Mid.first, _Ideal, _Pred);
   _First = _Mid.second;
   }
  else
   {
   _Sort_unchecked1(_Mid.second, _Last, _Ideal, _Pred);
   _Last = _Mid.first;
   }
  }

 if (_ISORT_MAX < _Count)
  {
  _Make_heap_unchecked(_First, _Last, _Pred);
  _Sort_heap_unchecked(_First, _Last, _Pred);
  }
 else if (2 <= _Count)
  _Insertion_sort_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Sort_unchecked1(_First, _Last, _Last - _First, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2783);
 _Sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort(_First, _Last, less<>());
 }


template<class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr> inline
 void _Chunked_merge_unchecked(_BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr& _Pred)
 {
 for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);
  _BidIt _Mid2 = _Mid1;
  ::std:: advance(_Mid2, _Chunk);

  _Dest = _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
  _First = _Mid2;
  }

 if (_Count <= _Chunk)
  _Move_unchecked(_First, _Last, _Dest);
 else
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);

  _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_sort_unchecked(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 _BidIt _Mid = _First;
 for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
  {
  _BidIt _Midn = _Mid;
  ::std:: advance(_Midn, (int)_ISORT_MAX);

  _Insertion_sort_unchecked(_Mid, _Midn, _Pred);
  _Mid = _Midn;
  }
 _Insertion_sort_unchecked(_Mid, _Last, _Pred);

 for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
  {
  _Chunked_merge_unchecked(_First, _Last, _Tempbuf._Init(),
   _Chunk, _Count, _Pred);
  _Chunked_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First,
   _Chunk *= 2, _Count, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort_unchecked1(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 if (_Count <= _ISORT_MAX)
  _Insertion_sort_unchecked(_First, _Last, _Pred);
 else
  {
  _Diff _Count2 = (_Count + 1) / 2;
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Count2 <= _Tempbuf._Maxlen())
   {
   _Buffered_merge_sort_unchecked(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Buffered_merge_sort_unchecked(_Mid, _Last, _Count - _Count2,
    _Tempbuf, _Pred);
   }
  else
   {
   _Stable_sort_unchecked1(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Stable_sort_unchecked1(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
   }

  _Buffered_merge_unchecked(_First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void _Stable_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  {
  _Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
  _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf((_Count + 1) / 2);
  _Stable_sort_unchecked1(_First, _Last, _Count, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2899);
 _Stable_sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _BidIt> inline
 void stable_sort(_BidIt _First, _BidIt _Last)
 {
 ::std:: stable_sort(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Partial_sort_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  _Pr& _Pred)
 {
 if (_First == _Mid)
  return;
 _Make_heap_unchecked(_First, _Mid, _Pred);
 for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2920))
   {
   _Iter_value_t<_RanIt> _Val = ::std:: move(*_Next);
   _Pop_heap_hole_unchecked(_First, _Mid, _Next, ::std:: move(_Val), _Pred);
   }
 _Sort_heap_unchecked(_First, _Mid, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Mid, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2932);
 _Debug_range(_Mid, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2933);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2934);
 _Partial_sort_unchecked(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
 {
 ::std:: partial_sort(_First, _Mid, _Last, less<>());
 }


template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt _Partial_sort_copy_unchecked(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr& _Pred)
 {
 _RanIt _Mid2 = _First2;
 if (_First1 != _Last1 && _First2 != _Last2)
  {
  for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, (void)++_Mid2)
   *_Mid2 = *_First1;
  _Make_heap_unchecked(_First2, _Mid2, _Pred);

  for (; _First1 != _Last1; ++_First1)
   if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2961))
    _Pop_heap_hole_by_index(_First2, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Mid2 - _First2),
     _Iter_value_t<_InIt>(*_First1), _Pred);

  _Sort_heap_unchecked(_First2, _Mid2, _Pred);
  }

 return (_Mid2);
 }

template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2977);
 _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 2978);
 return (_Rechecked(_First2,
  _Partial_sort_copy_unchecked(
   _Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _InIt,
 class _RanIt> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2)
 {
 return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void _Nth_element_unchecked(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr& _Pred)
 {
 if (_Nth == _Last)
  return;

 for (; _ISORT_MAX < _Last - _First; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  if (_Mid.second <= _Nth)
   _First = _Mid.second;
  else if (_Mid.first <= _Nth)
   return;
  else
   _Last = _Mid.first;
  }

 _Insertion_sort_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Nth, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3023);
 _Debug_range(_Nth, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3024);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3025);
 _Nth_element_unchecked(
  _Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
 {
 ::std:: nth_element(_First, _Nth, _Last, less<>());
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Includes_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3045))
   return (false);
  else if (_Pred(*_First1, *_First2))
   ++_First1;
  else
   {
   ++_First1;
   ++_First2;
   }

 return (_First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3064);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3065);
 return (_Includes_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: includes(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3089))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   *_Dest++ = *_First1;
   ++_First1;
   ++_First2;
   }
 _Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
 return (_Copy_no_deprecate(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3116);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3117);
 _Debug_pointer_if(_First1 != _Last1 || _First2 != _Last2, _Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3118);
 return (_Rechecked(_Dest,
  _Set_union_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "set_union" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_union_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Set_union_no_deprecate(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3185))
   ++_First1;
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3191);
   *_Dest++ = *_First1++;
   ++_First2;
   }

 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3206);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3207);
 return (_Rechecked(_Dest,
  _Set_intersection_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "set_intersection" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_intersection_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Set_intersection_no_deprecate(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3275))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3277);
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   ++_First1;
   ++_First2;
   }

 return (_Copy_no_deprecate(_First1, _Last1, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3300);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3301);
 return (_Rechecked(_Dest,
  _Set_difference_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "set_difference" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_difference_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Set_difference_no_deprecate(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3373))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3375);
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3381);
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   ++_First1;
   ++_First2;
   }
 _Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
 return (_Copy_no_deprecate(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3402);
 _Debug_order(_First2, _Last2, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3403);
 return (_Rechecked(_Dest,
  _Set_symmetric_difference_no_deprecate1(
  _Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void __declspec(deprecated("Call to 'std::" "set_symmetric_difference" "' with parameters that may be unsafe - " "this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. " "See documentation on how to use Visual C++ 'Checked Iterators'")) _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_symmetric_difference_no_deprecate(
  _First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  _Set_symmetric_difference_no_deprecate(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_Found, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3475))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3484);
 return (_Rechecked(_First,
  _Max_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: max_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_First, *_Found, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3504))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3513);
 return (_Rechecked(_First,
  _Min_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: min_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 pair<_FwdIt, _FwdIt> _Found(_First, _First);

 if (_First != _Last)
  for (; ++_First != _Last; )
   {
   _FwdIt _Next = _First;
   if (++_Next == _Last)
    {
    if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3539))
     _Found.first = _First;
    else if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3541))
     _Found.second = _First;
    }
   else
    {
    if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3546))
     {
     if (_Debug_lt_pred(_Pred, *_Next, *_Found.first, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3548))
      _Found.first = _Next;
     if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3550))
      _Found.second = _First;
     }
    else
     {
     if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3555))
      _Found.first = _First;
     if (!_Debug_lt_pred(_Pred, *_Next, *_Found.second, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3557))
      _Found.second = _Next;
     }
    _First = _Next;
    }
   }

 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3572);
 return (_Rechecked_both(_First, _Last,
  _Minmax_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: minmax_element(_First, _Last, less<>()));
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Debug_lt_pred(_Pred, _Left, _Right, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3590)))
 {
 return (_Debug_lt_pred(_Pred, _Left, _Right, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3592) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(_Debug_lt(_Left, _Right, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3610)))
 {
 return (_Debug_lt(_Left, _Right, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3612) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist)
 {
 return ((::std:: max)(_Ilist, less<>()));
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Debug_lt_pred(_Pred, _Right, _Left, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3627)))
 {
 return (_Debug_lt_pred(_Pred, _Right, _Left, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3629) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(_Debug_lt(_Right, _Left, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3647)))
 {
 return (_Debug_lt(_Right, _Left, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3649) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist)
 {
 return ((::std:: min)(_Ilist, less<>()));
 }



template<class _Ty,
 class _Pr> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty,
 class _Pr> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist,
  _Pr _Pred)
 {
 pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
  _Ilist.begin(), _Ilist.end(), _Pred);
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _Ty> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
 {
 return (::std:: minmax(_Ilist, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Next_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *--_Next, *_Next1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3711))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *_Next, *--_Mid, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3714); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   _Reverse_unchecked(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   _Reverse_unchecked(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3733);
 return (_Next_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool next_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: next_permutation(_First, _Last, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Prev_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *_Next1, *--_Next, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3756))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *--_Mid, *_Next, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3759); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   _Reverse_unchecked(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   _Reverse_unchecked(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3778);
 return (_Prev_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: prev_permutation(_First, _Last, less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 _RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_RanIt> _Size = _Last - _First;

 if (2 <= _Size)
  for (_Iter_diff_t<_RanIt> _Off = 0; ++_Off < _Size; )
   if (_Debug_lt_pred(_Pred, *(_First + (_Off - 1) / 2), *(_First + _Off), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3799))

    return (_First + _Off);
 return (_Last);
 }

template<class _RanIt,
 class _Pr> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3808);
 return (_Rechecked(_First,
  _Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _RanIt,
 class _Pr> inline
 bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3817);
 return (_Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
 }


template<class _RanIt> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap_until(_First, _Last, less<>()));
 }

template<class _RanIt> inline
 bool is_heap(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Is_sorted_until_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
   if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3841))
    return (_Next);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3850);
 return (_Rechecked(_First,
  _Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _FwdIt,
 class _Pr> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm", 3859);
 return (_Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
 }


template<class _FwdIt> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted_until(_First, _Last, less<>()));
 }

template<class _FwdIt> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted(_First, _Last, less<>()));
 }
# 3908 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\algorithm" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 22 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2
# 124 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
extern "C" {

struct _SYSTEM_INFO;

}


namespace boost
{
    namespace detail
    {
        namespace win32
        {



            typedef unsigned long ulong_ptr;

            typedef void* handle;
            typedef _SYSTEM_INFO system_info;
            typedef unsigned __int64 ticks_type;
            typedef int (__stdcall *farproc_t)();
            unsigned const infinite=~0U;
            unsigned const timeout=258U;
            handle const invalid_handle_value=(handle)(-1);
            unsigned const event_modify_state=2;
            unsigned const synchronize=0x100000u;
            unsigned const wait_abandoned=0x00000080u;
            unsigned const create_event_initial_set = 0x00000002;
            unsigned const create_event_manual_reset = 0x00000001;
            unsigned const event_all_access = 0x1F0003;
            unsigned const semaphore_all_access = 0x1F0003;

            extern "C"
            {
                struct _SECURITY_ATTRIBUTES;
# 173 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
                __declspec(dllimport) void* __stdcall CreateMutexA(_SECURITY_ATTRIBUTES*,int,char const*);
                __declspec(dllimport) void* __stdcall CreateSemaphoreA(_SECURITY_ATTRIBUTES*,long,long,char const*);
                __declspec(dllimport) void* __stdcall CreateEventA(_SECURITY_ATTRIBUTES*,int,int,char const*);
                __declspec(dllimport) void* __stdcall OpenEventA(unsigned long,int,char const*);
                __declspec(dllimport) void* __stdcall GetModuleHandleA(char const*);





                __declspec(dllimport) void __stdcall GetSystemInfo(_SYSTEM_INFO*);
                __declspec(dllimport) unsigned long __stdcall GetTickCount();

                __declspec(dllimport) int __stdcall CloseHandle(void*);
                __declspec(dllimport) int __stdcall ReleaseMutex(void*);
                __declspec(dllimport) unsigned long __stdcall WaitForSingleObjectEx(void*,unsigned long,int);
                __declspec(dllimport) unsigned long __stdcall WaitForMultipleObjectsEx(unsigned long nCount,void* const * lpHandles,int bWaitAll,unsigned long dwMilliseconds,int bAlertable);
                __declspec(dllimport) int __stdcall ReleaseSemaphore(void*,long,long*);
                __declspec(dllimport) int __stdcall DuplicateHandle(void*,void*,void*,void**,unsigned long,int,unsigned long);

                __declspec(dllimport) unsigned long __stdcall SleepEx(unsigned long,int);
                __declspec(dllimport) void __stdcall Sleep(unsigned long);
                typedef void (__stdcall *queue_user_apc_callback_function)(ulong_ptr);
                __declspec(dllimport) unsigned long __stdcall QueueUserAPC(queue_user_apc_callback_function,void*,ulong_ptr);
                __declspec(dllimport) farproc_t __stdcall GetProcAddress(void *, const char *);



                __declspec(dllimport) unsigned long __stdcall GetCurrentProcessId();
                __declspec(dllimport) unsigned long __stdcall GetCurrentThreadId();
                __declspec(dllimport) void* __stdcall GetCurrentThread();
                __declspec(dllimport) void* __stdcall GetCurrentProcess();
                __declspec(dllimport) int __stdcall SetEvent(void*);
                __declspec(dllimport) int __stdcall ResetEvent(void*);
# 215 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
            }
        }
    }
}





# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 223 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2


namespace boost
{
    namespace detail
    {
        namespace win32
        {
            namespace detail { typedef ticks_type (__stdcall *gettickcount64_t)(); }

            extern "C"
            {

                long _InterlockedCompareExchange(long volatile *, long, long);
#pragma intrinsic(_InterlockedCompareExchange)






 }

            inline ticks_type __stdcall GetTickCount64emulation()
            {
                static long count = -1l;
                unsigned long previous_count, current_tick32, previous_count_zone, current_tick32_zone;
                ticks_type current_tick64;

                previous_count = (unsigned long) boost::detail::interlocked_read_acquire(&count);
                current_tick32 = GetTickCount();

                if(previous_count == (unsigned long)-1l)
                {

                    unsigned long initial_count;
                    initial_count = current_tick32 >> 28;
                    previous_count = (unsigned long) _InterlockedCompareExchange(&count, (long)initial_count, -1l);

                    current_tick64 = initial_count;
                    current_tick64 <<= 28;
                    current_tick64 += current_tick32 & 0x0FFFFFFF;
                    return current_tick64;
                }

                previous_count_zone = previous_count & 15;
                current_tick32_zone = current_tick32 >> 28;

                if(current_tick32_zone == previous_count_zone)
                {

                    current_tick64 = previous_count;
                    current_tick64 <<= 28;
                    current_tick64 += current_tick32 & 0x0FFFFFFF;
                    return current_tick64;
                }

                if(current_tick32_zone == previous_count_zone + 1 || (current_tick32_zone == 0 && previous_count_zone == 15))
                {

                    unsigned long new_count = previous_count + 1;
                    _InterlockedCompareExchange(&count, (long)new_count, (long)previous_count);
                    current_tick64 = new_count;
                    current_tick64 <<= 28;
                    current_tick64 += current_tick32 & 0x0FFFFFFF;
                    return current_tick64;
                }


                return 0xFFFFFFFF;
            }


            inline detail::gettickcount64_t GetTickCount64_()
            {
                static detail::gettickcount64_t gettickcount64impl;
                if(gettickcount64impl)
                    return gettickcount64impl;






                farproc_t addr=GetProcAddress(

                    GetModuleHandleA("KERNEL32.DLL"),



                    "GetTickCount64");
                if(addr)
                    gettickcount64impl=(detail::gettickcount64_t) addr;
                else
                    gettickcount64impl=&GetTickCount64emulation;

                return gettickcount64impl;
            }

            enum event_type
            {
                auto_reset_event=false,
                manual_reset_event=true
            };

            enum initial_event_state
            {
                event_initially_reset=false,
                event_initially_set=true
            };

            inline handle create_event(

                const char *mutex_name,



                event_type type,
                initial_event_state state)
            {

                handle const res = win32::CreateEventA(0, type, state, mutex_name);
# 354 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
                return res;
            }

            inline handle create_anonymous_event(event_type type,initial_event_state state)
            {
                handle const res = create_event(0, type, state);
                if(!res)
                {
                    boost::throw_exception(thread_resource_error());
                }
                return res;
            }

            inline handle create_anonymous_semaphore_nothrow(long initial_count,long max_count)
            {

                handle const res=win32::CreateSemaphoreA(0,initial_count,max_count,0);







                return res;
            }

            inline handle create_anonymous_semaphore(long initial_count,long max_count)
            {
                handle const res=create_anonymous_semaphore_nothrow(initial_count,max_count);
                if(!res)
                {
                    boost::throw_exception(thread_resource_error());
                }
                return res;
            }

            inline handle duplicate_handle(handle source)
            {
                handle const current_process=GetCurrentProcess();
                long const same_access_flag=2;
                handle new_handle=0;
                bool const success=DuplicateHandle(current_process,source,current_process,&new_handle,0,false,same_access_flag)!=0;
                if(!success)
                {
                    boost::throw_exception(thread_resource_error());
                }
                return new_handle;
            }

            inline void release_semaphore(handle semaphore,long count)
            {
                (void)( (!!(ReleaseSemaphore(semaphore,count,0)!=0)) || (_wassert(L"ReleaseSemaphore(semaphore,count,0)!=0", L"D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp", (unsigned)(406)), 0) );
            }

            inline void get_system_info(system_info *info)
            {



                win32::GetSystemInfo(info);

            }

            inline void sleep(unsigned long milliseconds)
            {
                if(milliseconds == 0)
                {



                    ::boost::detail::win32::Sleep(0);

                }
                else
                {



                    ::boost::detail::win32::Sleep(milliseconds);

                }
            }
# 466 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
            class __declspec(dllimport) handle_manager
            {
            private:
                handle handle_to_manage;
                handle_manager(handle_manager&);
                handle_manager& operator=(handle_manager&);

                void cleanup()
                {
                    if(handle_to_manage && handle_to_manage!=invalid_handle_value)
                    {
                        (void)( (!!(CloseHandle(handle_to_manage))) || (_wassert(L"CloseHandle(handle_to_manage)", L"D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp", (unsigned)(477)), 0) );
                    }
                }

            public:
                explicit handle_manager(handle handle_to_manage_):
                    handle_to_manage(handle_to_manage_)
                {}
                handle_manager():
                    handle_to_manage(0)
                {}

                handle_manager& operator=(handle new_handle)
                {
                    cleanup();
                    handle_to_manage=new_handle;
                    return *this;
                }

                operator handle() const
                {
                    return handle_to_manage;
                }

                handle duplicate() const
                {
                    return duplicate_handle(handle_to_manage);
                }

                void swap(handle_manager& other)
                {
                    std::swap(handle_to_manage,other.handle_to_manage);
                }

                handle release()
                {
                    handle const res=handle_to_manage;
                    handle_to_manage=0;
                    return res;
                }

                bool operator!() const
                {
                    return !handle_to_manage;
                }

                ~handle_manager()
                {
                    cleanup();
                }
            };
        }
    }
}
# 626 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp"
namespace boost
{
    namespace detail
    {
        namespace win32
        {
            inline bool interlocked_bit_test_and_set(long* x,long bit)
            {
                long const value=1<<bit;
                long old=*x;
                do
                {
                    long const current=::boost::detail::InterlockedCompareExchange(x,old|value,old);
                    if(current==old)
                    {
                        break;
                    }
                    old=current;
                }
                while(true) ;
                return (old&value)!=0;
            }

            inline bool interlocked_bit_test_and_reset(long* x,long bit)
            {
                long const value=1<<bit;
                long old=*x;
                do
                {
                    long const current=::boost::detail::InterlockedCompareExchange(x,old&~value,old);
                    if(current==old)
                    {
                        break;
                    }
                    old=current;
                }
                while(true) ;
                return (old&value)!=0;
            }
        }
    }
}



# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 670 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/thread_primitives.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 1








# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_clock.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_clock.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ctime" 1 3
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ctime" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
 extern "C" {
# 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;
        long tv_nsec;
    };
# 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int* __cdecl __daylight(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __dstbias(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __timezone(void);




                             __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char** __cdecl __tzname(void);




__declspec(dllimport) errno_t __cdecl _get_daylight(
          int* _Daylight
    );


__declspec(dllimport) errno_t __cdecl _get_dstbias(
          long* _DaylightSavingsBias
    );


__declspec(dllimport) errno_t __cdecl _get_timezone(
          long* _TimeZone
    );


__declspec(dllimport) errno_t __cdecl _get_tzname(
                                 size_t* _ReturnValue,
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 int _Index
    );
# 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl asctime(
         struct tm const* _Tm
    );




    __declspec(dllimport) errno_t __cdecl asctime_s(
                                                            char* _Buffer,
                                                            size_t _SizeInBytes,
                                                            struct tm const* _Tm
        );


extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char (&_Buffer)[_Size], struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) clock_t __cdecl clock(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
                                                        char* _Buffer,
                                                        size_t _SizeInBytes,
                                                        __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
                                                          char* _Buffer,
                                                          size_t _SizeInBytes,
                                                          __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) double __cdecl _difftime32(
         __time32_t _Time1,
         __time32_t _Time2
    );


__declspec(dllimport) double __cdecl _difftime64(
         __time64_t _Time1,
         __time64_t _Time2
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
            struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
            struct tm* _Tm
    );



__declspec(dllimport) size_t __cdecl strftime(
                                  char* _Buffer,
                                  size_t _SizeInBytes,
                                  char const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _strftime_l(
                                  char* _Buffer,
                                  size_t _MaxSize,
                                  char const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strdate( char *_Buffer);





__declspec(dllimport) errno_t __cdecl _strtime_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);




__declspec(dllimport) __time32_t __cdecl _time32(
              __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
              __time64_t* _Time
    );



__declspec(dllimport) int __cdecl _timespec32_get(
          struct _timespec32* _Ts,
          int _Base
    );



__declspec(dllimport) int __cdecl _timespec64_get(
          struct _timespec64* _Ts,
          int _Base
    );
# 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
    __declspec(dllimport) void __cdecl _tzset(void);


    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
              struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
             struct tm* _Tm,
             unsigned _Milliseconds
        );
# 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
 }


        static __inline double __cdecl difftime(
                 time_t const _Time1,
                 time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
                 time_t const* const _Time)
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
 }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
 }


        static __inline time_t __cdecl _mkgmtime(
                    struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }


        static __inline time_t __cdecl mktime(
                    struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
                      time_t* const _Time
            )
        {
            return _time64(_Time);
        }


        static __inline int __cdecl timespec_get(
                  struct timespec* const _Ts,
                  int const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }



            static __inline errno_t __cdecl ctime_s(
                                                                    char* const _Buffer,
                                                                    size_t const _SizeInBytes,
                                                                    time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }


            static __inline errno_t __cdecl gmtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }


            static __inline errno_t __cdecl localtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
# 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);






}
# 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h" 3
#pragma pack(pop)
# 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ctime" 2 3




namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/locale_config.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp" 2
# 54 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 54 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp" 2
# 157 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/auto_link.hpp" 1
# 157 "D:\\my_project\\boost_1_65_1\\boost/date_time/compiler_config.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp" 2
# 38 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp"
namespace boost {
namespace date_time {
# 52 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp"
  struct c_time {
    public:
# 94 "D:\\my_project\\boost_1_65_1\\boost/date_time/c_time.hpp"
#pragma warning(push)
#pragma warning(disable: 4996)


 inline
      static std::tm* localtime(const std::time_t* t, std::tm* result)
      {
        result = std::localtime(t);
        if (!result)
          boost::throw_exception(std::runtime_error("could not convert calendar time to local time"));
        return result;
      }

      inline
      static std::tm* gmtime(const std::time_t* t, std::tm* result)
      {
        result = std::gmtime(t);
        if (!result)
          boost::throw_exception(std::runtime_error("could not convert calendar time to UTC time"));
        return result;
      }

#pragma warning(pop)



 };
}}
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_clock.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/shared_ptr.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/shared_ptr.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/no_tr1/memory.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/config/no_tr1/memory.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory" 1 3
# 16 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 28197)

namespace std {
template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


class bad_weak_ptr
 : public ::std:: exception
 {
public:
 bad_weak_ptr() noexcept
  {
  }

 virtual const char * what() const throw()
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() noexcept = 0;
 virtual void _Delete_this() noexcept = 0;

private:
 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  {
  _Init_atomic_counter(_Uses, 1);
  _Init_atomic_counter(_Weaks, 1);
  }

public:
 virtual ~_Ref_count_base() noexcept
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
# 95 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory" 3
   }
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   _Delete_this();
  }

 long _Use_count() const noexcept
  {
  return (_Get_atomic_count(_Uses));
  }

 bool _Expired() const noexcept
  {
  return (_Use_count() == 0);
  }

 virtual void *_Get_deleter(const type_info&) const noexcept
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy() noexcept
  {
  delete _Ptr;
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Compressed_pair<_Dx, _Ty *> _Mypair;
 };


template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, const _Alloc& _Ax)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt,
   _One_then_variadic_args_t(), _Ax, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second()._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_second()._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Ty *> > _Mypair;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;

template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty element_type;

 constexpr _Ptr_base() noexcept
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: move(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Swap(_Right);
  }

 long use_count() const noexcept
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right) noexcept
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Typeid) const noexcept
  {
  return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
  }

 _Ty *_Get() const noexcept
  {
  return (_Ptr);
  }

 bool _Expired() const noexcept
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }


 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Ty>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }


 template<class _Ty2>
  void _Reset(_Ty *_Other_ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other_ptr, _Other._Rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr();
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Ty *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = const_cast<remove_cv_t<_Ty2> *>(_Other_ptr);
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr shared_ptr() noexcept
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }

 constexpr shared_ptr(nullptr_t) noexcept
  {
  }

 template<class _Dx>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) noexcept
  {
  this->_Reset(_Px, _Right);
  }

 shared_ptr(const _Myt& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }


 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  this->_Reset(::std:: move(_Other));
  }


 shared_ptr(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }


 template<class _Ux,
  class _Dx,
  class = typename enable_if<is_convertible<
   typename unique_ptr<_Ux, _Dx>::pointer, _Ty *>::value,
   void>::type>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 ~shared_ptr() noexcept
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }


 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 void reset() noexcept
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 void swap(_Myt& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 _Ty *get() const noexcept
  {
  return (this->_Get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const noexcept
  {
  return (*this->_Get());
  }

 _Ty *operator->() const noexcept
  {
  return (this->_Get());
  }

 bool unique() const noexcept
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const noexcept
  {
  return (this->_Get() != 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typedef _Wrap_alloc<_Alloc> _Alref0;
  typename _Alref0::template rebind<_Refd>::other _Alref(_Ax);

  try {
  _Refd *_Pref = _Alref.allocate(1);
  _Alref.construct(_Pref, _Px, _Dt, _Ax);
  _Resetp0(_Px, _Pref);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (less<decltype(_Always_false<_Ty1>::value
  ? _Left.get() : _Right.get())>()(
   _Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left,
  nullptr_t) noexcept
 {
 return (_Left.get() == (_Ty *)0);
 }

template<class _Ty>
 bool operator==(nullptr_t,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return ((_Ty *)0 == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator!=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (less<_Ty *>()(_Left.get(), (_Ty *)0));
 }

template<class _Ty>
 bool operator<(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (less<_Ty *>()((_Ty *)0, _Right.get()));
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator>(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator<=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = static_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = const_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = dynamic_cast<_Elem1 *>(_Other.get());
 if (_Ptr)
  return (shared_ptr<_Ty1>(_Other, _Ptr));
 else
  return (shared_ptr<_Ty1>());
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }


template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:
 template<class... _Types>
  _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 typename aligned_union<1, _Ty>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef typename aligned_union<1, _Ty>::type _Mystoragety;

 template<class... _Types>
  _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
  {
  ::new ((void *)_Getptr()) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Mypair._Get_second());
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Myalty, _Mystoragety> _Mypair;
 };


template<class _Ty,
 class... _Types> inline
  shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 _Ref_count_obj<_Ty> *_Rx =
  new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
 shared_ptr<_Ty> allocate_shared(
  const _Alloc& _Al_arg, _Types&&... _Args)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typedef _Wrap_alloc<_Alloc> _Alref0;
 typename _Alref0::template rebind<_Refoa>::other _Alref(_Al_arg);

 _Refoa *_Rx = _Alref.allocate(1);

 try {
  _Alref.construct(_Rx, _Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }



template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef weak_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr weak_ptr() noexcept
  {
  }

 weak_ptr(const weak_ptr& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  }

 weak_ptr(_Myt&& _Other) noexcept
  : _Mybase(::std:: move(_Other))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  _Other.reset();
  }

 ~weak_ptr() noexcept
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right.lock());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(weak_ptr<_Ty2>&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset() noexcept
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 bool expired() const noexcept
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const noexcept
  {
  return (shared_ptr<_Ty>(*this, false));
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) noexcept
 {
 _W1.swap(_W2);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 constexpr enable_shared_from_this() noexcept
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) noexcept
  {
  }

 enable_shared_from_this&
  operator=(const enable_shared_from_this&) noexcept
  {
  return (*this);
  }

 ~enable_shared_from_this() noexcept
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
}

namespace std {



template<class _Ty>
 struct default_delete
 {
 constexpr default_delete() noexcept = default;

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  default_delete(const default_delete<_Ty2>&) noexcept
  {
  }

 void operator()(_Ty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 constexpr default_delete() noexcept = default;

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  default_delete(const default_delete<_Uty[]>&) noexcept
  {
  }

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  void operator()(_Uty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Uty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Val,
 class _Ty>
 struct _Get_deleter_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Dx>
 class _Unique_ptr_base
 {
public:
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
  : _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
  {
  }

 template<class _Ptr2>
  constexpr _Unique_ptr_base(_Ptr2 _Ptr)
  : _Mypair(_Zero_then_variadic_args_t(), _Ptr)
  {
  }

 _Dx& get_deleter() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Dx& get_deleter() const noexcept
  {
  return (_Mypair._Get_first());
  }

 pointer& _Myptr() noexcept
  {
  return (_Mypair._Get_second());
  }

 const pointer& _Myptr() const noexcept
  {
  return (_Mypair._Get_second());
  }

 _Compressed_pair<_Dx, pointer> _Mypair;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 explicit unique_ptr(pointer _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  class = typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value
   && (is_reference<_Dx>::value
    ? is_same<_Dx2, _Dx>::value
    : is_convertible<_Dx2, _Dx>::value),
   void>::type>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }


 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
   && is_same<_Dx, default_delete<_Ty> >::value,
   void>::type>
  unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
   : _Mybase(_Right.release())
  {
  }


 template<class _Ty2,
  class _Dx2>
  typename enable_if<!is_array<_Ty2>::value
   && is_assignable<_Dx&, _Dx2&&>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value,
   _Myt&>::type
  operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const
  {
  return (*get());
  }

 pointer operator->() const noexcept
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty>
  using _Enable_ctor_reset = enable_if_t<
   is_same<_Uty, pointer>::value
   || (is_same<pointer, element_type *>::value
   && is_pointer<_Uty>::value
   && is_convertible<
    remove_pointer_t<_Uty>(*)[],
    element_type(*)[]
   >::value)>;

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 explicit unique_ptr(_Uty _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 template<class _Uty,
  class _Ex,
  bool _More,
  class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
  class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
  using _Enable_conversion = enable_if_t<
   is_array<_Uty>::value
   && is_same<pointer, element_type *>::value
   && is_same<_UP_pointer, _UP_element_type *>::value
   && is_convertible<_UP_element_type(*)[], element_type(*)[]>::value
   && _More>;

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_reference<_Dx>::value
   ? is_same<_Ex, _Dx>::value
   : is_convertible<_Ex, _Dx>::value> >
  unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Ex>(_Right.get_deleter()))
  {
  }

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_assignable<_Dx&, _Ex&&>::value> >
  _Myt& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
  return (*this);
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t = nullptr_t{}) noexcept
  {
  reset(pointer());
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  _Delete();
  }

 _Ty& operator[](size_t _Idx) const
  {
  return (get()[_Idx]);
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 void reset(_Uty _Ptr) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;

 _Myt& operator=(const _Myt&) = delete;

private:
 void _Delete()
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }
 };



template<class _Ty,
 class... _Types> inline
 typename enable_if<!is_array<_Ty>::value,
  unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty> inline
 typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
  unique_ptr<_Ty> >::type make_unique(size_t _Size)
 {
 typedef typename remove_extent<_Ty>::type _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types>
 typename enable_if<extent<_Ty>::value != 0,
  void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
 class _Dx,
 class = enable_if_t<_Is_swappable<_Dx>::value>>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));

 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t) noexcept
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }



enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety() noexcept
 {
 return (pointer_safety::relaxed);
 }


namespace tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}



template<class _Ty = void>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> first_argument_type;
 typedef shared_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
 {
 typedef weak_ptr<_Ty> first_argument_type;
 typedef weak_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<>
 struct owner_less<void>
 {
 typedef int is_transparent;

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx> >
 {
 typedef unique_ptr<_Ty, _Dx> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  typedef typename argument_type::pointer _Ptrtype;
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<_Ty *>()(_Keyval.get()));
  }
 };


inline void *align(size_t _Bound, size_t _Size,
 void *& _Ptr, size_t& _Space) noexcept
 {
 size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
 if (0 < _Off)
  _Off = _Bound - _Off;
 if (_Space < _Off || _Space - _Off < _Size)
  return (0);
 else
  {
  _Ptr = (char *)_Ptr + _Off;
  _Space -= _Off;
  return (_Ptr);
  }
 }


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() noexcept
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template<class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
 {
 return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template<class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template<class _Ty> inline
 void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 ::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 return (_Other);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 shared_ptr<_Ty> _Old_exp;
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get()
  && !_Ptr->owner_before(*_Exp)
  && !_Exp->owner_before(*_Ptr);
 if (_Success)
  _Ptr->swap(_Value);
 else
  {
  _Exp->swap(_Old_exp);
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
   shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
  shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 21 "D:\\my_project\\boost_1_65_1\\boost/config/no_tr1/memory.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/checked_delete.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/checked_delete.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/checked_delete.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/core/checked_delete.hpp"
namespace boost
{



template<class T> inline void checked_delete(T * x)
{

    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
}

template<class T> inline void checked_array_delete(T * x)
{
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete [] x;
}

template<class T> struct checked_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {

        boost::checked_delete(x);
    }
};

template<class T> struct checked_array_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {
        boost::checked_array_delete(x);
    }
};

}
# 15 "D:\\my_project\\boost_1_65_1\\boost/checked_delete.hpp" 2
# 26 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/bad_weak_ptr.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/bad_weak_ptr.hpp"
namespace boost
{
# 46 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/bad_weak_ptr.hpp"
class bad_weak_ptr: public std::exception
{
public:

    virtual char const * what() const throw()
    {
        return "tr1::bad_weak_ptr";
    }
};
# 64 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/bad_weak_ptr.hpp"
}
# 28 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_has_sync.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base.hpp" 2
# 48 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/sp_typeinfo.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/detail/sp_typeinfo.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/typeinfo.hpp" 1
# 119 "D:\\my_project\\boost_1_65_1\\boost/core/typeinfo.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/demangle.hpp" 1
# 44 "D:\\my_project\\boost_1_65_1\\boost/core/demangle.hpp"
namespace boost
{

namespace core
{

inline char const * demangle_alloc( char const * name ) ;
inline void demangle_free( char const * name ) ;

class scoped_demangled_name
{
private:
    char const * m_p;

public:
    explicit scoped_demangled_name( char const * name ) :
        m_p( demangle_alloc( name ) )
    {
    }

    ~scoped_demangled_name()
    {
        demangle_free( m_p );
    }

    char const * get() const
    {
        return m_p;
    }

    private: scoped_demangled_name( scoped_demangled_name const& );
    private: scoped_demangled_name& operator= ( scoped_demangled_name const& );
};
# 104 "D:\\my_project\\boost_1_65_1\\boost/core/demangle.hpp"
inline char const * demangle_alloc( char const * name )
{
    return name;
}

inline void demangle_free( char const * )
{
}

inline std::string demangle( char const * name )
{
    return name;
}



}

}
# 119 "D:\\my_project\\boost_1_65_1\\boost/core/typeinfo.hpp" 2



namespace boost
{

namespace core
{







typedef std::type_info typeinfo;



inline std::string demangled_name( core::typeinfo const & ti )
{
    return core::demangle( ti.name() );
}

}

}
# 20 "D:\\my_project\\boost_1_65_1\\boost/detail/sp_typeinfo.hpp" 2


namespace boost
{

namespace detail
{

typedef boost::core::typeinfo sp_typeinfo;

}

}
# 18 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp" 2

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 1 3
# 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 1 3
# 14 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4390 4793 6326)
# 89 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
inline long long _InterlockedExchange64_INLINE(volatile long long *_Tgt, long long _Value)
{
 long long _Oldval;
 _ReadWriteBarrier();
 do
  {
  _Oldval = *_Tgt;
  } while (_Oldval != _InterlockedCompareExchange64(_Tgt, _Value, _Oldval));
 _ReadWriteBarrier();

 return (_Oldval);
}

inline long long _InterlockedExchangeAdd64_INLINE(volatile long long *_Tgt, long long _Value)
{
 long long _Oldval, _Newval;
 _ReadWriteBarrier();
 do
  {
  _Oldval = *_Tgt;
  _Newval = _Oldval + _Value;
  } while (_Oldval != _InterlockedCompareExchange64(_Tgt, _Newval, _Oldval));
 _ReadWriteBarrier();

 return (_Oldval);
}

inline long long _InterlockedAnd64_INLINE(volatile long long *_Tgt, long long _Value)
{
 long long _Oldval, _Newval;
 _ReadWriteBarrier();
 do
  {
  _Oldval = *_Tgt;
  _Newval = _Oldval & _Value;
  } while (_Oldval != _InterlockedCompareExchange64(_Tgt, _Newval, _Oldval));
 _ReadWriteBarrier();

 return (_Oldval);
}

inline long long _InterlockedOr64_INLINE(volatile long long *_Tgt, long long _Value)
{
 long long _Oldval, _Newval;
 _ReadWriteBarrier();
 do
  {
  _Oldval = *_Tgt;
  _Newval = _Oldval | _Value;
  } while (_Oldval != _InterlockedCompareExchange64(_Tgt, _Newval, _Oldval));
 _ReadWriteBarrier();

 return (_Oldval);
}

inline long long _InterlockedXor64_INLINE(volatile long long *_Tgt, long long _Value)
{
 long long _Oldval, _Newval;
 _ReadWriteBarrier();
 do
  {
  _Oldval = *_Tgt;
  _Newval = _Oldval ^ _Value;
  } while (_Oldval != _InterlockedCompareExchange64(_Tgt, _Newval, _Oldval));
 _ReadWriteBarrier();

 return (_Oldval);
}


namespace std {

typedef unsigned char _Uint1_t;
typedef unsigned short _Uint2_t;

typedef unsigned long long _Uint8_t;
# 188 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
inline memory_order _Memory_order_upper_bound(memory_order _Order1,
 memory_order _Order2)
 {
# 205 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 static const memory_order _Upper[6][6] = {
  { memory_order_relaxed, memory_order_consume, memory_order_acquire,
  memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_consume, memory_order_consume, memory_order_acquire,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_acquire, memory_order_acquire, memory_order_acquire,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_release, memory_order_acq_rel, memory_order_acq_rel,
  memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst,
  memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst
  }
  };

 if ((_Order1 < 0) || (6 <= _Order1)
  || (_Order2 < 0) || (6 <= _Order2))
  {
  {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 224); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 224, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 224, 0); }};
  return (memory_order_seq_cst);
  }
 return (_Upper[_Order1][_Order2]);
 }

inline void _Validate_compare_exchange_memory_order(
 memory_order _Success, memory_order _Failure)
 {


 switch (_Failure)
  {
 case memory_order_relaxed:
  break;

 case memory_order_seq_cst:
  if (_Success != memory_order_seq_cst)
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 242); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 242, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 242, 0); }};
  break;

 case memory_order_acquire:
  if ((_Success == memory_order_consume) ||
   (_Success == memory_order_relaxed))
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 248); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 248, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 248, 0); }};
  break;

 case memory_order_consume:
  if (_Success == memory_order_relaxed)
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 253); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 253, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 253, 0); }};
  break;

 default:
  {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 257); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 257, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 257, 0); }};
  break;
  }
 }



inline void _Store_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {
# 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange8((volatile char *)_Tgt, _Value);

 }

inline void _Atomic_store_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_1(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_1(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_1(_Tgt, _Value);
   break;

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 320); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 320, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 320, 0); }};
   break;
  }
 }


inline _Uint1_t _Load_seq_cst_1(volatile _Uint1_t *_Tgt)
 {

 _Uint1_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint1_t _Load_relaxed_1(volatile _Uint1_t *_Tgt)
 {

 _Uint1_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint1_t _Load_acquire_1(volatile _Uint1_t *_Tgt)
 {


 return (_Load_seq_cst_1(_Tgt));
 }

inline _Uint1_t _Atomic_load_1(
 volatile _Uint1_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_1(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_1(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_1(_Tgt));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 381); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 381, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 381, 0); }};
   return (0);
  }
 }


inline _Uint1_t _Exchange_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_exchange_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_1(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 435); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 435, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 435, 0); }};
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_1(
 volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_1(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_1(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_1(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_1(_Tgt, _Exp, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 536); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 536, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 536, 0); }};
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_1(
 volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_1(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint1_t _Fetch_add_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_add_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_1(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 600); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 600, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 600, 0); }};
   return (0);
  }
 }

inline _Uint1_t _Atomic_fetch_sub_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_1(_Tgt, 0 - _Value, _Order));
 }


inline _Uint1_t _Fetch_and_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_and_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_1(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 660); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 660, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 660, 0); }};
   return (0);
  }
 }


inline _Uint1_t _Fetch_or_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_or_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_1(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 714); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 714, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 714, 0); }};
   return (0);
  }
 }


inline _Uint1_t _Fetch_xor_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_xor_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_1(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 768); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 768, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 768, 0); }};
   return (0);
  }
 }


inline void _Store_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {
# 808 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange16((volatile short *)_Tgt, _Value);

 }

inline void _Atomic_store_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_2(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_2(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_2(_Tgt, _Value);
   break;

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 830); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 830, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 830, 0); }};
   break;
  }
 }


inline _Uint2_t _Load_seq_cst_2(volatile _Uint2_t *_Tgt)
 {

 _Uint2_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint2_t _Load_relaxed_2(volatile _Uint2_t *_Tgt)
 {

 _Uint2_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint2_t _Load_acquire_2(volatile _Uint2_t *_Tgt)
 {


 return (_Load_seq_cst_2(_Tgt));
 }

inline _Uint2_t _Atomic_load_2(
 volatile _Uint2_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_2(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_2(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_2(_Tgt));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 891); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 891, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 891, 0); }};
   return (0);
  }
 }


inline _Uint2_t _Exchange_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_exchange_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_2(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 945); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 945, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 945, 0); }};
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_2(
 volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_2(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_2(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_2(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_2(_Tgt, _Exp, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1046); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1046, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1046, 0); }};
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_2(
 volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_2(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint2_t _Fetch_add_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_add_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_2(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1110); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1110, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1110, 0); }};
   return (0);
  }
 }

inline _Uint2_t _Atomic_fetch_sub_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_2(_Tgt, 0 - _Value, _Order));
 }


inline _Uint2_t _Fetch_and_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_and_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_2(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1170); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1170, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1170, 0); }};
   return (0);
  }
 }


inline _Uint2_t _Fetch_or_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_or_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_2(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1224); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1224, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1224, 0); }};
   return (0);
  }
 }


inline _Uint2_t _Fetch_xor_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_xor_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_2(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1278); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1278, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1278, 0); }};
   return (0);
  }
 }


inline void _Store_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {
# 1318 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange((volatile long *)_Tgt, _Value);

 }

inline void _Atomic_store_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_4(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_4(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_4(_Tgt, _Value);
   break;

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1340); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1340, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1340, 0); }};
   break;
  }
 }


inline _Uint4_t _Load_seq_cst_4(volatile _Uint4_t *_Tgt)
 {

 _Uint4_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint4_t _Load_relaxed_4(volatile _Uint4_t *_Tgt)
 {

 _Uint4_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint4_t _Load_acquire_4(volatile _Uint4_t *_Tgt)
 {


 return (_Load_seq_cst_4(_Tgt));
 }

inline _Uint4_t _Atomic_load_4(
 volatile _Uint4_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_4(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_4(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_4(_Tgt));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1401); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1401, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1401, 0); }};
   return (0);
  }
 }


inline _Uint4_t _Exchange_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_exchange_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_4(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1455); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1455, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1455, 0); }};
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_4(
 volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_4(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_4(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_4(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_4(_Tgt, _Exp, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1556); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1556, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1556, 0); }};
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_4(
 volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_4(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint4_t _Fetch_add_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_add_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_4(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1620); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1620, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1620, 0); }};
   return (0);
  }
 }

inline _Uint4_t _Atomic_fetch_sub_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_4(_Tgt, 0 - _Value, _Order));
 }


inline _Uint4_t _Fetch_and_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_and_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_4(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1680); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1680, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1680, 0); }};
   return (0);
  }
 }


inline _Uint4_t _Fetch_or_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_or_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_4(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1734); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1734, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1734, 0); }};
   return (0);
  }
 }


inline _Uint4_t _Fetch_xor_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_xor_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_4(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1788); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1788, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1788, 0); }};
   return (0);
  }
 }


inline void _Store_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {
# 1804 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value);

 }

inline void _Store_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {
# 1820 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value);

 }

inline void _Store_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {
# 1834 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value);

 }

inline void _Atomic_store_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_8(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_8(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_8(_Tgt, _Value);
   break;

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1856); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1856, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1856, 0); }};
   break;
  }
 }


inline _Uint8_t _Load_seq_cst_8(volatile _Uint8_t *_Tgt)
 {

 _Uint8_t _Value;
# 1880 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _Value = _InterlockedOr64_INLINE((volatile long long *)_Tgt, 0);


 return (_Value);
 }

inline _Uint8_t _Load_relaxed_8(volatile _Uint8_t *_Tgt)
 {

 _Uint8_t _Value;
# 1901 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
 _Value = _InterlockedOr64_INLINE((volatile long long *)_Tgt, 0);


 return (_Value);
 }

inline _Uint8_t _Load_acquire_8(volatile _Uint8_t *_Tgt)
 {


 return (_Load_seq_cst_8(_Tgt));
 }

inline _Uint8_t _Atomic_load_8(
 volatile _Uint8_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_8(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_8(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_8(_Tgt));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1930); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1930, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1930, 0); }};
   return (0);
  }
 }


inline _Uint8_t _Exchange_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_exchange_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_8(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1984); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1984, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 1984, 0); }};
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_8(
 volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_8(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_8(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_8(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_8(_Tgt, _Exp, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2085); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2085, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2085, 0); }};
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_8(
 volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_8(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint8_t _Fetch_add_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_add_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_8(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2149); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2149, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2149, 0); }};
   return (0);
  }
 }

inline _Uint8_t _Atomic_fetch_sub_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_8(_Tgt, 0 - _Value, _Order));
 }


inline _Uint8_t _Fetch_and_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_and_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_8(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2209); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2209, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2209, 0); }};
   return (0);
  }
 }


inline _Uint8_t _Fetch_or_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_or_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_8(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2263); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2263, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2263, 0); }};
   return (0);
  }
 }


inline _Uint8_t _Fetch_xor_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64_INLINE((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_xor_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_8(_Tgt, _Value));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2317); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2317, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2317, 0); }};
   return (0);
  }
 }

inline int _Atomic_flag_test_and_set(volatile _Atomic_flag_t *_Flag,
 memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_consume:
  case memory_order_acquire:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_release:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_interlockedbittestandset(_Flag, 0));

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2342); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2342, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2342, 0); }};
   return (0);
  }
 }

inline void _Atomic_flag_clear(volatile _Atomic_flag_t *_Flag,
 memory_order _Order)
 {
 static_assert(sizeof(_Atomic_flag_t) == sizeof(_Uint4_t),
  "Unexpected _Atomic_flag_t size");

 switch (_Order)
  {
  case memory_order_relaxed:
  case memory_order_release:
  case memory_order_seq_cst:
   _Atomic_store_4((volatile _Uint4_t *)_Flag, 0, _Order);
   break;

  default:
   {_Debug_message(L"Invalid memory_order", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2362); { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2362, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h", 2362, 0); }};
   break;
  }
 }

inline void _Atomic_thread_fence(memory_order _Order)
 {







 _ReadWriteBarrier();
 if (_Order == memory_order_seq_cst)
  {
  static _Uint4_t _Guard;
  _Atomic_exchange_4(&_Guard, 0, memory_order_seq_cst);
  _ReadWriteBarrier();
  }

 }

inline void _Atomic_signal_fence(memory_order _Order)
 {
 _ReadWriteBarrier();
 }
# 2403 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
inline void _Lock_spin_lock(
 volatile _Atomic_flag_t *_Flag)
 {
 while (_Atomic_flag_test_and_set(_Flag, memory_order_acquire))
                  ;
 }

inline void _Unlock_spin_lock(
 volatile _Atomic_flag_t *_Flag)
 {
 _Atomic_flag_clear(_Flag, memory_order_release);
 }



inline void _Atomic_copy(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile const void *_Src,
   memory_order _Order)
 {
 _Lock_spin_lock(_Flag);
 :: memcpy((void *)_Tgt, (void *)_Src, _Size);
 _Unlock_spin_lock(_Flag);
 }

inline void _Atomic_exchange(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile void *_Src,
   memory_order _Order)
 {
 unsigned char *_Left = (unsigned char *)_Tgt;
 unsigned char *_Right = (unsigned char *)_Src;

 _Lock_spin_lock(_Flag);
 for (; 0 < _Size; --_Size)
  {
  unsigned char _Tmp = *_Left;
  *_Left++ = *_Right;
  *_Right++ = _Tmp;
  }
 _Unlock_spin_lock(_Flag);
 }

inline int _Atomic_compare_exchange_weak(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
   memory_order _Order1, memory_order _Order2)
 {
 int _Result;

 _Lock_spin_lock(_Flag);
 _Result = :: memcmp((const void *)_Tgt, (const void *)_Exp, _Size) == 0;
 if (_Result != 0)
  :: memcpy((void *)_Tgt, (void *)_Src, _Size);
 else
  :: memcpy((void *)_Exp, (void *)_Tgt, _Size);
 _Unlock_spin_lock(_Flag);
 return (_Result);
 }

inline int _Atomic_compare_exchange_strong(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
 volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
 memory_order _Order1, memory_order _Order2)
 {
 return (_Atomic_compare_exchange_weak(_Flag, _Size, _Tgt, _Exp, _Src,
  _Order1, _Order2));
 }


inline int _Atomic_is_lock_free_1(void)
 {
 return (1 <= 8);
 }

inline int _Atomic_is_lock_free_2(void)
 {
 return (2 <= 8);
 }

inline int _Atomic_is_lock_free_4(void)
 {
 return (4 <= 8);
 }

inline int _Atomic_is_lock_free_8(void)
 {
 return (8 <= 8);
 }
# 2545 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
}
# 2556 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4522 4800)
# 38 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 3
namespace std {
inline memory_order _Get_memory_order(memory_order _Order)
 {

 return (_Order == memory_order_acq_rel ? memory_order_acquire
  : _Order == memory_order_release ? memory_order_relaxed
  : _Order);
 }


template<class _Ty>
 _Ty kill_dependency(_Ty _Arg) noexcept
 {
 return (_Arg);
 }


template <class _Ty>
 struct atomic;
template <class _Ty>
 bool atomic_is_lock_free(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
 bool atomic_is_lock_free(const atomic<_Ty> *) noexcept;
template <class _Ty>
 void atomic_init(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_init(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store_explicit(volatile atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 void atomic_store_explicit(atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_load(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
 _Ty atomic_load(const atomic<_Ty> *) noexcept;
template <class _Ty>
 _Ty atomic_load_explicit(const volatile atomic<_Ty> *,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_load_explicit(const atomic<_Ty> *,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_exchange(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_exchange(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_exchange_explicit(volatile atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_exchange_explicit(atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak(volatile atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak(atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak_explicit(
  volatile atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak_explicit(
  atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong(volatile atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong(atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong_explicit(
  volatile atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong_explicit(
  atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;


template <class _Ty>
 _Ty atomic_fetch_add(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;



typedef struct atomic_flag
 {
 bool test_and_set(memory_order _Order = memory_order_seq_cst)
  volatile noexcept;
 bool test_and_set(memory_order _Order = memory_order_seq_cst) noexcept;
 void clear(memory_order _Order = memory_order_seq_cst)
  volatile noexcept;
 void clear(memory_order _Order = memory_order_seq_cst) noexcept;

 _Atomic_flag_t _My_flag;

 atomic_flag() noexcept = default;
 atomic_flag(const atomic_flag&) = delete;
 atomic_flag& operator=(const atomic_flag&) = delete;
 atomic_flag& operator=(const atomic_flag&) volatile = delete;
 } atomic_flag;

inline bool atomic_flag::test_and_set(memory_order _Order)
  volatile noexcept
 {
 return (_Atomic_flag_test_and_set(&_My_flag, _Order));
 }

inline bool atomic_flag::test_and_set(memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_My_flag, _Order));
 }

inline void atomic_flag::clear(memory_order _Order)
 volatile noexcept
 {
 _Atomic_flag_clear(&_My_flag, _Order);
 }

inline void atomic_flag::clear(memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_My_flag, _Order);
 }

inline bool atomic_flag_test_and_set(volatile atomic_flag *_Flag) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
 }

inline bool atomic_flag_test_and_set(atomic_flag *_Flag) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
 }

inline bool atomic_flag_test_and_set_explicit(
 volatile atomic_flag *_Flag, memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
 }

inline bool atomic_flag_test_and_set_explicit(
 atomic_flag *_Flag, memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
 }

inline void atomic_flag_clear(volatile atomic_flag *_Flag) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
 }

inline void atomic_flag_clear(atomic_flag *_Flag) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
 }

inline void atomic_flag_clear_explicit(
 volatile atomic_flag *_Flag, memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, _Order);
 }

inline void atomic_flag_clear_explicit(
 atomic_flag *_Flag, memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, _Order);
 }


template<unsigned _Bytes>
 struct _Atomic_impl
 {
 typedef _Uint1_t _My_int;

 constexpr _Atomic_impl() noexcept
  : _My_flag(0)
  {
  }

 bool _Is_lock_free() const volatile
  {
  return (false);
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  _Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  _Atomic_exchange(&_My_flag, _Bytes, _Left, _Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak(
   &_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong(
   &_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
  }

private:
 mutable _Atomic_flag_t _My_flag;
 };



template<>
 struct _Atomic_impl<1U>
 {
 typedef _Uint1_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_1());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_1((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_1((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_1((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_1(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_1(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<2U>
 {
 typedef _Uint2_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_2());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_2((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_2((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_2((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_2(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_2(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<4U>
 {
 typedef _Uint4_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_4());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_4((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_4((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_4((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_4(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_4(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<8U>
 {
 typedef _Uint8_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_8());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_8((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_8((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_8((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_8(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_8(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };


template<class _Ty,
 unsigned _Bytes>
 struct _Atomic_base
  : _Atomic_impl<_Bytes>
 {
 typedef _Atomic_impl<_Bytes> _Mybase;
 typedef typename _Mybase::_My_int _My_int;

 constexpr _Atomic_base(_Ty _Val) noexcept
  : _My_val(_Val)
  {
  }

 _Atomic_base() noexcept = default;
 _Atomic_base(const _Atomic_base&) = delete;
 _Atomic_base& operator=(const _Atomic_base&) = delete;
 _Atomic_base& operator=(const _Atomic_base&) volatile = delete;

 _Ty operator=(_Ty _Right) volatile noexcept
  {
  this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
  return (_Right);
  }

 _Ty operator=(_Ty _Right) noexcept
  {
  this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
  return (_Right);
  }

 bool is_lock_free() const volatile noexcept
  {
  return (this->_Is_lock_free());
  }

 bool is_lock_free() const noexcept
  {
  return (this->_Is_lock_free());
  }

 void store(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  this->_Store((void *)&_My_val, &_Value, _Order);
  }

 void store(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  this->_Store((void *)&_My_val, &_Value, _Order);
  }

 _Ty load(memory_order _Order = memory_order_seq_cst)
  const volatile noexcept
  {
  _Ty _Result;
  this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
  return (_Result);
  }

 _Ty load(memory_order _Order = memory_order_seq_cst)
  const noexcept
  {
  _Ty _Result;
  this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
  return (_Result);
  }

 operator _Ty() const volatile noexcept
  {
  return (load());
  }

 operator _Ty() const noexcept
  {
  return (load());
  }

 _Ty exchange(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
  return (_Value);
  }

 _Ty exchange(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
  return (_Value);
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (this->_Compare_exchange_weak(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (this->_Compare_exchange_weak(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (compare_exchange_weak(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (compare_exchange_weak(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (this->_Compare_exchange_strong(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (this->_Compare_exchange_strong(
   (void *)&_My_val, (void *)&_Exp, (void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (compare_exchange_strong(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (compare_exchange_strong(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }


 static_assert(alignof(_Ty) >= sizeof(_My_int),
  "You've instantiated std::atomic<T> with sizeof(T) equal to 2/4/8 and alignof(T) < sizeof(T). "
  "Before VS 2015 Update 2, this would have misbehaved at runtime. "
  "VS 2015 Update 2 was fixed to handle this correctly, "
  "but the fix inherently changes layout and breaks binary compatibility. "
  "Please define _ENABLE_ATOMIC_ALIGNMENT_FIX to acknowledge that you understand this, "
  "and that everything you're linking has been compiled with VS 2015 Update 2 (or later).");


 alignas(sizeof(_My_int)) alignas(_Ty) _Ty _My_val;
 };


template<class _Ty>
 struct atomic
  : _Atomic_base<_Ty, sizeof (_Ty)>
 {
 static_assert(is_trivially_copyable<_Ty>::value,
  "atomic<T> requires T to be trivially copyable.");

 typedef _Atomic_base<_Ty, sizeof (_Ty)> _My_base;

 atomic() noexcept = default;
 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;

 constexpr atomic(_Ty _Val) noexcept
  : _My_base(_Val)
  {
  }

 _Ty operator=(_Ty _Right) volatile noexcept
  {
  return (_My_base::operator=(_Right));
  }

 _Ty operator=(_Ty _Right) noexcept
  {
  return (_My_base::operator=(_Right));
  }
 };





# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(1 == sizeof (bool),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_bool
 {
 bool operator=(bool) volatile noexcept;
 bool operator=(bool) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(bool, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(bool, memory_order = memory_order_seq_cst)
  noexcept;
 bool load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 bool load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator bool() const volatile noexcept;
 operator bool() const noexcept;
 bool exchange(bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool exchange(bool,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_bool;



template<>
 struct atomic<bool>
  : _Atomic_bool
 {

 atomic() noexcept = default;

 constexpr atomic(bool _Val) noexcept
  : _Atomic_bool{(_Uint1_t)_Val}
  {
  }

 bool operator=(bool _Val) volatile noexcept
  {
  return (_Atomic_bool::operator=(_Val));
  }

 bool operator=(bool _Val) noexcept
  {
  return (_Atomic_bool::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_bool *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_bool *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<bool> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<bool> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<bool> *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<bool> *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline bool atomic_load_explicit(
 const volatile _Atomic_bool *_Atom, memory_order _Order) noexcept
 {
 return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline bool atomic_load_explicit(
 const _Atomic_bool *_Atom, memory_order _Order) noexcept
 {
 return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline bool atomic_load(
 const volatile _Atomic_bool *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline bool atomic_load(
 const _Atomic_bool *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline bool atomic_exchange_explicit(
 volatile _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline bool atomic_exchange_explicit(
 _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline bool atomic_exchange(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_exchange(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_bool *_Atom, bool *_Exp,
  bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_bool *_Atom, bool *_Exp,
  bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline bool _Atomic_bool::operator=(bool _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_bool::operator=(bool _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_bool::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_bool::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_bool::store(bool _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_bool::store(bool _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline bool _Atomic_bool::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline bool _Atomic_bool::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_bool::operator bool() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_bool::operator bool() const noexcept
 {
 return (atomic_load(this));
 }

inline bool _Atomic_bool::exchange(
 bool _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_bool::exchange(
 bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<bool> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<bool> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_bool *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_bool *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_bool *>(_Atom),
  _Value, _Order);
 }

template<>
 inline bool atomic_load(const volatile atomic<bool> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_load(const atomic<bool> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_load_explicit(
  const volatile atomic<bool> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_bool *>(_Atom), _Order));
 }

template<>
 inline bool atomic_load_explicit(
  const atomic<bool> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_bool *>(_Atom), _Order));
 }

template<>
 inline bool atomic_exchange(
  volatile atomic<bool> *_Atom, bool _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_bool *>(_Atom), _Value));
 }

template<>
 inline bool atomic_exchange(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_bool *>(_Atom), _Value));
 }

template<>
 inline bool atomic_exchange_explicit(
  volatile atomic<bool> *_Atom,
   bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Value, _Order));
 }

template<>
 inline bool atomic_exchange_explicit(atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_bool *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<bool> *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }
# 699 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(1 == sizeof (char),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_char
 {
 char operator=(char) volatile noexcept;
 char operator=(char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char, memory_order = memory_order_seq_cst)
  noexcept;
 char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char() const volatile noexcept;
 operator char() const noexcept;
 char exchange(char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char exchange(char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order = memory_order_seq_cst) noexcept;


 char operator++(int) volatile noexcept;
 char operator++(int) noexcept;
 char operator--(int) volatile noexcept;
 char operator--(int) noexcept;
 char operator++() volatile noexcept;
 char operator++() noexcept;
 char operator--() volatile noexcept;
 char operator--() noexcept;
 char operator+=(char) volatile noexcept;
 char operator+=(char) noexcept;
 char operator-=(char) volatile noexcept;
 char operator-=(char) noexcept;
 char operator&=(char) volatile noexcept;
 char operator&=(char) noexcept;
 char operator|=(char) volatile noexcept;
 char operator|=(char) noexcept;
 char operator^=(char) volatile noexcept;
 char operator^=(char) noexcept;

 char fetch_add(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_add(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_sub(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_sub(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_and(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_and(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_or(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_or(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_xor(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_xor(char, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_char;



template<>
 struct atomic<char>
  : _Atomic_char
 {

 atomic() noexcept = default;

 constexpr atomic(char _Val) noexcept
  : _Atomic_char{(_Uint1_t)_Val}
  {
  }

 char operator=(char _Val) volatile noexcept
  {
  return (_Atomic_char::operator=(_Val));
  }

 char operator=(char _Val) noexcept
  {
  return (_Atomic_char::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_char *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<char> *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<char> *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char atomic_load_explicit(
 const volatile _Atomic_char *_Atom, memory_order _Order) noexcept
 {
 return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline char atomic_load_explicit(
 const _Atomic_char *_Atom, memory_order _Order) noexcept
 {
 return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline char atomic_load(
 const volatile _Atomic_char *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char atomic_load(
 const _Atomic_char *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char atomic_exchange_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_exchange_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_exchange(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_exchange(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char *_Atom, char *_Exp,
  char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char *_Atom, char *_Exp,
  char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char _Atomic_char::operator=(char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char _Atomic_char::operator=(char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char::store(char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char::store(char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char _Atomic_char::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char _Atomic_char::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char::operator char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char::operator char() const noexcept
 {
 return (atomic_load(this));
 }

inline char _Atomic_char::exchange(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::exchange(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char atomic_load(const volatile atomic<char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline char atomic_load(const atomic<char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline char atomic_load_explicit(
  const volatile atomic<char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char *>(_Atom), _Order));
 }

template<>
 inline char atomic_load_explicit(
  const atomic<char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char *>(_Atom), _Order));
 }

template<>
 inline char atomic_exchange(
  volatile atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_exchange(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_exchange_explicit(
  volatile atomic<char> *_Atom,
   char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_exchange_explicit(atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char> *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char atomic_fetch_add_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_add_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_add(volatile _Atomic_char *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_add(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_sub_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_sub_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_sub(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_sub(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_and_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_and_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_and(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_and(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_or_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_or_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_or(
 volatile _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_or(
 _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_xor_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_xor_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_xor(
 volatile _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_xor(
 _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char _Atomic_char::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char _Atomic_char::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char _Atomic_char::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char _Atomic_char::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char _Atomic_char::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char _Atomic_char::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char _Atomic_char::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char _Atomic_char::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char _Atomic_char::operator+=(char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char _Atomic_char::operator+=(char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char _Atomic_char::operator-=(char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char _Atomic_char::operator-=(char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char _Atomic_char::operator&=(char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char _Atomic_char::operator&=(char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char _Atomic_char::operator|=(char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char _Atomic_char::operator|=(char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char _Atomic_char::operator^=(char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char _Atomic_char::operator^=(char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char _Atomic_char::fetch_add(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_add(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_sub(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_sub(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_and(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_and(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_or(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_or(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_xor(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_xor(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char atomic_fetch_add(
  volatile atomic<char> *_Atom,
   char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_add(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_add_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_add_explicit(
 atomic<char> *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_sub(
  volatile atomic<char> *_Atom,
   char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_sub(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_sub_explicit(
 volatile atomic<char> *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_sub_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_and(
  volatile atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_and(
  atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_and_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_and_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_or(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_or(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_or_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_or_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_xor(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_xor(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_xor_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_xor_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }
# 705 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(1 == sizeof (signed char),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_schar
 {
 signed char operator=(signed char) volatile noexcept;
 signed char operator=(signed char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(signed char, memory_order = memory_order_seq_cst)
  noexcept;
 signed char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 signed char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator signed char() const volatile noexcept;
 operator signed char() const noexcept;
 signed char exchange(signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 signed char exchange(signed char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order = memory_order_seq_cst) noexcept;


 signed char operator++(int) volatile noexcept;
 signed char operator++(int) noexcept;
 signed char operator--(int) volatile noexcept;
 signed char operator--(int) noexcept;
 signed char operator++() volatile noexcept;
 signed char operator++() noexcept;
 signed char operator--() volatile noexcept;
 signed char operator--() noexcept;
 signed char operator+=(signed char) volatile noexcept;
 signed char operator+=(signed char) noexcept;
 signed char operator-=(signed char) volatile noexcept;
 signed char operator-=(signed char) noexcept;
 signed char operator&=(signed char) volatile noexcept;
 signed char operator&=(signed char) noexcept;
 signed char operator|=(signed char) volatile noexcept;
 signed char operator|=(signed char) noexcept;
 signed char operator^=(signed char) volatile noexcept;
 signed char operator^=(signed char) noexcept;

 signed char fetch_add(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_add(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_sub(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_sub(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_and(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_and(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_or(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_or(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_xor(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_xor(signed char, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_schar;



template<>
 struct atomic<signed char>
  : _Atomic_schar
 {

 atomic() noexcept = default;

 constexpr atomic(signed char _Val) noexcept
  : _Atomic_schar{(_Uint1_t)_Val}
  {
  }

 signed char operator=(signed char _Val) volatile noexcept
  {
  return (_Atomic_schar::operator=(_Val));
  }

 signed char operator=(signed char _Val) noexcept
  {
  return (_Atomic_schar::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_schar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_schar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<signed char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<signed char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<signed char> *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<signed char> *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline signed char atomic_load_explicit(
 const volatile _Atomic_schar *_Atom, memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline signed char atomic_load_explicit(
 const _Atomic_schar *_Atom, memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline signed char atomic_load(
 const volatile _Atomic_schar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline signed char atomic_load(
 const _Atomic_schar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline signed char atomic_exchange_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_exchange_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_exchange(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_exchange(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_schar *_Atom, signed char *_Exp,
  signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_schar *_Atom, signed char *_Exp,
  signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline signed char _Atomic_schar::operator=(signed char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline signed char _Atomic_schar::operator=(signed char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_schar::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_schar::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_schar::store(signed char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_schar::store(signed char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline signed char _Atomic_schar::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline signed char _Atomic_schar::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_schar::operator signed char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_schar::operator signed char() const noexcept
 {
 return (atomic_load(this));
 }

inline signed char _Atomic_schar::exchange(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::exchange(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<signed char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<signed char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_schar *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_schar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_schar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline signed char atomic_load(const volatile atomic<signed char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline signed char atomic_load(const atomic<signed char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline signed char atomic_load_explicit(
  const volatile atomic<signed char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_schar *>(_Atom), _Order));
 }

template<>
 inline signed char atomic_load_explicit(
  const atomic<signed char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_schar *>(_Atom), _Order));
 }

template<>
 inline signed char atomic_exchange(
  volatile atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_exchange(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_exchange_explicit(
  volatile atomic<signed char> *_Atom,
   signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_exchange_explicit(atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_schar *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline signed char atomic_fetch_add_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_add_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_add(volatile _Atomic_schar *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_add(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_sub_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_sub_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_sub(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_sub(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_and_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_and_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_and(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_and(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_or_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_or_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_or(
 volatile _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_or(
 _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_xor_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_xor_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_xor(
 volatile _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_xor(
 _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline signed char _Atomic_schar::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline signed char _Atomic_schar::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline signed char _Atomic_schar::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline signed char _Atomic_schar::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline signed char _Atomic_schar::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline signed char _Atomic_schar::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline signed char _Atomic_schar::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline signed char _Atomic_schar::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline signed char _Atomic_schar::operator+=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline signed char _Atomic_schar::operator+=(signed char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline signed char _Atomic_schar::operator-=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline signed char _Atomic_schar::operator-=(signed char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline signed char _Atomic_schar::operator&=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline signed char _Atomic_schar::operator&=(signed char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline signed char _Atomic_schar::operator|=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline signed char _Atomic_schar::operator|=(signed char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline signed char _Atomic_schar::operator^=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline signed char _Atomic_schar::operator^=(signed char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline signed char _Atomic_schar::fetch_add(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_add(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_sub(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_sub(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_and(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_and(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_or(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_or(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_xor(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_xor(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline signed char atomic_fetch_add(
  volatile atomic<signed char> *_Atom,
   signed char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_add(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_add_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_add_explicit(
 atomic<signed char> *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_sub(
  volatile atomic<signed char> *_Atom,
   signed char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_sub(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_sub_explicit(
 volatile atomic<signed char> *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_sub_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_and(
  volatile atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_and(
  atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_and_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_and_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_or(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_or(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_or_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_or_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_xor(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_xor(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_xor_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_xor_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }
# 711 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(1 == sizeof (unsigned char),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_uchar
 {
 unsigned char operator=(unsigned char) volatile noexcept;
 unsigned char operator=(unsigned char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned char, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned char() const volatile noexcept;
 operator unsigned char() const noexcept;
 unsigned char exchange(unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned char exchange(unsigned char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned char operator++(int) volatile noexcept;
 unsigned char operator++(int) noexcept;
 unsigned char operator--(int) volatile noexcept;
 unsigned char operator--(int) noexcept;
 unsigned char operator++() volatile noexcept;
 unsigned char operator++() noexcept;
 unsigned char operator--() volatile noexcept;
 unsigned char operator--() noexcept;
 unsigned char operator+=(unsigned char) volatile noexcept;
 unsigned char operator+=(unsigned char) noexcept;
 unsigned char operator-=(unsigned char) volatile noexcept;
 unsigned char operator-=(unsigned char) noexcept;
 unsigned char operator&=(unsigned char) volatile noexcept;
 unsigned char operator&=(unsigned char) noexcept;
 unsigned char operator|=(unsigned char) volatile noexcept;
 unsigned char operator|=(unsigned char) noexcept;
 unsigned char operator^=(unsigned char) volatile noexcept;
 unsigned char operator^=(unsigned char) noexcept;

 unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_uchar;



template<>
 struct atomic<unsigned char>
  : _Atomic_uchar
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned char _Val) noexcept
  : _Atomic_uchar{(_Uint1_t)_Val}
  {
  }

 unsigned char operator=(unsigned char _Val) volatile noexcept
  {
  return (_Atomic_uchar::operator=(_Val));
  }

 unsigned char operator=(unsigned char _Val) noexcept
  {
  return (_Atomic_uchar::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_uchar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_uchar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<unsigned char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned char> *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<unsigned char> *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned char atomic_load_explicit(
 const volatile _Atomic_uchar *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline unsigned char atomic_load_explicit(
 const _Atomic_uchar *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline unsigned char atomic_load(
 const volatile _Atomic_uchar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned char atomic_load(
 const _Atomic_uchar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned char atomic_exchange_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_exchange_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_exchange(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_exchange(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp,
  unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_uchar *_Atom, unsigned char *_Exp,
  unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_uchar::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_uchar::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_uchar::store(unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_uchar::store(unsigned char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned char _Atomic_uchar::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned char _Atomic_uchar::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_uchar::operator unsigned char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_uchar::operator unsigned char() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned char _Atomic_uchar::exchange(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::exchange(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_uchar *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_uchar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_uchar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned char atomic_load(const volatile atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline unsigned char atomic_load(const atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline unsigned char atomic_load_explicit(
  const volatile atomic<unsigned char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_uchar *>(_Atom), _Order));
 }

template<>
 inline unsigned char atomic_load_explicit(
  const atomic<unsigned char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_uchar *>(_Atom), _Order));
 }

template<>
 inline unsigned char atomic_exchange(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_exchange(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_exchange_explicit(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_exchange_explicit(atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_uchar *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned char atomic_fetch_add_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_add_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_add(volatile _Atomic_uchar *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_add(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_sub_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_sub_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_sub(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_sub(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_and_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_and_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_and(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_and(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_or_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_or_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_or(
 volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_or(
 _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_xor_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_xor_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_xor(
 volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_xor(
 _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned char _Atomic_uchar::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned char _Atomic_uchar::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned char _Atomic_uchar::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned char _Atomic_uchar::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned char _Atomic_uchar::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned char _Atomic_uchar::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned char _Atomic_uchar::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned char _Atomic_uchar::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned char _Atomic_uchar::fetch_add(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_add(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_sub(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_sub(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_and(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_and(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_or(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_or(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_xor(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_xor(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned char atomic_fetch_add(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_add(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_add_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_add_explicit(
 atomic<unsigned char> *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_sub(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_sub(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_sub_explicit(
 volatile atomic<unsigned char> *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_sub_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_and(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_and(
  atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_and_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_and_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_or(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_or(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_or_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_or_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_xor(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_xor(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_xor_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_xor_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }
# 717 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(2 == sizeof (char16_t),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_char16_t
 {
 char16_t operator=(char16_t) volatile noexcept;
 char16_t operator=(char16_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char16_t, memory_order = memory_order_seq_cst)
  noexcept;
 char16_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char16_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char16_t() const volatile noexcept;
 operator char16_t() const noexcept;
 char16_t exchange(char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char16_t exchange(char16_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) noexcept;


 char16_t operator++(int) volatile noexcept;
 char16_t operator++(int) noexcept;
 char16_t operator--(int) volatile noexcept;
 char16_t operator--(int) noexcept;
 char16_t operator++() volatile noexcept;
 char16_t operator++() noexcept;
 char16_t operator--() volatile noexcept;
 char16_t operator--() noexcept;
 char16_t operator+=(char16_t) volatile noexcept;
 char16_t operator+=(char16_t) noexcept;
 char16_t operator-=(char16_t) volatile noexcept;
 char16_t operator-=(char16_t) noexcept;
 char16_t operator&=(char16_t) volatile noexcept;
 char16_t operator&=(char16_t) noexcept;
 char16_t operator|=(char16_t) volatile noexcept;
 char16_t operator|=(char16_t) noexcept;
 char16_t operator^=(char16_t) volatile noexcept;
 char16_t operator^=(char16_t) noexcept;

 char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_char16_t;



template<>
 struct atomic<char16_t>
  : _Atomic_char16_t
 {

 atomic() noexcept = default;

 constexpr atomic(char16_t _Val) noexcept
  : _Atomic_char16_t{(_Uint2_t)_Val}
  {
  }

 char16_t operator=(char16_t _Val) volatile noexcept
  {
  return (_Atomic_char16_t::operator=(_Val));
  }

 char16_t operator=(char16_t _Val) noexcept
  {
  return (_Atomic_char16_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char16_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_char16_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<char16_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<char16_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<char16_t> *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<char16_t> *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char16_t atomic_load_explicit(
 const volatile _Atomic_char16_t *_Atom, memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline char16_t atomic_load_explicit(
 const _Atomic_char16_t *_Atom, memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline char16_t atomic_load(
 const volatile _Atomic_char16_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char16_t atomic_load(
 const _Atomic_char16_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char16_t atomic_exchange_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_exchange_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_exchange(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_exchange(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp,
  char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char16_t *_Atom, char16_t *_Exp,
  char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char16_t _Atomic_char16_t::operator=(char16_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char16_t _Atomic_char16_t::operator=(char16_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char16_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char16_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char16_t::store(char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char16_t::store(char16_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char16_t _Atomic_char16_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char16_t _Atomic_char16_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char16_t::operator char16_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char16_t::operator char16_t() const noexcept
 {
 return (atomic_load(this));
 }

inline char16_t _Atomic_char16_t::exchange(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::exchange(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char16_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char16_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char16_t atomic_load(const volatile atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline char16_t atomic_load(const atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline char16_t atomic_load_explicit(
  const volatile atomic<char16_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char16_t *>(_Atom), _Order));
 }

template<>
 inline char16_t atomic_load_explicit(
  const atomic<char16_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char16_t *>(_Atom), _Order));
 }

template<>
 inline char16_t atomic_exchange(
  volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_exchange(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_exchange_explicit(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_exchange_explicit(atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char16_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char16_t atomic_fetch_add_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_add_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_add(volatile _Atomic_char16_t *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_add(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_sub_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_sub_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_sub(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_sub(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_and_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_and_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_and(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_and(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_or_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_or_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_or(
 volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_or(
 _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_xor_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_xor_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_xor(
 volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_xor(
 _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char16_t _Atomic_char16_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char16_t _Atomic_char16_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char16_t _Atomic_char16_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char16_t _Atomic_char16_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char16_t _Atomic_char16_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char16_t _Atomic_char16_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char16_t _Atomic_char16_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char16_t _Atomic_char16_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char16_t _Atomic_char16_t::fetch_add(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_add(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_sub(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_sub(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_and(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_and(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_or(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_or(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_xor(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_xor(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char16_t atomic_fetch_add(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_add(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_add_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_add_explicit(
 atomic<char16_t> *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_sub(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_sub(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_sub_explicit(
 volatile atomic<char16_t> *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_sub_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_and(
  volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_and(
  atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_and_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_and_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_or(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_or(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_or_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_or_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_xor(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_xor(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_xor_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_xor_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }
# 723 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (char32_t),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_char32_t
 {
 char32_t operator=(char32_t) volatile noexcept;
 char32_t operator=(char32_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char32_t, memory_order = memory_order_seq_cst)
  noexcept;
 char32_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char32_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char32_t() const volatile noexcept;
 operator char32_t() const noexcept;
 char32_t exchange(char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char32_t exchange(char32_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) noexcept;


 char32_t operator++(int) volatile noexcept;
 char32_t operator++(int) noexcept;
 char32_t operator--(int) volatile noexcept;
 char32_t operator--(int) noexcept;
 char32_t operator++() volatile noexcept;
 char32_t operator++() noexcept;
 char32_t operator--() volatile noexcept;
 char32_t operator--() noexcept;
 char32_t operator+=(char32_t) volatile noexcept;
 char32_t operator+=(char32_t) noexcept;
 char32_t operator-=(char32_t) volatile noexcept;
 char32_t operator-=(char32_t) noexcept;
 char32_t operator&=(char32_t) volatile noexcept;
 char32_t operator&=(char32_t) noexcept;
 char32_t operator|=(char32_t) volatile noexcept;
 char32_t operator|=(char32_t) noexcept;
 char32_t operator^=(char32_t) volatile noexcept;
 char32_t operator^=(char32_t) noexcept;

 char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_char32_t;



template<>
 struct atomic<char32_t>
  : _Atomic_char32_t
 {

 atomic() noexcept = default;

 constexpr atomic(char32_t _Val) noexcept
  : _Atomic_char32_t{(_Uint4_t)_Val}
  {
  }

 char32_t operator=(char32_t _Val) volatile noexcept
  {
  return (_Atomic_char32_t::operator=(_Val));
  }

 char32_t operator=(char32_t _Val) noexcept
  {
  return (_Atomic_char32_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char32_t *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_char32_t *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<char32_t> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<char32_t> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<char32_t> *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<char32_t> *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char32_t atomic_load_explicit(
 const volatile _Atomic_char32_t *_Atom, memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline char32_t atomic_load_explicit(
 const _Atomic_char32_t *_Atom, memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline char32_t atomic_load(
 const volatile _Atomic_char32_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char32_t atomic_load(
 const _Atomic_char32_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char32_t atomic_exchange_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_exchange_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_exchange(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_exchange(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp,
  char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char32_t *_Atom, char32_t *_Exp,
  char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char32_t _Atomic_char32_t::operator=(char32_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char32_t _Atomic_char32_t::operator=(char32_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char32_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char32_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char32_t::store(char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char32_t::store(char32_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char32_t _Atomic_char32_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char32_t _Atomic_char32_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char32_t::operator char32_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char32_t::operator char32_t() const noexcept
 {
 return (atomic_load(this));
 }

inline char32_t _Atomic_char32_t::exchange(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::exchange(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char32_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char32_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char32_t atomic_load(const volatile atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline char32_t atomic_load(const atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline char32_t atomic_load_explicit(
  const volatile atomic<char32_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char32_t *>(_Atom), _Order));
 }

template<>
 inline char32_t atomic_load_explicit(
  const atomic<char32_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char32_t *>(_Atom), _Order));
 }

template<>
 inline char32_t atomic_exchange(
  volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_exchange(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_exchange_explicit(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_exchange_explicit(atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char32_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char32_t atomic_fetch_add_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_add_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_add(volatile _Atomic_char32_t *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_add(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_sub_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_sub_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_sub(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_sub(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_and_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_and_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_and(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_and(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_or_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_or_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_or(
 volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_or(
 _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_xor_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_xor_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_xor(
 volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_xor(
 _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char32_t _Atomic_char32_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char32_t _Atomic_char32_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char32_t _Atomic_char32_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char32_t _Atomic_char32_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char32_t _Atomic_char32_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char32_t _Atomic_char32_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char32_t _Atomic_char32_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char32_t _Atomic_char32_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char32_t _Atomic_char32_t::fetch_add(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_add(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_sub(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_sub(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_and(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_and(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_or(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_or(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_xor(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_xor(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char32_t atomic_fetch_add(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_add(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_add_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_add_explicit(
 atomic<char32_t> *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_sub(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_sub(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_sub_explicit(
 volatile atomic<char32_t> *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_sub_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_and(
  volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_and(
  atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_and_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_and_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_or(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_or(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_or_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_or_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_xor(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_xor(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_xor_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_xor_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }
# 729 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3
# 740 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(2 == sizeof (wchar_t),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_wchar_t
 {
 wchar_t operator=(wchar_t) volatile noexcept;
 wchar_t operator=(wchar_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(wchar_t, memory_order = memory_order_seq_cst)
  noexcept;
 wchar_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 wchar_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator wchar_t() const volatile noexcept;
 operator wchar_t() const noexcept;
 wchar_t exchange(wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 wchar_t exchange(wchar_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) noexcept;


 wchar_t operator++(int) volatile noexcept;
 wchar_t operator++(int) noexcept;
 wchar_t operator--(int) volatile noexcept;
 wchar_t operator--(int) noexcept;
 wchar_t operator++() volatile noexcept;
 wchar_t operator++() noexcept;
 wchar_t operator--() volatile noexcept;
 wchar_t operator--() noexcept;
 wchar_t operator+=(wchar_t) volatile noexcept;
 wchar_t operator+=(wchar_t) noexcept;
 wchar_t operator-=(wchar_t) volatile noexcept;
 wchar_t operator-=(wchar_t) noexcept;
 wchar_t operator&=(wchar_t) volatile noexcept;
 wchar_t operator&=(wchar_t) noexcept;
 wchar_t operator|=(wchar_t) volatile noexcept;
 wchar_t operator|=(wchar_t) noexcept;
 wchar_t operator^=(wchar_t) volatile noexcept;
 wchar_t operator^=(wchar_t) noexcept;

 wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_wchar_t;



template<>
 struct atomic<wchar_t>
  : _Atomic_wchar_t
 {

 atomic() noexcept = default;

 constexpr atomic(wchar_t _Val) noexcept
  : _Atomic_wchar_t{(_Uint2_t)_Val}
  {
  }

 wchar_t operator=(wchar_t _Val) volatile noexcept
  {
  return (_Atomic_wchar_t::operator=(_Val));
  }

 wchar_t operator=(wchar_t _Val) noexcept
  {
  return (_Atomic_wchar_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_wchar_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_wchar_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<wchar_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<wchar_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<wchar_t> *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<wchar_t> *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline wchar_t atomic_load_explicit(
 const volatile _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline wchar_t atomic_load_explicit(
 const _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline wchar_t atomic_load(
 const volatile _Atomic_wchar_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline wchar_t atomic_load(
 const _Atomic_wchar_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline wchar_t atomic_exchange_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_exchange_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_exchange(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_exchange(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp,
  wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp,
  wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_wchar_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_wchar_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_wchar_t::store(wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_wchar_t::store(wchar_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline wchar_t _Atomic_wchar_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline wchar_t _Atomic_wchar_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_wchar_t::operator wchar_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_wchar_t::operator wchar_t() const noexcept
 {
 return (atomic_load(this));
 }

inline wchar_t _Atomic_wchar_t::exchange(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::exchange(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_wchar_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline wchar_t atomic_load(const volatile atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline wchar_t atomic_load(const atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline wchar_t atomic_load_explicit(
  const volatile atomic<wchar_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_wchar_t *>(_Atom), _Order));
 }

template<>
 inline wchar_t atomic_load_explicit(
  const atomic<wchar_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_wchar_t *>(_Atom), _Order));
 }

template<>
 inline wchar_t atomic_exchange(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_exchange(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_exchange_explicit(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_exchange_explicit(atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline wchar_t atomic_fetch_add_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_add_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_add(volatile _Atomic_wchar_t *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_add(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_sub_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_sub_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_sub(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_sub(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_and_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_and_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_and(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_and(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_or_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_or_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_or(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_or(
 _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_xor_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_xor_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_xor(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_xor(
 _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline wchar_t _Atomic_wchar_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline wchar_t _Atomic_wchar_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline wchar_t _Atomic_wchar_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline wchar_t _Atomic_wchar_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline wchar_t _Atomic_wchar_t::fetch_add(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_add(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_sub(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_sub(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_and(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_and(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_or(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_or(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_xor(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_xor(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline wchar_t atomic_fetch_add(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_add(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_add_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_add_explicit(
 atomic<wchar_t> *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_sub(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_sub(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_sub_explicit(
 volatile atomic<wchar_t> *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_sub_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_and(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_and(
  atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_and_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_and_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_or(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_or(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_or_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_or_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_xor(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_xor(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_xor_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_xor_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }
# 740 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(2 == sizeof (short),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_short
 {
 short operator=(short) volatile noexcept;
 short operator=(short) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(short, memory_order = memory_order_seq_cst)
  noexcept;
 short load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 short load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator short() const volatile noexcept;
 operator short() const noexcept;
 short exchange(short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 short exchange(short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order = memory_order_seq_cst) noexcept;


 short operator++(int) volatile noexcept;
 short operator++(int) noexcept;
 short operator--(int) volatile noexcept;
 short operator--(int) noexcept;
 short operator++() volatile noexcept;
 short operator++() noexcept;
 short operator--() volatile noexcept;
 short operator--() noexcept;
 short operator+=(short) volatile noexcept;
 short operator+=(short) noexcept;
 short operator-=(short) volatile noexcept;
 short operator-=(short) noexcept;
 short operator&=(short) volatile noexcept;
 short operator&=(short) noexcept;
 short operator|=(short) volatile noexcept;
 short operator|=(short) noexcept;
 short operator^=(short) volatile noexcept;
 short operator^=(short) noexcept;

 short fetch_add(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_add(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_sub(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_sub(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_and(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_and(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_or(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_or(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_xor(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_xor(short, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_short;



template<>
 struct atomic<short>
  : _Atomic_short
 {

 atomic() noexcept = default;

 constexpr atomic(short _Val) noexcept
  : _Atomic_short{(_Uint2_t)_Val}
  {
  }

 short operator=(short _Val) volatile noexcept
  {
  return (_Atomic_short::operator=(_Val));
  }

 short operator=(short _Val) noexcept
  {
  return (_Atomic_short::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_short *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_short *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<short> *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<short> *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline short atomic_load_explicit(
 const volatile _Atomic_short *_Atom, memory_order _Order) noexcept
 {
 return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline short atomic_load_explicit(
 const _Atomic_short *_Atom, memory_order _Order) noexcept
 {
 return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline short atomic_load(
 const volatile _Atomic_short *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline short atomic_load(
 const _Atomic_short *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline short atomic_exchange_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_exchange_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_exchange(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_exchange(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_short *_Atom, short *_Exp,
  short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_short *_Atom, short *_Exp,
  short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline short _Atomic_short::operator=(short _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline short _Atomic_short::operator=(short _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_short::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_short::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_short::store(short _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_short::store(short _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline short _Atomic_short::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline short _Atomic_short::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_short::operator short() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_short::operator short() const noexcept
 {
 return (atomic_load(this));
 }

inline short _Atomic_short::exchange(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::exchange(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_short *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_short *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_short *>(_Atom),
  _Value, _Order);
 }

template<>
 inline short atomic_load(const volatile atomic<short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline short atomic_load(const atomic<short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline short atomic_load_explicit(
  const volatile atomic<short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_short *>(_Atom), _Order));
 }

template<>
 inline short atomic_load_explicit(
  const atomic<short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_short *>(_Atom), _Order));
 }

template<>
 inline short atomic_exchange(
  volatile atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_exchange(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_exchange_explicit(
  volatile atomic<short> *_Atom,
   short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_exchange_explicit(atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_short *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<short> *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline short atomic_fetch_add_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_add_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_add(volatile _Atomic_short *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_add(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_sub_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_sub_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_sub(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_sub(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_and_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_and_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_and(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_and(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_or_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_or_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_or(
 volatile _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_or(
 _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_xor_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_xor_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_xor(
 volatile _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_xor(
 _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline short _Atomic_short::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline short _Atomic_short::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline short _Atomic_short::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline short _Atomic_short::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline short _Atomic_short::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline short _Atomic_short::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline short _Atomic_short::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline short _Atomic_short::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline short _Atomic_short::operator+=(short _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline short _Atomic_short::operator+=(short _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline short _Atomic_short::operator-=(short _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline short _Atomic_short::operator-=(short _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline short _Atomic_short::operator&=(short _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline short _Atomic_short::operator&=(short _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline short _Atomic_short::operator|=(short _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline short _Atomic_short::operator|=(short _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline short _Atomic_short::operator^=(short _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline short _Atomic_short::operator^=(short _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline short _Atomic_short::fetch_add(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_add(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_sub(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_sub(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_and(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_and(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_or(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_or(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_xor(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_xor(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline short atomic_fetch_add(
  volatile atomic<short> *_Atom,
   short _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_add(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_add_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_add_explicit(
 atomic<short> *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_sub(
  volatile atomic<short> *_Atom,
   short _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_sub(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_sub_explicit(
 volatile atomic<short> *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_sub_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_and(
  volatile atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_and(
  atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_and_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_and_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_or(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_or(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_or_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_or_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_xor(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_xor(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_xor_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_xor_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }
# 746 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(2 == sizeof (unsigned short),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_ushort
 {
 unsigned short operator=(unsigned short) volatile noexcept;
 unsigned short operator=(unsigned short) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned short, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned short load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned short load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned short() const volatile noexcept;
 operator unsigned short() const noexcept;
 unsigned short exchange(unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned short exchange(unsigned short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned short operator++(int) volatile noexcept;
 unsigned short operator++(int) noexcept;
 unsigned short operator--(int) volatile noexcept;
 unsigned short operator--(int) noexcept;
 unsigned short operator++() volatile noexcept;
 unsigned short operator++() noexcept;
 unsigned short operator--() volatile noexcept;
 unsigned short operator--() noexcept;
 unsigned short operator+=(unsigned short) volatile noexcept;
 unsigned short operator+=(unsigned short) noexcept;
 unsigned short operator-=(unsigned short) volatile noexcept;
 unsigned short operator-=(unsigned short) noexcept;
 unsigned short operator&=(unsigned short) volatile noexcept;
 unsigned short operator&=(unsigned short) noexcept;
 unsigned short operator|=(unsigned short) volatile noexcept;
 unsigned short operator|=(unsigned short) noexcept;
 unsigned short operator^=(unsigned short) volatile noexcept;
 unsigned short operator^=(unsigned short) noexcept;

 unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_ushort;



template<>
 struct atomic<unsigned short>
  : _Atomic_ushort
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned short _Val) noexcept
  : _Atomic_ushort{(_Uint2_t)_Val}
  {
  }

 unsigned short operator=(unsigned short _Val) volatile noexcept
  {
  return (_Atomic_ushort::operator=(_Val));
  }

 unsigned short operator=(unsigned short _Val) noexcept
  {
  return (_Atomic_ushort::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ushort *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_ushort *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<unsigned short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned short> *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<unsigned short> *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned short atomic_load_explicit(
 const volatile _Atomic_ushort *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline unsigned short atomic_load_explicit(
 const _Atomic_ushort *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline unsigned short atomic_load(
 const volatile _Atomic_ushort *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned short atomic_load(
 const _Atomic_ushort *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned short atomic_exchange_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_exchange_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_exchange(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_exchange(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp,
  unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ushort *_Atom, unsigned short *_Exp,
  unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ushort::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ushort::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ushort::store(unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ushort::store(unsigned short _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned short _Atomic_ushort::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned short _Atomic_ushort::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ushort::operator unsigned short() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ushort::operator unsigned short() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned short _Atomic_ushort::exchange(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::exchange(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ushort *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ushort *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ushort *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned short atomic_load(const volatile atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline unsigned short atomic_load(const atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline unsigned short atomic_load_explicit(
  const volatile atomic<unsigned short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ushort *>(_Atom), _Order));
 }

template<>
 inline unsigned short atomic_load_explicit(
  const atomic<unsigned short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ushort *>(_Atom), _Order));
 }

template<>
 inline unsigned short atomic_exchange(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_exchange(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_exchange_explicit(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_exchange_explicit(atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ushort *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned short atomic_fetch_add_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_add_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_add(volatile _Atomic_ushort *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_add(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_sub_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_sub_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_sub(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_sub(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_and_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_and_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_and(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_and(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_or_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_or_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_or(
 volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_or(
 _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_xor_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_xor_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_xor(
 volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_xor(
 _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned short _Atomic_ushort::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned short _Atomic_ushort::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned short _Atomic_ushort::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned short _Atomic_ushort::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned short _Atomic_ushort::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned short _Atomic_ushort::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned short _Atomic_ushort::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned short _Atomic_ushort::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned short _Atomic_ushort::fetch_add(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_add(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_sub(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_sub(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_and(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_and(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_or(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_or(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_xor(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_xor(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned short atomic_fetch_add(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_add(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_add_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_add_explicit(
 atomic<unsigned short> *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_sub(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_sub(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_sub_explicit(
 volatile atomic<unsigned short> *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_sub_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_and(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_and(
  atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_and_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_and_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_or(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_or(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_or_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_or_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_xor(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_xor(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_xor_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_xor_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }
# 752 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (int),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_int
 {
 int operator=(int) volatile noexcept;
 int operator=(int) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(int, memory_order = memory_order_seq_cst)
  noexcept;
 int load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 int load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator int() const volatile noexcept;
 operator int() const noexcept;
 int exchange(int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 int exchange(int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order = memory_order_seq_cst) noexcept;


 int operator++(int) volatile noexcept;
 int operator++(int) noexcept;
 int operator--(int) volatile noexcept;
 int operator--(int) noexcept;
 int operator++() volatile noexcept;
 int operator++() noexcept;
 int operator--() volatile noexcept;
 int operator--() noexcept;
 int operator+=(int) volatile noexcept;
 int operator+=(int) noexcept;
 int operator-=(int) volatile noexcept;
 int operator-=(int) noexcept;
 int operator&=(int) volatile noexcept;
 int operator&=(int) noexcept;
 int operator|=(int) volatile noexcept;
 int operator|=(int) noexcept;
 int operator^=(int) volatile noexcept;
 int operator^=(int) noexcept;

 int fetch_add(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_add(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_sub(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_sub(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_and(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_and(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_or(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_or(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_xor(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_xor(int, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_int;



template<>
 struct atomic<int>
  : _Atomic_int
 {

 atomic() noexcept = default;

 constexpr atomic(int _Val) noexcept
  : _Atomic_int{(_Uint4_t)_Val}
  {
  }

 int operator=(int _Val) volatile noexcept
  {
  return (_Atomic_int::operator=(_Val));
  }

 int operator=(int _Val) noexcept
  {
  return (_Atomic_int::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_int *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_int *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<int> *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<int> *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline int atomic_load_explicit(
 const volatile _Atomic_int *_Atom, memory_order _Order) noexcept
 {
 return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline int atomic_load_explicit(
 const _Atomic_int *_Atom, memory_order _Order) noexcept
 {
 return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline int atomic_load(
 const volatile _Atomic_int *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline int atomic_load(
 const _Atomic_int *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline int atomic_exchange_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_exchange_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_exchange(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_exchange(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_int *_Atom, int *_Exp,
  int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_int *_Atom, int *_Exp,
  int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline int _Atomic_int::operator=(int _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline int _Atomic_int::operator=(int _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_int::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_int::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_int::store(int _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_int::store(int _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline int _Atomic_int::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline int _Atomic_int::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_int::operator int() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_int::operator int() const noexcept
 {
 return (atomic_load(this));
 }

inline int _Atomic_int::exchange(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::exchange(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_int *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_int *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_int *>(_Atom),
  _Value, _Order);
 }

template<>
 inline int atomic_load(const volatile atomic<int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline int atomic_load(const atomic<int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline int atomic_load_explicit(
  const volatile atomic<int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_int *>(_Atom), _Order));
 }

template<>
 inline int atomic_load_explicit(
  const atomic<int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_int *>(_Atom), _Order));
 }

template<>
 inline int atomic_exchange(
  volatile atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_exchange(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_exchange_explicit(
  volatile atomic<int> *_Atom,
   int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_exchange_explicit(atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_int *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<int> *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline int atomic_fetch_add_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_add_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_add(volatile _Atomic_int *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_add(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_sub_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_sub_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_sub(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_sub(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_and_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_and_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_and(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_and(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_or_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_or_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_or(
 volatile _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_or(
 _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_xor_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_xor_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_xor(
 volatile _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_xor(
 _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline int _Atomic_int::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline int _Atomic_int::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline int _Atomic_int::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline int _Atomic_int::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline int _Atomic_int::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline int _Atomic_int::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline int _Atomic_int::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline int _Atomic_int::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline int _Atomic_int::operator+=(int _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline int _Atomic_int::operator+=(int _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline int _Atomic_int::operator-=(int _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline int _Atomic_int::operator-=(int _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline int _Atomic_int::operator&=(int _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline int _Atomic_int::operator&=(int _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline int _Atomic_int::operator|=(int _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline int _Atomic_int::operator|=(int _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline int _Atomic_int::operator^=(int _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline int _Atomic_int::operator^=(int _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline int _Atomic_int::fetch_add(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_add(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_sub(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_sub(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_and(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_and(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_or(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_or(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_xor(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_xor(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline int atomic_fetch_add(
  volatile atomic<int> *_Atom,
   int _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_add(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_add_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_add_explicit(
 atomic<int> *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_sub(
  volatile atomic<int> *_Atom,
   int _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_sub(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_sub_explicit(
 volatile atomic<int> *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_sub_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_and(
  volatile atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_and(
  atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_and_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_and_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_or(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_or(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_or_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_or_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_xor(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_xor(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_xor_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_xor_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }
# 758 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (unsigned int),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_uint
 {
 unsigned int operator=(unsigned int) volatile noexcept;
 unsigned int operator=(unsigned int) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned int, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned int load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned int load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned int() const volatile noexcept;
 operator unsigned int() const noexcept;
 unsigned int exchange(unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned int exchange(unsigned int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned int operator++(int) volatile noexcept;
 unsigned int operator++(int) noexcept;
 unsigned int operator--(int) volatile noexcept;
 unsigned int operator--(int) noexcept;
 unsigned int operator++() volatile noexcept;
 unsigned int operator++() noexcept;
 unsigned int operator--() volatile noexcept;
 unsigned int operator--() noexcept;
 unsigned int operator+=(unsigned int) volatile noexcept;
 unsigned int operator+=(unsigned int) noexcept;
 unsigned int operator-=(unsigned int) volatile noexcept;
 unsigned int operator-=(unsigned int) noexcept;
 unsigned int operator&=(unsigned int) volatile noexcept;
 unsigned int operator&=(unsigned int) noexcept;
 unsigned int operator|=(unsigned int) volatile noexcept;
 unsigned int operator|=(unsigned int) noexcept;
 unsigned int operator^=(unsigned int) volatile noexcept;
 unsigned int operator^=(unsigned int) noexcept;

 unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_uint;



template<>
 struct atomic<unsigned int>
  : _Atomic_uint
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned int _Val) noexcept
  : _Atomic_uint{(_Uint4_t)_Val}
  {
  }

 unsigned int operator=(unsigned int _Val) volatile noexcept
  {
  return (_Atomic_uint::operator=(_Val));
  }

 unsigned int operator=(unsigned int _Val) noexcept
  {
  return (_Atomic_uint::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_uint *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_uint *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<unsigned int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned int> *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<unsigned int> *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned int atomic_load_explicit(
 const volatile _Atomic_uint *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned int atomic_load_explicit(
 const _Atomic_uint *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned int atomic_load(
 const volatile _Atomic_uint *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned int atomic_load(
 const _Atomic_uint *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned int atomic_exchange_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_exchange_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_exchange(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_exchange(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp,
  unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_uint *_Atom, unsigned int *_Exp,
  unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned int _Atomic_uint::operator=(unsigned int _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned int _Atomic_uint::operator=(unsigned int _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_uint::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_uint::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_uint::store(unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_uint::store(unsigned int _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned int _Atomic_uint::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned int _Atomic_uint::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_uint::operator unsigned int() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_uint::operator unsigned int() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned int _Atomic_uint::exchange(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::exchange(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_uint *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_uint *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_uint *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned int atomic_load(const volatile atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline unsigned int atomic_load(const atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline unsigned int atomic_load_explicit(
  const volatile atomic<unsigned int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_uint *>(_Atom), _Order));
 }

template<>
 inline unsigned int atomic_load_explicit(
  const atomic<unsigned int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_uint *>(_Atom), _Order));
 }

template<>
 inline unsigned int atomic_exchange(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_exchange(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_exchange_explicit(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_exchange_explicit(atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_uint *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned int atomic_fetch_add_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_add_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_add(volatile _Atomic_uint *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_add(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_sub_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_sub_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_sub(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_sub(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_and_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_and_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_and(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_and(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_or_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_or_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_or(
 volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_or(
 _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_xor_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_xor_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_xor(
 volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_xor(
 _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned int _Atomic_uint::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned int _Atomic_uint::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned int _Atomic_uint::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned int _Atomic_uint::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned int _Atomic_uint::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned int _Atomic_uint::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned int _Atomic_uint::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned int _Atomic_uint::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned int _Atomic_uint::fetch_add(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_add(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_sub(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_sub(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_and(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_and(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_or(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_or(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_xor(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_xor(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned int atomic_fetch_add(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_add(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_add_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_add_explicit(
 atomic<unsigned int> *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_sub(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_sub(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_sub_explicit(
 volatile atomic<unsigned int> *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_sub_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_and(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_and(
  atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_and_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_and_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_or(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_or(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_or_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_or_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_xor(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_xor(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_xor_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_xor_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }
# 764 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (long),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_long
 {
 long operator=(long) volatile noexcept;
 long operator=(long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(long, memory_order = memory_order_seq_cst)
  noexcept;
 long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator long() const volatile noexcept;
 operator long() const noexcept;
 long exchange(long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 long exchange(long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order = memory_order_seq_cst) noexcept;


 long operator++(int) volatile noexcept;
 long operator++(int) noexcept;
 long operator--(int) volatile noexcept;
 long operator--(int) noexcept;
 long operator++() volatile noexcept;
 long operator++() noexcept;
 long operator--() volatile noexcept;
 long operator--() noexcept;
 long operator+=(long) volatile noexcept;
 long operator+=(long) noexcept;
 long operator-=(long) volatile noexcept;
 long operator-=(long) noexcept;
 long operator&=(long) volatile noexcept;
 long operator&=(long) noexcept;
 long operator|=(long) volatile noexcept;
 long operator|=(long) noexcept;
 long operator^=(long) volatile noexcept;
 long operator^=(long) noexcept;

 long fetch_add(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_add(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_sub(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_sub(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_and(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_and(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_or(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_or(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_xor(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_xor(long, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_long;



template<>
 struct atomic<long>
  : _Atomic_long
 {

 atomic() noexcept = default;

 constexpr atomic(long _Val) noexcept
  : _Atomic_long{(_Uint4_t)_Val}
  {
  }

 long operator=(long _Val) volatile noexcept
  {
  return (_Atomic_long::operator=(_Val));
  }

 long operator=(long _Val) noexcept
  {
  return (_Atomic_long::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_long *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_long *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<long> *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<long> *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline long atomic_load_explicit(
 const volatile _Atomic_long *_Atom, memory_order _Order) noexcept
 {
 return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline long atomic_load_explicit(
 const _Atomic_long *_Atom, memory_order _Order) noexcept
 {
 return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline long atomic_load(
 const volatile _Atomic_long *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long atomic_load(
 const _Atomic_long *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long atomic_exchange_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_exchange_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_exchange(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_exchange(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_long *_Atom, long *_Exp,
  long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_long *_Atom, long *_Exp,
  long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline long _Atomic_long::operator=(long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline long _Atomic_long::operator=(long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_long::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_long::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_long::store(long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_long::store(long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline long _Atomic_long::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline long _Atomic_long::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_long::operator long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_long::operator long() const noexcept
 {
 return (atomic_load(this));
 }

inline long _Atomic_long::exchange(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::exchange(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_long *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_long *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_long *>(_Atom),
  _Value, _Order);
 }

template<>
 inline long atomic_load(const volatile atomic<long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline long atomic_load(const atomic<long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline long atomic_load_explicit(
  const volatile atomic<long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_long *>(_Atom), _Order));
 }

template<>
 inline long atomic_load_explicit(
  const atomic<long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_long *>(_Atom), _Order));
 }

template<>
 inline long atomic_exchange(
  volatile atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_exchange(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_exchange_explicit(
  volatile atomic<long> *_Atom,
   long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_exchange_explicit(atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_long *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<long> *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline long atomic_fetch_add_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_add_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_add(volatile _Atomic_long *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_add(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_sub_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_sub_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_sub(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_sub(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_and_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_and_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_and(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_and(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_or_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_or_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_or(
 volatile _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_or(
 _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_xor_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_xor_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_xor(
 volatile _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_xor(
 _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline long _Atomic_long::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long _Atomic_long::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long _Atomic_long::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long _Atomic_long::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long _Atomic_long::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long _Atomic_long::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long _Atomic_long::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long _Atomic_long::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long _Atomic_long::operator+=(long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long _Atomic_long::operator+=(long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long _Atomic_long::operator-=(long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long _Atomic_long::operator-=(long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long _Atomic_long::operator&=(long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long _Atomic_long::operator&=(long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long _Atomic_long::operator|=(long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long _Atomic_long::operator|=(long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long _Atomic_long::operator^=(long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long _Atomic_long::operator^=(long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long _Atomic_long::fetch_add(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_add(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_sub(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_sub(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_and(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_and(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_or(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_or(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_xor(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_xor(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline long atomic_fetch_add(
  volatile atomic<long> *_Atom,
   long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_add(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_add_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_add_explicit(
 atomic<long> *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_sub(
  volatile atomic<long> *_Atom,
   long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_sub(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_sub_explicit(
 volatile atomic<long> *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_sub_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_and(
  volatile atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_and(
  atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_and_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_and_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_or(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_or(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_or_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_or_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_xor(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_xor(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_xor_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_xor_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }
# 770 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (unsigned long),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_ulong
 {
 unsigned long operator=(unsigned long) volatile noexcept;
 unsigned long operator=(unsigned long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned long, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned long() const volatile noexcept;
 operator unsigned long() const noexcept;
 unsigned long exchange(unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned long exchange(unsigned long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned long operator++(int) volatile noexcept;
 unsigned long operator++(int) noexcept;
 unsigned long operator--(int) volatile noexcept;
 unsigned long operator--(int) noexcept;
 unsigned long operator++() volatile noexcept;
 unsigned long operator++() noexcept;
 unsigned long operator--() volatile noexcept;
 unsigned long operator--() noexcept;
 unsigned long operator+=(unsigned long) volatile noexcept;
 unsigned long operator+=(unsigned long) noexcept;
 unsigned long operator-=(unsigned long) volatile noexcept;
 unsigned long operator-=(unsigned long) noexcept;
 unsigned long operator&=(unsigned long) volatile noexcept;
 unsigned long operator&=(unsigned long) noexcept;
 unsigned long operator|=(unsigned long) volatile noexcept;
 unsigned long operator|=(unsigned long) noexcept;
 unsigned long operator^=(unsigned long) volatile noexcept;
 unsigned long operator^=(unsigned long) noexcept;

 unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_ulong;



template<>
 struct atomic<unsigned long>
  : _Atomic_ulong
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned long _Val) noexcept
  : _Atomic_ulong{(_Uint4_t)_Val}
  {
  }

 unsigned long operator=(unsigned long _Val) volatile noexcept
  {
  return (_Atomic_ulong::operator=(_Val));
  }

 unsigned long operator=(unsigned long _Val) noexcept
  {
  return (_Atomic_ulong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ulong *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_ulong *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<unsigned long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned long> *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<unsigned long> *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned long atomic_load_explicit(
 const volatile _Atomic_ulong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long atomic_load_explicit(
 const _Atomic_ulong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long atomic_load(
 const volatile _Atomic_ulong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long atomic_load(
 const _Atomic_ulong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long atomic_exchange_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_exchange_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_exchange(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_exchange(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp,
  unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ulong *_Atom, unsigned long *_Exp,
  unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ulong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ulong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ulong::store(unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ulong::store(unsigned long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned long _Atomic_ulong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned long _Atomic_ulong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ulong::operator unsigned long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ulong::operator unsigned long() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned long _Atomic_ulong::exchange(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::exchange(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ulong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ulong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ulong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned long atomic_load(const volatile atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline unsigned long atomic_load(const atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline unsigned long atomic_load_explicit(
  const volatile atomic<unsigned long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ulong *>(_Atom), _Order));
 }

template<>
 inline unsigned long atomic_load_explicit(
  const atomic<unsigned long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ulong *>(_Atom), _Order));
 }

template<>
 inline unsigned long atomic_exchange(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_exchange(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_exchange_explicit(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_exchange_explicit(atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ulong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned long atomic_fetch_add_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_add_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_add(volatile _Atomic_ulong *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_add(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_sub_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_sub_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_sub(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_sub(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_and_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_and_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_and(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_and(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_or_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_or_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_or(
 volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_or(
 _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_xor_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_xor_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_xor(
 volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_xor(
 _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned long _Atomic_ulong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long _Atomic_ulong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long _Atomic_ulong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long _Atomic_ulong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long _Atomic_ulong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long _Atomic_ulong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long _Atomic_ulong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long _Atomic_ulong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long _Atomic_ulong::fetch_add(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_add(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_sub(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_sub(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_and(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_and(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_or(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_or(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_xor(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_xor(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned long atomic_fetch_add(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_add(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_add_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_add_explicit(
 atomic<unsigned long> *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_sub(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_sub(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_sub_explicit(
 volatile atomic<unsigned long> *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_sub_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_and(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_and(
  atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_and_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_and_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_or(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_or(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_or_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_or_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_xor(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_xor(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_xor_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_xor_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }
# 776 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(8 == sizeof (long long),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_llong
 {
 long long operator=(long long) volatile noexcept;
 long long operator=(long long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(long long, memory_order = memory_order_seq_cst)
  noexcept;
 long long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 long long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator long long() const volatile noexcept;
 operator long long() const noexcept;
 long long exchange(long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 long long exchange(long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order = memory_order_seq_cst) noexcept;


 long long operator++(int) volatile noexcept;
 long long operator++(int) noexcept;
 long long operator--(int) volatile noexcept;
 long long operator--(int) noexcept;
 long long operator++() volatile noexcept;
 long long operator++() noexcept;
 long long operator--() volatile noexcept;
 long long operator--() noexcept;
 long long operator+=(long long) volatile noexcept;
 long long operator+=(long long) noexcept;
 long long operator-=(long long) volatile noexcept;
 long long operator-=(long long) noexcept;
 long long operator&=(long long) volatile noexcept;
 long long operator&=(long long) noexcept;
 long long operator|=(long long) volatile noexcept;
 long long operator|=(long long) noexcept;
 long long operator^=(long long) volatile noexcept;
 long long operator^=(long long) noexcept;

 long long fetch_add(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_add(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_sub(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_sub(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_and(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_and(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_or(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_or(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_xor(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_xor(long long, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;




 } _Atomic_llong;



template<>
 struct atomic<long long>
  : _Atomic_llong
 {

 atomic() noexcept = default;

 constexpr atomic(long long _Val) noexcept
  : _Atomic_llong{(_Uint8_t)_Val}
  {
  }

 long long operator=(long long _Val) volatile noexcept
  {
  return (_Atomic_llong::operator=(_Val));
  }

 long long operator=(long long _Val) noexcept
  {
  return (_Atomic_llong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_llong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const _Atomic_llong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }


inline bool atomic_is_lock_free(const volatile atomic<long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const atomic<long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }



inline void atomic_init(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_init(volatile atomic<long long> *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(atomic<long long> *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline long long atomic_load_explicit(
 const volatile _Atomic_llong *_Atom, memory_order _Order) noexcept
 {
 return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline long long atomic_load_explicit(
 const _Atomic_llong *_Atom, memory_order _Order) noexcept
 {
 return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline long long atomic_load(
 const volatile _Atomic_llong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long long atomic_load(
 const _Atomic_llong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long long atomic_exchange_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_exchange_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_exchange(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_exchange(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_llong *_Atom, long long *_Exp,
  long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_llong *_Atom, long long *_Exp,
  long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline long long _Atomic_llong::operator=(long long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline long long _Atomic_llong::operator=(long long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_llong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_llong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_llong::store(long long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_llong::store(long long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline long long _Atomic_llong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline long long _Atomic_llong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_llong::operator long long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_llong::operator long long() const noexcept
 {
 return (atomic_load(this));
 }

inline long long _Atomic_llong::exchange(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::exchange(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_llong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_llong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_llong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline long long atomic_load(const volatile atomic<long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline long long atomic_load(const atomic<long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline long long atomic_load_explicit(
  const volatile atomic<long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_llong *>(_Atom), _Order));
 }

template<>
 inline long long atomic_load_explicit(
  const atomic<long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_llong *>(_Atom), _Order));
 }

template<>
 inline long long atomic_exchange(
  volatile atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_exchange(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_exchange_explicit(
  volatile atomic<long long> *_Atom,
   long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_exchange_explicit(atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_llong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<long long> *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline long long atomic_fetch_add_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_add_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_add(volatile _Atomic_llong *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_add(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_sub_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_sub_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_sub(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_sub(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_and_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_and_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_and(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_and(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_or_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_or_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_or(
 volatile _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_or(
 _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_xor_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_xor_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_xor(
 volatile _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_xor(
 _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline long long _Atomic_llong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long long _Atomic_llong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long long _Atomic_llong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long long _Atomic_llong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long long _Atomic_llong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long long _Atomic_llong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long long _Atomic_llong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long long _Atomic_llong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long long _Atomic_llong::operator+=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long long _Atomic_llong::operator+=(long long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long long _Atomic_llong::operator-=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long long _Atomic_llong::operator-=(long long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long long _Atomic_llong::operator&=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long long _Atomic_llong::operator&=(long long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long long _Atomic_llong::operator|=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long long _Atomic_llong::operator|=(long long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long long _Atomic_llong::operator^=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long long _Atomic_llong::operator^=(long long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long long _Atomic_llong::fetch_add(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_add(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_sub(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_sub(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_and(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_and(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_or(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_or(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_xor(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_xor(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline long long atomic_fetch_add(
  volatile atomic<long long> *_Atom,
   long long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_add(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_add_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_add_explicit(
 atomic<long long> *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_sub(
  volatile atomic<long long> *_Atom,
   long long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_sub(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_sub_explicit(
 volatile atomic<long long> *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_sub_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_and(
  volatile atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_and(
  atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_and_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_and_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_or(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_or(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_or_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_or_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_xor(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_xor(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_xor_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_xor_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }
# 782 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(8 == sizeof (unsigned long long),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_ullong
 {
 unsigned long long operator=(unsigned long long) volatile noexcept;
 unsigned long long operator=(unsigned long long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned long long, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned long long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned long long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned long long() const volatile noexcept;
 operator unsigned long long() const noexcept;
 unsigned long long exchange(unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned long long exchange(unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned long long operator++(int) volatile noexcept;
 unsigned long long operator++(int) noexcept;
 unsigned long long operator--(int) volatile noexcept;
 unsigned long long operator--(int) noexcept;
 unsigned long long operator++() volatile noexcept;
 unsigned long long operator++() noexcept;
 unsigned long long operator--() volatile noexcept;
 unsigned long long operator--() noexcept;
 unsigned long long operator+=(unsigned long long) volatile noexcept;
 unsigned long long operator+=(unsigned long long) noexcept;
 unsigned long long operator-=(unsigned long long) volatile noexcept;
 unsigned long long operator-=(unsigned long long) noexcept;
 unsigned long long operator&=(unsigned long long) volatile noexcept;
 unsigned long long operator&=(unsigned long long) noexcept;
 unsigned long long operator|=(unsigned long long) volatile noexcept;
 unsigned long long operator|=(unsigned long long) noexcept;
 unsigned long long operator^=(unsigned long long) volatile noexcept;
 unsigned long long operator^=(unsigned long long) noexcept;

 unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
# 169 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;




 } _Atomic_ullong;



template<>
 struct atomic<unsigned long long>
  : _Atomic_ullong
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned long long _Val) noexcept
  : _Atomic_ullong{(_Uint8_t)_Val}
  {
  }

 unsigned long long operator=(unsigned long long _Val) volatile noexcept
  {
  return (_Atomic_ullong::operator=(_Val));
  }

 unsigned long long operator=(unsigned long long _Val) noexcept
  {
  return (_Atomic_ullong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ullong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const _Atomic_ullong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const atomic<unsigned long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }



inline void atomic_init(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(atomic<unsigned long long> *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned long long atomic_load_explicit(
 const volatile _Atomic_ullong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long long atomic_load_explicit(
 const _Atomic_ullong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long long atomic_load(
 const volatile _Atomic_ullong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long long atomic_load(
 const _Atomic_ullong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long long atomic_exchange_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_exchange_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_exchange(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_exchange(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp,
  unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ullong *_Atom, unsigned long long *_Exp,
  unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ullong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ullong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ullong::store(unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ullong::store(unsigned long long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned long long _Atomic_ullong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned long long _Atomic_ullong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ullong::operator unsigned long long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ullong::operator unsigned long long() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned long long _Atomic_ullong::exchange(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::exchange(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ullong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ullong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ullong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned long long atomic_load(const volatile atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline unsigned long long atomic_load(const atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline unsigned long long atomic_load_explicit(
  const volatile atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ullong *>(_Atom), _Order));
 }

template<>
 inline unsigned long long atomic_load_explicit(
  const atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ullong *>(_Atom), _Order));
 }

template<>
 inline unsigned long long atomic_exchange(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_exchange(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_exchange_explicit(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_exchange_explicit(atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ullong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned long long atomic_fetch_add_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_add_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_add(volatile _Atomic_ullong *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_add(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_sub_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_sub_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_sub(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_sub(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_and_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_and_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_and(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_and(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_or_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_or_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_or(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_or(
 _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_xor_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_xor_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_xor(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_xor(
 _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned long long _Atomic_ullong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long long _Atomic_ullong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long long _Atomic_ullong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long long _Atomic_ullong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long long _Atomic_ullong::fetch_add(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_add(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_sub(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_sub(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_and(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_and(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_or(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_or(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_xor(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_xor(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned long long atomic_fetch_add(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_add(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_add_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_add_explicit(
 atomic<unsigned long long> *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_sub(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_sub(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_sub_explicit(
 volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_sub_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_and(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_and(
  atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_and_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_and_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_or(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_or(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_or_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_or_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_xor(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_xor(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_xor_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_xor_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }
# 788 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3







# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 1 3
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
static_assert(4 == sizeof (void *),
 "_ISIZE and _ITYPE should match.");
# 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
typedef struct _Atomic_address
 {
 void * operator=(void *) volatile noexcept;
 void * operator=(void *) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(void *, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(void *, memory_order = memory_order_seq_cst)
  noexcept;
 void * load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 void * load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator void *() const volatile noexcept;
 operator void *() const noexcept;
 void * exchange(void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * exchange(void *,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order = memory_order_seq_cst) noexcept;
# 146 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 void * fetch_add(ptrdiff_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * fetch_add(ptrdiff_t,
  memory_order = memory_order_seq_cst) noexcept;
 void * fetch_sub(ptrdiff_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * fetch_sub(ptrdiff_t,
  memory_order = memory_order_seq_cst) noexcept;
 void * operator+=(ptrdiff_t) volatile noexcept;
 void * operator+=(ptrdiff_t) noexcept;
 void * operator-=(ptrdiff_t) volatile noexcept;
 void * operator-=(ptrdiff_t) noexcept;
# 171 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
 _Uint4_t _My_val;


 } _Atomic_address;
# 208 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
template<class _Ty>
 struct atomic<_Ty *>
  : _Atomic_address
 {
 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;

 atomic() noexcept = default;

 constexpr atomic(_Ty *_Right) noexcept
  : _Atomic_address{(_Uint4_t)_Right}
  {
  }

 _Ty *operator=(_Ty *_Right) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::operator=((void *)_Right)));
  }

 _Ty *operator=(_Ty *_Right) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::operator=((void *)_Right)));
  }

 void store(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  _Atomic_address::store((void *)_Value, _Order);
  }

 void store(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  _Atomic_address::store((void *)_Value, _Order);
  }

 _Ty *load(memory_order _Order = memory_order_seq_cst)
  const volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
  }

 _Ty *load(memory_order _Order = memory_order_seq_cst)
  const noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
  }

 operator _Ty *() const volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
  }

 operator _Ty *() const noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
  }

 _Ty *exchange(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
   (void *)_Value, _Order)));
  }

 _Ty *exchange(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
   (void *)_Value, _Order)));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
   memory_order _Order1,
   memory_order _Order2) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1,
  memory_order _Order2) noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 typedef typename _If<is_object<_Ty>::value, _Ty, char>::type _Obj;

 _Ty *fetch_add(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_add(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_sub(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_sub(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *operator++(int) volatile noexcept
  {
  return (fetch_add(1));
  }

 _Ty *operator++(int) noexcept
  {
  return (fetch_add(1));
  }

 _Ty *operator--(int) volatile noexcept
  {
  return (fetch_sub(1));
  }

 _Ty *operator--(int) noexcept
  {
  return (fetch_sub(1));
  }

 _Ty *operator+=(ptrdiff_t _Right) volatile noexcept
  {
  return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
  }

 _Ty *operator+=(ptrdiff_t _Right) noexcept
  {
  return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
  }

 _Ty *operator-=(ptrdiff_t _Right) volatile noexcept
  {
  return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
  }

 _Ty *operator-=(ptrdiff_t _Right) noexcept
  {
  return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
  }

 _Ty *operator++() volatile noexcept
  {
  return (*this += 1);
  }

 _Ty *operator++() noexcept
  {
  return (*this += 1);
  }

 _Ty *operator--() volatile noexcept
  {
  return (*this -= 1);
  }

 _Ty *operator--() noexcept
  {
  return (*this -= 1);
  }
 };




inline bool atomic_is_lock_free(const volatile _Atomic_address *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_address *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }
# 466 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline void atomic_init(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }
# 496 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline void atomic_store_explicit(
 volatile _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void * atomic_load_explicit(
 const volatile _Atomic_address *_Atom, memory_order _Order) noexcept
 {
 return ((void *)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline void * atomic_load_explicit(
 const _Atomic_address *_Atom, memory_order _Order) noexcept
 {
 return ((void *)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline void * atomic_load(
 const volatile _Atomic_address *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline void * atomic_load(
 const _Atomic_address *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline void * atomic_exchange_explicit(
 volatile _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 return ((void *)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_exchange_explicit(
 _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 return ((void *)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_exchange(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_exchange(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_address *_Atom, void * *_Exp,
  void * _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_address *_Atom, void * *_Exp,
  void * _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline void * _Atomic_address::operator=(void * _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline void * _Atomic_address::operator=(void * _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_address::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_address::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_address::store(void * _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_address::store(void * _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void * _Atomic_address::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline void * _Atomic_address::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_address::operator void *() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_address::operator void *() const noexcept
 {
 return (atomic_load(this));
 }

inline void * _Atomic_address::exchange(
 void * _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::exchange(
 void * _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }
# 1419 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic" 3
inline void * atomic_fetch_add_explicit(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_fetch_add_explicit(
 _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_fetch_add(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_add(
 _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_sub_explicit(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_fetch_sub_explicit(
 _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline void * atomic_fetch_sub(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_sub(
 _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline void * _Atomic_address::fetch_add(
 ptrdiff_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_add(
 ptrdiff_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_sub(
 ptrdiff_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_sub(
 ptrdiff_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) volatile noexcept
 {
 return ((char*)fetch_add(_Right) + _Right);
 }

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) noexcept
 {
 return ((char*)fetch_add(_Right) + _Right);
 }

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) volatile noexcept
 {
 return ((char*)fetch_sub(_Right) - _Right);
 }

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) noexcept
 {
 return ((char*)fetch_sub(_Right) - _Right);
 }
# 795 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic" 2 3



template <class _Ty>
 inline bool atomic_is_lock_free(
  const volatile atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->is_lock_free());
 }

template <class _Ty>
 inline bool atomic_is_lock_free(
  const atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->is_lock_free());
 }

template <class _Ty>
 inline void atomic_init(
  volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
 {
 *_Atom = _Value;
 }

template <class _Ty>
 inline void atomic_init(
  atomic<_Ty> *_Atom, _Ty _Value) noexcept
 {
 *_Atom = _Value;
 }

template <class _Ty>
 inline void atomic_store(volatile atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 _Atom->store(_Value);
 }

template <class _Ty>
 inline void atomic_store(atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 _Atom->store(_Value);
 }

template <class _Ty>
 inline void atomic_store_explicit(
  volatile atomic<_Ty> *_Atom, _Ty _Value,
   memory_order _Order) noexcept
 {
 _Atom->store(_Value, _Order);
 }

template <class _Ty>
 inline void atomic_store_explicit(
  atomic<_Ty> *_Atom, _Ty _Value,
   memory_order _Order) noexcept
 {
 _Atom->store(_Value, _Order);
 }

template <class _Ty>
 inline _Ty atomic_load(const volatile atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->load());
 }

template <class _Ty>
 inline _Ty atomic_load(const atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->load());
 }

template <class _Ty>
 inline _Ty atomic_load_explicit(
  const volatile atomic<_Ty> *_Atom,
   memory_order _Order) noexcept
 {
 return (_Atom->load(_Order));
 }

template <class _Ty>
 inline _Ty atomic_load_explicit(
  const atomic<_Ty> *_Atom,
   memory_order _Order) noexcept
 {
 return (_Atom->load(_Order));
 }

template <class _Ty>
 inline _Ty atomic_exchange(volatile atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 return (_Atom->exchange(_Value));
 }

template <class _Ty>
 inline _Ty atomic_exchange(atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 return (_Atom->exchange(_Value));
 }

template <class _Ty>
 inline _Ty atomic_exchange_explicit(volatile atomic<_Ty> *_Atom,
  _Ty _Value, memory_order _Order) noexcept
 {
 return (_Atom->exchange(_Value, _Order));
 }

template <class _Ty>
 inline _Ty atomic_exchange_explicit(atomic<_Ty> *_Atom, _Ty _Value,
  memory_order _Order) noexcept
 {
 return (_Atom->exchange(_Value, _Order));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
 }


template <class _Ty>
 inline _Ty *atomic_fetch_add(volatile atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_add(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add(atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_add(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add_explicit(
  volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_add(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add_explicit(
  atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_add(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub(volatile atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_sub(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub(atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_sub(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub_explicit(
  volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_sub(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub_explicit(
  atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_sub(_Value, _Order));
 }


extern "C" inline void atomic_thread_fence(memory_order _Order) noexcept
 {
 return (_Atomic_thread_fence(_Order));
 }

extern "C" inline void atomic_signal_fence(memory_order _Order) noexcept
 {
 return (_Atomic_signal_fence(_Order));
 }


typedef atomic<bool> atomic_bool;

typedef atomic<char> atomic_char;
typedef atomic<signed char> atomic_schar;
typedef atomic<unsigned char> atomic_uchar;
typedef atomic<short> atomic_short;
typedef atomic<unsigned short> atomic_ushort;
typedef atomic<int> atomic_int;
typedef atomic<unsigned int> atomic_uint;
typedef atomic<long> atomic_long;
typedef atomic<unsigned long> atomic_ulong;
typedef atomic<long long> atomic_llong;
typedef atomic<unsigned long long> atomic_ullong;

typedef atomic<char16_t> atomic_char16_t;
typedef atomic<char32_t> atomic_char32_t;

typedef atomic<wchar_t> atomic_wchar_t;

typedef atomic<int8_t> atomic_int8_t;
typedef atomic<uint8_t> atomic_uint8_t;
typedef atomic<int16_t> atomic_int16_t;
typedef atomic<uint16_t> atomic_uint16_t;
typedef atomic<int32_t> atomic_int32_t;
typedef atomic<uint32_t> atomic_uint32_t;
typedef atomic<int64_t> atomic_int64_t;
typedef atomic<uint64_t> atomic_uint64_t;

typedef atomic<int_least8_t> atomic_int_least8_t;
typedef atomic<uint_least8_t> atomic_uint_least8_t;
typedef atomic<int_least16_t> atomic_int_least16_t;
typedef atomic<uint_least16_t> atomic_uint_least16_t;
typedef atomic<int_least32_t> atomic_int_least32_t;
typedef atomic<uint_least32_t> atomic_uint_least32_t;
typedef atomic<int_least64_t> atomic_int_least64_t;
typedef atomic<uint_least64_t> atomic_uint_least64_t;

typedef atomic<int_fast8_t> atomic_int_fast8_t;
typedef atomic<uint_fast8_t> atomic_uint_fast8_t;
typedef atomic<int_fast16_t> atomic_int_fast16_t;
typedef atomic<uint_fast16_t> atomic_uint_fast16_t;
typedef atomic<int_fast32_t> atomic_int_fast32_t;
typedef atomic<uint_fast32_t> atomic_uint_fast32_t;
typedef atomic<int_fast64_t> atomic_int_fast64_t;
typedef atomic<uint_fast64_t> atomic_uint_fast64_t;

typedef atomic<intptr_t> atomic_intptr_t;
typedef atomic<uintptr_t> atomic_uintptr_t;
typedef atomic<size_t> atomic_size_t;
typedef atomic<ptrdiff_t> atomic_ptrdiff_t;
typedef atomic<intmax_t> atomic_intmax_t;
typedef atomic<uintmax_t> atomic_uintmax_t;
}

#pragma warning(pop)
#pragma pack(pop)
# 19 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp" 2



namespace boost
{

namespace detail
{

inline void atomic_increment( std::atomic_int_least32_t * pw )
{
    pw->fetch_add( 1, std::memory_order_relaxed );
}

inline std::int_least32_t atomic_decrement( std::atomic_int_least32_t * pw )
{
    return pw->fetch_sub( 1, std::memory_order_acq_rel );
}

inline std::int_least32_t atomic_conditional_increment( std::atomic_int_least32_t * pw )
{




    std::int_least32_t r = pw->load( std::memory_order_relaxed );

    for( ;; )
    {
        if( r == 0 )
        {
            return r;
        }

        if( pw->compare_exchange_weak( r, r + 1, std::memory_order_relaxed, std::memory_order_relaxed ) )
        {
            return r;
        }
    }
}

class sp_counted_base
{
private:

    sp_counted_base( sp_counted_base const & );
    sp_counted_base & operator= ( sp_counted_base const & );

    std::atomic_int_least32_t use_count_;
    std::atomic_int_least32_t weak_count_;

public:

    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
    {
    }

    virtual ~sp_counted_base()
    {
    }




    virtual void dispose() = 0;



    virtual void destroy()
    {
        delete this;
    }

    virtual void * get_deleter( sp_typeinfo const & ti ) = 0;
    virtual void * get_local_deleter( sp_typeinfo const & ti ) = 0;
    virtual void * get_untyped_deleter() = 0;

    void add_ref_copy()
    {
        atomic_increment( &use_count_ );
    }

    bool add_ref_lock()
    {
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release()
    {
        if( atomic_decrement( &use_count_ ) == 1 )
        {
            dispose();
            weak_release();
        }
    }

    void weak_add_ref()
    {
        atomic_increment( &weak_count_ );
    }

    void weak_release()
    {
        if( atomic_decrement( &weak_count_ ) == 1 )
        {
            destroy();
        }
    }

    long use_count() const
    {
        return use_count_.load( std::memory_order_acquire );
    }
};

}

}
# 48 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_base.hpp" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp" 1
# 29 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/core/addressof.hpp" 1
# 34 "D:\\my_project\\boost_1_65_1\\boost/core/addressof.hpp"
namespace boost {

template<class T>
                inline T*
addressof(T& o)
{
    return __builtin_addressof(o);
}

}
# 29 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp" 2
# 41 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
namespace boost
{
# 51 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
namespace detail
{



template<class D> class local_sp_deleter;

template<class D> D * get_local_deleter( D * )
{
    return 0;
}

template<class D> D * get_local_deleter( local_sp_deleter<D> * p );



template<class X> class sp_counted_impl_p: public sp_counted_base
{
private:

    X * px_;

    sp_counted_impl_p( sp_counted_impl_p const & );
    sp_counted_impl_p & operator= ( sp_counted_impl_p const & );

    typedef sp_counted_impl_p<X> this_type;

public:

    explicit sp_counted_impl_p( X * px ): px_( px )
    {



    }

    virtual void dispose()
    {



        boost::checked_delete( px_ );
    }

    virtual void * get_deleter( sp_typeinfo const & )
    {
        return 0;
    }

    virtual void * get_local_deleter( sp_typeinfo const & )
    {
        return 0;
    }

    virtual void * get_untyped_deleter()
    {
        return 0;
    }
# 137 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};
# 146 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
template<class P, class D> class sp_counted_impl_pd: public sp_counted_base
{
private:

    P ptr;
    D del;

    sp_counted_impl_pd( sp_counted_impl_pd const & );
    sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );

    typedef sp_counted_impl_pd<P, D> this_type;

public:



    sp_counted_impl_pd( P p, D & d ): ptr( p ), del( d )
    {
    }

    sp_counted_impl_pd( P p ): ptr( p ), del()
    {
    }

    virtual void dispose()
    {
        del( ptr );
    }

    virtual void * get_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( del ): 0;
    }

    virtual void * get_local_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? boost::detail::get_local_deleter( boost::addressof( del ) ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( del );
    }
# 217 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};

template<class P, class D, class A> class sp_counted_impl_pda: public sp_counted_base
{
private:

    P p_;
    D d_;
    A a_;

    sp_counted_impl_pda( sp_counted_impl_pda const & );
    sp_counted_impl_pda & operator= ( sp_counted_impl_pda const & );

    typedef sp_counted_impl_pda<P, D, A> this_type;

public:



    sp_counted_impl_pda( P p, D & d, A a ): p_( p ), d_( d ), a_( a )
    {
    }

    sp_counted_impl_pda( P p, A a ): p_( p ), d_( a ), a_( a )
    {
    }

    virtual void dispose()
    {
        d_( p_ );
    }

    virtual void destroy()
    {


        typedef typename std::allocator_traits<A>::template rebind_alloc< this_type > A2;







        A2 a2( a_ );

        this->~this_type();

        a2.deallocate( this, 1 );
    }

    virtual void * get_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( d_ ): 0;
    }

    virtual void * get_local_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? boost::detail::get_local_deleter( boost::addressof( d_ ) ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( d_ );
    }
};





}

}
# 30 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_disable_deprecated.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp" 2
# 51 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
namespace boost
{

namespace movelib
{

template< class T, class D > class unique_ptr;

}

namespace detail
{
# 71 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
struct sp_nothrow_tag {};

template< class D > struct sp_inplace_tag
{
};

template< class T > class sp_reference_wrapper
{
public:

    explicit sp_reference_wrapper( T & t): t_( boost::addressof( t ) )
    {
    }

    template< class Y > void operator()( Y * p ) const
    {
        (*t_)( p );
    }

private:

    T * t_;
};

template< class D > struct sp_convert_reference
{
    typedef D type;
};

template< class D > struct sp_convert_reference< D& >
{
    typedef sp_reference_wrapper< D > type;
};

class weak_count;

class shared_count
{
private:

    sp_counted_base * pi_;





    friend class weak_count;

public:

                    shared_count(): pi_(0)



    {
    }

                    explicit shared_count( sp_counted_base * pi ): pi_( pi )



    {
    }

    template<class Y> explicit shared_count( Y * p ): pi_( 0 )



    {


        try
        {
            pi_ = new sp_counted_impl_p<Y>( p );
        }
        catch(...)
        {
            boost::checked_delete( p );
            throw;
        }
# 163 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    }




    template<class P, class D> shared_count( P p, D d ): pi_(0)




    {





        try
        {
            pi_ = new sp_counted_impl_pd<P, D>(p, d);
        }
        catch(...)
        {
            d(p);
            throw;
        }
# 200 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D > shared_count( P p, sp_inplace_tag<D> ): pi_( 0 )



    {


        try
        {
            pi_ = new sp_counted_impl_pd< P, D >( p );
        }
        catch( ... )
        {
            D::operator_fn( p );
            throw;
        }
# 232 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )



    {
        typedef sp_counted_impl_pda<P, D, A> impl_type;



        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;







        A2 a2( a );



        try
        {
            pi_ = a2.allocate( 1 );
            ::new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );
        }
        catch(...)
        {
            d( p );

            if( pi_ != 0 )
            {
                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
            }

            throw;
        }
# 289 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D, class A > shared_count( P p, sp_inplace_tag< D >, A a ): pi_( 0 )



    {
        typedef sp_counted_impl_pda< P, D, A > impl_type;



        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;







        A2 a2( a );



        try
        {
            pi_ = a2.allocate( 1 );
            ::new( static_cast< void* >( pi_ ) ) impl_type( p, a );
        }
        catch(...)
        {
            D::operator_fn( p );

            if( pi_ != 0 )
            {
                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
            }

            throw;
        }
# 346 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    }







    template<class Y>
    explicit shared_count( std::auto_ptr<Y> & r ): pi_( new sp_counted_impl_p<Y>( r.get() ) )



    {
# 369 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }





    template<class Y, class D>
    explicit shared_count( std::unique_ptr<Y, D> & r ): pi_( 0 )



    {
        typedef typename sp_convert_reference<D>::type D2;

        D2 d2( r.get_deleter() );
        pi_ = new sp_counted_impl_pd< typename std::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );
# 396 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }



    template<class Y, class D>
    explicit shared_count( boost::movelib::unique_ptr<Y, D> & r ): pi_( 0 )



    {
        typedef typename sp_convert_reference<D>::type D2;

        D2 d2( r.get_deleter() );
        pi_ = new sp_counted_impl_pd< typename boost::movelib::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );
# 421 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }

    ~shared_count()
    {
        if( pi_ != 0 ) pi_->release();



    }

    shared_count(shared_count const & r): pi_(r.pi_)



    {
        if( pi_ != 0 ) pi_->add_ref_copy();
    }
# 452 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    explicit shared_count(weak_count const & r);
    shared_count( weak_count const & r, sp_nothrow_tag );

    shared_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if( tmp != 0 ) tmp->add_ref_copy();
            if( pi_ != 0 ) pi_->release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(shared_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool unique() const
    {
        return use_count() == 1;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(shared_count const & a, shared_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(shared_count const & a, shared_count const & b)
    {
        return std::less<sp_counted_base *>()( a.pi_, b.pi_ );
    }

    void * get_deleter( sp_typeinfo const & ti ) const
    {
        return pi_? pi_->get_deleter( ti ): 0;
    }

    void * get_local_deleter( sp_typeinfo const & ti ) const
    {
        return pi_? pi_->get_local_deleter( ti ): 0;
    }

    void * get_untyped_deleter() const
    {
        return pi_? pi_->get_untyped_deleter(): 0;
    }
};


class weak_count
{
private:

    sp_counted_base * pi_;





    friend class shared_count;

public:

                    weak_count(): pi_(0)



    {
    }

    weak_count(shared_count const & r): pi_(r.pi_)



    {
        if(pi_ != 0) pi_->weak_add_ref();
    }

    weak_count(weak_count const & r): pi_(r.pi_)



    {
        if(pi_ != 0) pi_->weak_add_ref();
    }
# 569 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/shared_count.hpp"
    ~weak_count()
    {
        if(pi_ != 0) pi_->weak_release();



    }

    weak_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    weak_count & operator= (weak_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(weak_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(weak_count const & a, weak_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(weak_count const & a, weak_count const & b)
    {
        return std::less<sp_counted_base *>()(a.pi_, b.pi_);
    }
};

inline shared_count::shared_count( weak_count const & r ): pi_( r.pi_ )



{
    if( pi_ == 0 || !pi_->add_ref_lock() )
    {
        boost::throw_exception( boost::bad_weak_ptr() );
    }
}

inline shared_count::shared_count( weak_count const & r, sp_nothrow_tag ): pi_( r.pi_ )



{
    if( pi_ != 0 && !pi_->add_ref_lock() )
    {
        pi_ = 0;
    }
}

}

}
# 28 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_convertible.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_convertible.hpp"
namespace boost
{

namespace detail
{

template< class Y, class T > struct sp_convertible
{
    typedef char (&yes) [1];
    typedef char (&no) [2];

    static yes f( T* );
    static no f( ... );

    enum _vt { value = sizeof( (f)( static_cast<Y*>(0) ) ) == sizeof(yes) };
};

template< class Y, class T > struct sp_convertible< Y, T[] >
{
    enum _vt { value = false };
};

template< class Y, class T > struct sp_convertible< Y[], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

template< class Y, std::size_t N, class T > struct sp_convertible< Y[N], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

struct sp_empty
{
};

template< bool > struct sp_enable_if_convertible_impl;

template<> struct sp_enable_if_convertible_impl<true>
{
    typedef sp_empty type;
};

template<> struct sp_enable_if_convertible_impl<false>
{
};

template< class Y, class T > struct sp_enable_if_convertible: public sp_enable_if_convertible_impl< sp_convertible< Y, T >::value >
{
};

}

}
# 30 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_nullptr_t.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/sp_noexcept.hpp" 1
# 33 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_pool.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_pool.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock.hpp" 1
# 47 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_std_atomic.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_std_atomic.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/language.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/language.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdc.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/language.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdcpp.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdcpp.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/stdcpp.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/language.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/language/objc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/objc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/language/objc.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/language.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/alpha.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/alpha.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/alpha.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/arm.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/arm.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/arm.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/blackfin.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/blackfin.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/blackfin.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/convex.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/convex.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/convex.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ia64.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ia64.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ia64.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/m68k.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/m68k.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/m68k.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/mips.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/mips.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/mips.h" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/parisc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/parisc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/parisc.h" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ppc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ppc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/ppc.h" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/pyramid.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/pyramid.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/pyramid.h" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/rs6k.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/rs6k.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/rs6k.h" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sparc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sparc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sparc.h" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/superh.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/superh.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/superh.h" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys370.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys370.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys370.h" 2
# 26 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys390.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys390.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/sys390.h" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h" 2
# 82 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h" 1
# 8 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h" 1
# 8 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h" 1
# 9 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h" 2
# 9 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2
# 82 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/32.h" 2
# 8 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86/64.h" 1
# 9 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/x86.h" 2
# 28 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/z.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/z.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture/z.h" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/predef/architecture.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/borland.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/borland.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/borland.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/comeau.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/comeau.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/comeau.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/compaq.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/compaq.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/compaq.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/diab.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/diab.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/diab.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/digitalmars.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/digitalmars.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/digitalmars.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/dignus.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/dignus.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/dignus.h" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/edg.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/edg.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/edg.h" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ekopath.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ekopath.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ekopath.h" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc_xml.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc_xml.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc_xml.h" 2
# 40 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc_xml.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/comp_detected.h" 1
# 40 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc_xml.h" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc.h" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/gcc.h" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/greenhills.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/greenhills.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/greenhills.h" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/hp_acc.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/hp_acc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/hp_acc.h" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/iar.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/iar.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/iar.h" 2
# 26 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ibm.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ibm.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/ibm.h" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/intel.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/intel.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/intel.h" 2
# 28 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/kai.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/kai.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/kai.h" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/llvm.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/llvm.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/llvm.h" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/llvm.h" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metaware.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metaware.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metaware.h" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metrowerks.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metrowerks.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/metrowerks.h" 2
# 32 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/microtec.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/microtec.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/microtec.h" 2
# 33 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/mpw.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/mpw.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/mpw.h" 2
# 34 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/palm.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/palm.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/palm.h" 2
# 35 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/pgi.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/pgi.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/pgi.h" 2
# 36 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sgi_mipspro.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sgi_mipspro.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sgi_mipspro.h" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sunpro.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sunpro.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/sunpro.h" 2
# 38 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/tendra.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/tendra.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/tendra.h" 2
# 39 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/visualc.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/visualc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/clang.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/visualc.h" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/visualc.h" 2
# 40 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/watcom.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/watcom.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler/watcom.h" 2
# 41 "D:\\my_project\\boost_1_65_1\\boost/predef/compiler.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/library.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/_prefix.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/_prefix.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/_cassert.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/_cassert.h"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cassert" 1 3



# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 3
#pragma pack(pop)
# 4 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cassert" 2 3
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/_cassert.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/_prefix.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/gnu.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/gnu.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/gnu.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/uc.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/uc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/uc.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/vms.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/vms.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/vms.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/zos.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/zos.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/zos.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/library.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/_prefix.h" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/_prefix.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/detail/_exception.h" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/_prefix.h" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/cxx.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/cxx.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/cxx.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/dinkumware.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/dinkumware.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/dinkumware.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/libcomo.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/libcomo.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/libcomo.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/modena.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/modena.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/modena.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/msl.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/msl.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/msl.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/roguewave.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/roguewave.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/roguewave.h" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/sgi.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/sgi.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/sgi.h" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stdcpp3.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stdcpp3.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stdcpp3.h" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stlport.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stlport.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/stlport.h" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/vacpp.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/vacpp.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std/vacpp.h" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/predef/library/std.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/library.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/aix.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/aix.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/aix.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/amigaos.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/amigaos.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/amigaos.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/android.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/android.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/android.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/beos.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/beos.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/beos.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/ios.h" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 52 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 2
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 2
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 2
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 2
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 2
# 52 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 53 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 54 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 55 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 56 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/cygwin.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/cygwin.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/cygwin.h" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/haiku.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/os/haiku.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/os/haiku.h" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/hpux.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/hpux.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/hpux.h" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/irix.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/irix.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/irix.h" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/ios.h" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/linux.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/linux.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/linux.h" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/os400.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/os400.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/os400.h" 2
# 26 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/qnxnto.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/qnxnto.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/qnxnto.h" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/solaris.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/solaris.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/solaris.h" 2
# 28 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/unix.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/unix.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/unix.h" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/vms.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/vms.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/os/vms.h" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/windows.h" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/predef/os.h" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/other.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/other.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/make.h" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/library/c/gnu.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/macos.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/bsdi.h" 1
# 94 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/free.h" 1
# 96 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/open.h" 1
# 97 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd/net.h" 1
# 98 "D:\\my_project\\boost_1_65_1\\boost/predef/os/bsd.h" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/os/android.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/predef/other/endian.h" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/other.h" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/platform.h" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware.h" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd.h" 1








# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86/versions.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86.h" 2
# 9 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86_amd.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86_amd.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86_amd/versions.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/x86_amd.h" 2
# 10 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/arm.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/arm.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/arm/versions.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/arm.h" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd.h" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/ppc.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/ppc.h"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/ppc/versions.h" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd/ppc.h" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware/simd.h" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/predef/hardware.h" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/predef/version.h" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 2
# 28 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp" 2
# 38 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp"
extern "C" void _mm_pause();
# 56 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp"
namespace boost
{

namespace detail
{



  extern "C" void __stdcall Sleep( unsigned long ms );
# 75 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/yield_k.hpp"
inline void yield( unsigned k )
{
    if( k < 4 )
    {
    }

    else if( k < 16 )
    {
        _mm_pause();
    }


    else if( k < 32 )
    {
        Sleep( 0 );
    }
    else
    {
        Sleep( 1 );
    }







}

}

}
# 18 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_std_atomic.hpp" 2



namespace boost
{

namespace detail
{

class spinlock
{
public:

    std::atomic_flag v_;

public:

    bool try_lock()
    {
        return !v_.test_and_set( std::memory_order_acquire );
    }

    void lock()
    {
        for( unsigned k = 0; !try_lock(); ++k )
        {
            boost::detail::yield( k );
        }
    }

    void unlock()
    {
        v_ .clear( std::memory_order_release );
    }

public:

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( spinlock & sp ): sp_( sp )
        {
            sp.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

}
}
# 47 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/spinlock_pool.hpp" 2



namespace boost
{

namespace detail
{

template< int M > class spinlock_pool
{
private:

    static spinlock pool_[ 41 ];

public:

    static spinlock & spinlock_for( void const * pv )
    {



        std::size_t i = reinterpret_cast< std::size_t >( pv ) % 41;

        return pool_[ i ];
    }

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( void const * pv ): sp_( spinlock_for( pv ) )
        {
            sp_.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

template< int M > spinlock spinlock_pool< M >::pool_[ 41 ] =
{
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }, { {0} }, { {0} }, { {0} }, { {0} },
    { {0} }
};

}
}
# 36 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2
# 57 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
namespace boost
{

template<class T> class shared_ptr;
template<class T> class weak_ptr;
template<class T> class enable_shared_from_this;
class enable_shared_from_raw;

namespace movelib
{

    template< class T, class D > class unique_ptr;

}

namespace detail
{



template< class T > struct sp_element
{
    typedef T type;
};



template< class T > struct sp_element< T[] >
{
    typedef T type;
};



template< class T, std::size_t N > struct sp_element< T[N] >
{
    typedef T type;
};







template< class T > struct sp_dereference
{
    typedef T & type;
};

template<> struct sp_dereference< void >
{
    typedef void type;
};



template<> struct sp_dereference< void const >
{
    typedef void type;
};

template<> struct sp_dereference< void volatile >
{
    typedef void type;
};

template<> struct sp_dereference< void const volatile >
{
    typedef void type;
};





template< class T > struct sp_dereference< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_dereference< T[N] >
{
    typedef void type;
};







template< class T > struct sp_member_access
{
    typedef T * type;
};



template< class T > struct sp_member_access< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_member_access< T[N] >
{
    typedef void type;
};







template< class T > struct sp_array_access
{
    typedef void type;
};



template< class T > struct sp_array_access< T[] >
{
    typedef T & type;
};



template< class T, std::size_t N > struct sp_array_access< T[N] >
{
    typedef T & type;
};







template< class T > struct sp_extent
{
    enum _vt { value = 0 };
};



template< class T, std::size_t N > struct sp_extent< T[N] >
{
    enum _vt { value = N };
};





template< class X, class Y, class T > inline void sp_enable_shared_from_this( boost::shared_ptr<X> const * ppx, Y const * py, boost::enable_shared_from_this< T > const * pe )
{
    if( pe != 0 )
    {
        pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );
    }
}

template< class X, class Y > inline void sp_enable_shared_from_this( boost::shared_ptr<X> * ppx, Y const * py, boost::enable_shared_from_raw const * pe );
# 242 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
inline void sp_enable_shared_from_this( ... )
{
}







template< class T, class R > struct sp_enable_if_auto_ptr
{
};

template< class T, class R > struct sp_enable_if_auto_ptr< std::auto_ptr< T >, R >
{
    typedef R type;
};





template< class Y, class T > inline void sp_assert_convertible()
{



    typedef char tmp[ sp_convertible< Y, T >::value? 1: -1 ];
    (void)sizeof( tmp );







}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T > * ppx, Y * p, boost::detail::shared_count & pn )
{
    boost::detail::shared_count( p ).swap( pn );
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[], T[] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}

template< class T, std::size_t N, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[N] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[N], T[N] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}





template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T > * ppx, Y * p )
{
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[] > * , Y * )
{
    sp_assert_convertible< Y[], T[] >();
}

template< class T, std::size_t N, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[N] > * , Y * )
{
    sp_assert_convertible< Y[N], T[N] >();
}



struct sp_internal_constructor_tag
{
};

}
# 341 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
template<class T> class shared_ptr
{
private:


    typedef shared_ptr<T> this_type;

public:

    typedef typename boost::detail::sp_element< T >::type element_type;

                    shared_ptr() : px( 0 ), pn()
    {
    }
# 364 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
                    shared_ptr( boost::detail::sp_internal_constructor_tag, element_type * px_, boost::detail::shared_count const & pn_ ) : px( px_ ), pn( pn_ )
    {
    }
# 376 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y>
    explicit shared_ptr( Y * p ): px( p ), pn()
    {
        boost::detail::sp_pointer_construct( this, p, pn );
    }







    template<class Y, class D> shared_ptr( Y * p, D d ): px( p ), pn( p, d )
    {
        boost::detail::sp_deleter_construct( this, p );
    }
# 403 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y, class D, class A> shared_ptr( Y * p, D d, A a ): px( p ), pn( p, d, a )
    {
        boost::detail::sp_deleter_construct( this, p );
    }
# 428 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y>
    explicit shared_ptr( weak_ptr<Y> const & r ): pn( r.pn )
    {
        boost::detail::sp_assert_convertible< Y, T >();


        px = r.px;
    }

    template<class Y>
    shared_ptr( weak_ptr<Y> const & r, boost::detail::sp_nothrow_tag )
                      : px( 0 ), pn( r.pn, boost::detail::sp_nothrow_tag() )
    {
        if( !pn.empty() )
        {
            px = r.px;
        }
    }

    template<class Y>


    shared_ptr( shared_ptr<Y> const & r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )






                      : px( r.px ), pn( r.pn )
    {
        boost::detail::sp_assert_convertible< Y, T >();
    }


    template< class Y >
    shared_ptr( shared_ptr<Y> const & r, element_type * p ) : px( p ), pn( r.pn )
    {
    }



    template<class Y>
    explicit shared_ptr( std::auto_ptr<Y> & r ): px(r.get()), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }
# 496 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Ap>
    explicit shared_ptr( Ap r, typename boost::detail::sp_enable_if_auto_ptr<Ap, int>::type = 0 ): px( r.get() ), pn()
    {
        typedef typename Ap::element_type Y;

        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }
# 531 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template< class Y, class D >
    shared_ptr( boost::movelib::unique_ptr< Y, D > r ): px( r.get() ), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        typename boost::movelib::unique_ptr< Y, D >::pointer tmp = r.get();

        if( tmp != 0 )
        {
            pn = boost::detail::shared_count( r );
            boost::detail::sp_deleter_construct( this, tmp );
        }
    }



    shared_ptr & operator=( shared_ptr const & r )
    {
        this_type(r).swap(*this);
        return *this;
    }



    template<class Y>
    shared_ptr & operator=(shared_ptr<Y> const & r)
    {
        this_type(r).swap(*this);
        return *this;
    }





    template<class Y>
    shared_ptr & operator=( std::auto_ptr<Y> & r )
    {
        this_type( r ).swap( *this );
        return *this;
    }
# 584 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Ap>
    typename boost::detail::sp_enable_if_auto_ptr< Ap, shared_ptr & >::type operator=( Ap r )
    {
        this_type( r ).swap( *this );
        return *this;
    }
# 606 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y, class D>
    shared_ptr & operator=( boost::movelib::unique_ptr<Y, D> r )
    {


        boost::detail::sp_assert_convertible< Y, T >();

        typename boost::movelib::unique_ptr< Y, D >::pointer p = r.get();

        shared_ptr tmp;

        if( p != 0 )
        {
            tmp.px = p;
            tmp.pn = boost::detail::shared_count( r );

            boost::detail::sp_deleter_construct( &tmp, p );
        }

        tmp.swap( *this );

        return *this;
    }
# 691 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    void reset()
    {
        this_type().swap(*this);
    }

    template<class Y> void reset( Y * p )
    {
        (void)( (!!(p == 0 || p != px)) || (_wassert(L"p == 0 || p != px", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(698)), 0) );
        this_type( p ).swap( *this );
    }

    template<class Y, class D> void reset( Y * p, D d )
    {
        this_type( p, d ).swap( *this );
    }

    template<class Y, class D, class A> void reset( Y * p, D d, A a )
    {
        this_type( p, d, a ).swap( *this );
    }

    template<class Y> void reset( shared_ptr<Y> const & r, element_type * p )
    {
        this_type( r, p ).swap( *this );
    }
# 726 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
    typename boost::detail::sp_dereference< T >::type operator* () const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(728)), 0) );
        return *px;
    }

    typename boost::detail::sp_member_access< T >::type operator-> () const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(734)), 0) );
        return px;
    }

    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(740)), 0) );
        (void)( (!!(i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 ))) || (_wassert(L"i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 )", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(741)), 0) );

        return static_cast< typename boost::detail::sp_array_access< T >::type >( px[ i ] );
    }

    element_type * get() const
    {
        return px;
    }



# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/operator_bool.hpp" 1
# 51 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/operator_bool.hpp"
    typedef element_type * this_type::*unspecified_bool_type;

    operator unspecified_bool_type() const
    {
        return px == 0? 0: &this_type::px;
    }




    bool operator! () const
    {
        return px == 0;
    }
# 752 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


    bool unique() const
    {
        return pn.unique();
    }

    long use_count() const
    {
        return pn.use_count();
    }

    void swap( shared_ptr & other )
    {
        std::swap(px, other.px);
        pn.swap(other.pn);
    }

    template<class Y> bool owner_before( shared_ptr<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    template<class Y> bool owner_before( weak_ptr<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    void * _internal_get_deleter( boost::detail::sp_typeinfo const & ti ) const
    {
        return pn.get_deleter( ti );
    }

    void * _internal_get_local_deleter( boost::detail::sp_typeinfo const & ti ) const
    {
        return pn.get_local_deleter( ti );
    }

    void * _internal_get_untyped_deleter() const
    {
        return pn.get_untyped_deleter();
    }

    bool _internal_equiv( shared_ptr const & r ) const
    {
        return px == r.px && pn == r.pn;
    }

    boost::detail::shared_count _internal_count() const
    {
        return pn;
    }






private:

    template<class Y> friend class shared_ptr;
    template<class Y> friend class weak_ptr;




    element_type * px;
    boost::detail::shared_count pn;

};

template<class T, class U> inline bool operator==(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.get() == b.get();
}

template<class T, class U> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.get() != b.get();
}
# 868 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
template<class T, class U> inline bool operator<(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.owner_before( b );
}

template<class T> inline void swap(shared_ptr<T> & a, shared_ptr<T> & b)
{
    a.swap(b);
}

template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> const & r )
{
    (void) static_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = static_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> const & r )
{
    (void) const_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = const_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> const & r )
{
    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = dynamic_cast< E* >( r.get() );
    return p? shared_ptr<T>( r, p ): shared_ptr<T>();
}

template<class T, class U> shared_ptr<T> reinterpret_pointer_cast( shared_ptr<U> const & r )
{
    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = reinterpret_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}
# 964 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
template<class T> inline typename shared_ptr<T>::element_type * get_pointer(shared_ptr<T> const & p)
{
    return p.get();
}
# 991 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
template<class E, class T, class Y> std::basic_ostream<E, T> & operator<< (std::basic_ostream<E, T> & os, shared_ptr<Y> const & p)

{
    os << p.get();
    return os;
}
# 1006 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp"
namespace detail
{

template<class D, class T> D * basic_get_deleter( shared_ptr<T> const & p )
{
    return static_cast<D *>( p._internal_get_deleter(typeid(D)) );
}

template<class D, class T> D * basic_get_local_deleter( D *, shared_ptr<T> const & p ) ;
template<class D, class T> D const * basic_get_local_deleter( D const *, shared_ptr<T> const & p ) ;

class esft2_deleter_wrapper
{
private:

    shared_ptr<void const volatile> deleter_;

public:

    esft2_deleter_wrapper()
    {
    }

    template< class T > void set_deleter( shared_ptr<T> const & deleter )
    {
        deleter_ = deleter;
    }

    template<typename D> D* get_deleter() const
    {
        return boost::detail::basic_get_deleter<D>( deleter_ );
    }

    template< class T> void operator()( T* )
    {
        (void)( (!!(deleter_.use_count() <= 1)) || (_wassert(L"deleter_.use_count() <= 1", L"D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(1041)), 0) );
        deleter_.reset();
    }
};

}

template<class D, class T> D * get_deleter( shared_ptr<T> const & p )
{
    D * d = boost::detail::basic_get_deleter<D>( p );

    if( d == 0 )
    {
        d = boost::detail::basic_get_local_deleter( d, p );
    }

    if( d == 0 )
    {
        boost::detail::esft2_deleter_wrapper *del_wrapper = boost::detail::basic_get_deleter<boost::detail::esft2_deleter_wrapper>(p);


        if(del_wrapper) d = del_wrapper->::boost::detail::esft2_deleter_wrapper::get_deleter<D>();
    }

    return d;
}





template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * )
{
    return false;
}

template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    return *p;
}

template<class T> inline shared_ptr<T> atomic_load_explicit( shared_ptr<T> const * p, int )
{
    return atomic_load( p );
}

template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    p->swap( r );
}

template<class T> inline void atomic_store_explicit( shared_ptr<T> * p, shared_ptr<T> r, int )
{
    atomic_store( p, r );
}

template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();
    p->swap( r );
    sp.unlock();

    return r;
}

template<class T> shared_ptr<T> inline atomic_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> r, int )
{
    return atomic_exchange( p, r );
}

template<class T> bool atomic_compare_exchange( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();

    if( p->_internal_equiv( *v ) )
    {
        p->swap( w );

        sp.unlock();

        return true;
    }
    else
    {
        shared_ptr<T> tmp( *p );

        sp.unlock();

        tmp.swap( *v );
        return false;
    }
}

template<class T> inline bool atomic_compare_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w, int, int )
{
    return atomic_compare_exchange( p, v, w );
}





template< class T > struct hash;

template< class T > std::size_t hash_value( boost::shared_ptr<T> const & p )
{
    return boost::hash< typename boost::shared_ptr<T>::element_type* >()( p.get() );
}

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_sp_deleter.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_sp_deleter.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_counted_base.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_counted_base.hpp"
namespace boost
{

namespace detail
{

class local_counted_base
{
private:

    local_counted_base & operator= ( local_counted_base const & );

private:


    enum count_type { min_ = 0, initial_ = 1, max_ = 2147483647 };

    count_type local_use_count_;

public:

                    local_counted_base() : local_use_count_( initial_ )
    {
    }

                    local_counted_base( local_counted_base const & ) : local_use_count_( initial_ )
    {
    }

    virtual ~local_counted_base()
    {
    }

    virtual void local_cb_destroy() = 0;

    virtual boost::detail::shared_count local_cb_get_shared_count() const = 0;

    void add_ref()
    {




        __builtin_assume( local_use_count_ >= 1 );





        local_use_count_ = static_cast<count_type>( local_use_count_ + 1 );
    }

    void release()
    {
        local_use_count_ = static_cast<count_type>( local_use_count_ - 1 );

        if( local_use_count_ == 0 )
        {
            local_cb_destroy();
        }
    }

    long local_use_count() const
    {
        return local_use_count_;
    }
};

class local_counted_impl: public local_counted_base
{
private:

    local_counted_impl( local_counted_impl const & );

private:

    shared_count pn_;

public:

    explicit local_counted_impl( shared_count const& pn ): pn_( pn )
    {
    }
# 116 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_counted_base.hpp"
    virtual void local_cb_destroy()
    {
        delete this;
    }

    virtual boost::detail::shared_count local_cb_get_shared_count() const
    {
        return pn_;
    }
};

class local_counted_impl_em: public local_counted_base
{
public:

    shared_count pn_;

    virtual void local_cb_destroy()
    {
        shared_count().swap( pn_ );
    }

    virtual boost::detail::shared_count local_cb_get_shared_count() const
    {
        return pn_;
    }
};

}

}
# 20 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_sp_deleter.hpp" 2



namespace boost
{

namespace detail
{

template<class D> class local_sp_deleter: public local_counted_impl_em
{
private:

    D d_;

public:

    local_sp_deleter(): d_()
    {
    }

    explicit local_sp_deleter( D const& d ) : d_( d )
    {
    }
# 53 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_sp_deleter.hpp"
    D& deleter()
    {
        return d_;
    }

    template<class Y> void operator()( Y* p )
    {
        d_( p );
    }
# 71 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/detail/local_sp_deleter.hpp"
};

template<> class local_sp_deleter<void>
{
};

template<class D> D * get_local_deleter( local_sp_deleter<D> * p )
{
    return &p->deleter();
}

inline void * get_local_deleter( local_sp_deleter<void> * )
{
    return 0;
}

}

}
# 1158 "D:\\my_project\\boost_1_65_1\\boost/smart_ptr/shared_ptr.hpp" 2


namespace boost
{

namespace detail
{

template<class D, class T> D * basic_get_local_deleter( D *, shared_ptr<T> const & p )
{
    return static_cast<D *>( p._internal_get_local_deleter( typeid(local_sp_deleter<D>) ) );
}

template<class D, class T> D const * basic_get_local_deleter( D const *, shared_ptr<T> const & p )
{
    return static_cast<D *>( p._internal_get_local_deleter( typeid(local_sp_deleter<D>) ) );
}

}

}
# 17 "D:\\my_project\\boost_1_65_1\\boost/shared_ptr.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_clock.hpp" 2


namespace boost {
namespace date_time {





  template<class time_type>
  class second_clock
  {
  public:
    typedef typename time_type::date_type date_type;
    typedef typename time_type::time_duration_type time_duration_type;

    static time_type local_time()
    {
      ::std::time_t t;
      ::std::time(&t);
      ::std::tm curr, *curr_ptr;

      curr_ptr = c_time::localtime(&t, &curr);
      return create_time(curr_ptr);
    }



    static time_type universal_time()
    {

      ::std::time_t t;
      ::std::time(&t);
      ::std::tm curr, *curr_ptr;

      curr_ptr = c_time::gmtime(&t, &curr);
      return create_time(curr_ptr);
    }

    template<class time_zone_type>
    static time_type local_time(boost::shared_ptr<time_zone_type> tz_ptr)
    {
      typedef typename time_type::utc_time_type utc_time_type;
      utc_time_type utc_time = second_clock<utc_time_type>::universal_time();
      return time_type(utc_time, tz_ptr);
    }


  private:
    static time_type create_time(::std::tm* current)
    {
      date_type d(static_cast<unsigned short>(current->tm_year + 1900),
                  static_cast<unsigned short>(current->tm_mon + 1),
                  static_cast<unsigned short>(current->tm_mday));
      time_duration_type td(current->tm_hour,
                            current->tm_min,
                            current->tm_sec);
      return time_type(d,td);
    }

  };


} }
# 9 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/microsec_time_clock.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/microsec_time_clock.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/microsec_time_clock.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp" 1
# 95 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Container>
 class back_insert_iterator
  : public _Outit
 {
public:
 typedef back_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit back_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_back(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_back(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<back_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 back_insert_iterator<_Container> back_inserter(_Container& _Cont)
 {
 return (back_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class front_insert_iterator
  : public _Outit
 {
public:
 typedef front_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit front_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_front(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_front(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<front_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 front_insert_iterator<_Container> front_inserter(_Container& _Cont)
 {
 return (front_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class insert_iterator
  : public _Outit
 {
public:
 typedef insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
  : container(::std:: addressof(_Cont)), iter(_Where)
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  iter = container->insert(iter, _Val);
  ++iter;
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
  ++iter;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 typename _Container::iterator iter;
 };

template<class _Container>
 struct _Is_checked_helper<insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 insert_iterator<_Container> inserter(_Container& _Cont,
  typename _Container::iterator _Where)
 {
 return (insert_iterator<_Container>(_Cont, _Where));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem>,
 class _Diff = ptrdiff_t>
 class istream_iterator
  : public iterator<input_iterator_tag, _Ty, _Diff,
   const _Ty *, const _Ty&>
 {
 typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef const _Ty *pointer;

 constexpr istream_iterator()
  : _Myistr(0), _Myval()
  {
  }

 istream_iterator(istream_type& _Istr)
  : _Myistr(&_Istr)
  {
  _Getval();
  }

 const _Ty& operator*() const
  {
  return (_Myval);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  _Getval();
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool _Equal(const _Myt& _Right) const
  {
  return (_Myistr == _Right._Myistr);
  }

protected:
 void _Getval()
  {
  if (_Myistr != 0 && !(*_Myistr >> _Myval))
   _Myistr = 0;
  }

 istream_type *_Myistr;
 _Ty _Myval;
 };

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff>
 struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
  : public true_type
 {
 };


template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator==(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator!=(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (!(_Left == _Right));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem> >
 class ostream_iterator
  : public _Outit
 {
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostream_iterator(ostream_type& _Ostr,
  const _Elem *_Delim = 0)
  : _Myostr(&_Ostr), _Mydelim(_Delim)
  {
  }

 ostream_iterator& operator=(const _Ty& _Val)
  {
  *_Myostr << _Val;
  if (_Mydelim != 0)
   *_Myostr << _Mydelim;
  return (*this);
  }

 ostream_iterator& operator*()
  {
  return (*this);
  }

 ostream_iterator& operator++()
  {
  return (*this);
  }

 ostream_iterator& operator++(int)
  {
  return (*this);
  }

protected:
 const _Elem *_Mydelim;
 ostream_type *_Myostr;
 };

template<class _Ty,
 class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
  : public true_type
 {
 };
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;


template<class _Iterator>
 class checked_array_iterator
 {
public:
 typedef checked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 checked_array_iterator()
  : _Myarray(), _Mysize(0), _Myindex(0)
  {
  }

 checked_array_iterator(_Iterator _Array, size_t _Size,
  size_t _Index = 0)
  : _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
  {
  { if (!(_Index <= _Size)) { (void)( (!!(("_Index <= _Size" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 383, 0, L"%ls", L"\"_Index <= _Size\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 383, 0); } ; };
  }

 _Iterator base() const
  {
  return (_Myarray + _Myindex);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myindex = _Right - _Myarray;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 407, 0, L"%ls", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 407, 0); } ; };

  return (_Myarray[_Myindex]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 419, 0, L"%ls", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 419, 0); } ; };

  ++_Myindex;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  { if (!(_Myarray != 0 && 0 < _Myindex)) { (void)( (!!(("_Myarray != 0 && 0 < _Myindex" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 434, 0, L"%ls", L"\"_Myarray != 0 && 0 < _Myindex\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 434, 0); } ; };

  --_Myindex;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  { if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex + _Off <= _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 449, 0, L"%ls", L"\"_Myarray != 0 && _Myindex + _Off <= _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 449, 0); } ; };

  _Myindex += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 473, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 473, 0); } ; };
  return (_Myindex - _Right._Myindex);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 484, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 484, 0); } ; };
  return (_Myindex == _Right._Myindex);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 495, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iterator", 495, 0); } ; };
  return (_Myindex < _Right._Myindex);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myarray;
 size_t _Mysize;
 size_t _Myindex;
 };

template<class _Iterator> inline
 typename checked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(checked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator>&
  _Rechecked(checked_array_iterator<_Iterator>& _Iter,
   typename checked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> operator+(
  typename checked_array_iterator<_Iterator>::difference_type _Off,
  checked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> make_checked_array_iterator(
  _Iterator _Array, size_t _Size, size_t _Index = 0)
 {
 return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
 }


template<class _Iterator>
 class unchecked_array_iterator
 {
public:
 typedef unchecked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 unchecked_array_iterator()
  : _Myptr()
  {
  }

 explicit unchecked_array_iterator(_Iterator _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Iterator base() const
  {
  return (_Myptr);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  return (*_Myptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  ++_Myptr;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --_Myptr;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  _Myptr += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Myptr - _Right._Myptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  return (_Myptr == _Right._Myptr);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  return (_Myptr < _Right._Myptr);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myptr;
 };

template<class _Iterator> inline
 typename unchecked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(unchecked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator>&
  _Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
   typename unchecked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> operator+(
  typename unchecked_array_iterator<_Iterator>::difference_type _Off,
  unchecked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
  _Iterator _Ptr)
 {
 return (unchecked_array_iterator<_Iterator>(_Ptr));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 95 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp" 2
# 112 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
namespace boost
{
namespace operators_impl
{
namespace operators_detail
{

template <typename T> class empty_base {};

}






template <class T, class U, class B = operators_detail::empty_base<T> >
struct less_than_comparable2 : B
{
     friend bool operator<=(const T& x, const U& y) { return !static_cast<bool>(x > y); }
     friend bool operator>=(const T& x, const U& y) { return !static_cast<bool>(x < y); }
     friend bool operator>(const U& x, const T& y) { return y < x; }
     friend bool operator<(const U& x, const T& y) { return y > x; }
     friend bool operator<=(const U& x, const T& y) { return !static_cast<bool>(y < x); }
     friend bool operator>=(const U& x, const T& y) { return !static_cast<bool>(y > x); }
};

template <class T, class B = operators_detail::empty_base<T> >
struct less_than_comparable1 : B
{
     friend bool operator>(const T& x, const T& y) { return y < x; }
     friend bool operator<=(const T& x, const T& y) { return !static_cast<bool>(y < x); }
     friend bool operator>=(const T& x, const T& y) { return !static_cast<bool>(x < y); }
};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct equality_comparable2 : B
{
     friend bool operator==(const U& y, const T& x) { return x == y; }
     friend bool operator!=(const U& y, const T& x) { return !static_cast<bool>(x == y); }
     friend bool operator!=(const T& y, const U& x) { return !static_cast<bool>(y == x); }
};

template <class T, class B = operators_detail::empty_base<T> >
struct equality_comparable1 : B
{
     friend bool operator!=(const T& x, const T& y) { return !static_cast<bool>(x == y); }
};
# 255 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
template <class T, class U, class B = operators_detail::empty_base<T> > struct multipliable2 : B { friend T operator *( T lhs, const U& rhs ) { return lhs *= rhs; } friend T operator *( const U& lhs, T rhs ) { return rhs *= lhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct multipliable1 : B { friend T operator *( T lhs, const T& rhs ) { return lhs *= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct addable2 : B { friend T operator +( T lhs, const U& rhs ) { return lhs += rhs; } friend T operator +( const U& lhs, T rhs ) { return rhs += lhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct addable1 : B { friend T operator +( T lhs, const T& rhs ) { return lhs += rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct subtractable2 : B { friend T operator -( T lhs, const U& rhs ) { return lhs -= rhs; } }; template <class T, class U, class B = operators_detail::empty_base<T> > struct subtractable2_left : B { friend T operator -( const U& lhs, const T& rhs ) { return T( lhs ) -= rhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct subtractable1 : B { friend T operator -( T lhs, const T& rhs ) { return lhs -= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct dividable2 : B { friend T operator /( T lhs, const U& rhs ) { return lhs /= rhs; } }; template <class T, class U, class B = operators_detail::empty_base<T> > struct dividable2_left : B { friend T operator /( const U& lhs, const T& rhs ) { return T( lhs ) /= rhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct dividable1 : B { friend T operator /( T lhs, const T& rhs ) { return lhs /= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct modable2 : B { friend T operator %( T lhs, const U& rhs ) { return lhs %= rhs; } }; template <class T, class U, class B = operators_detail::empty_base<T> > struct modable2_left : B { friend T operator %( const U& lhs, const T& rhs ) { return T( lhs ) %= rhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct modable1 : B { friend T operator %( T lhs, const T& rhs ) { return lhs %= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct xorable2 : B { friend T operator ^( T lhs, const U& rhs ) { return lhs ^= rhs; } friend T operator ^( const U& lhs, T rhs ) { return rhs ^= lhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct xorable1 : B { friend T operator ^( T lhs, const T& rhs ) { return lhs ^= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct andable2 : B { friend T operator &( T lhs, const U& rhs ) { return lhs &= rhs; } friend T operator &( const U& lhs, T rhs ) { return rhs &= lhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct andable1 : B { friend T operator &( T lhs, const T& rhs ) { return lhs &= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct orable2 : B { friend T operator |( T lhs, const U& rhs ) { return lhs |= rhs; } friend T operator |( const U& lhs, T rhs ) { return rhs |= lhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct orable1 : B { friend T operator |( T lhs, const T& rhs ) { return lhs |= rhs; } };







template <class T, class B = operators_detail::empty_base<T> >
struct incrementable : B
{
  friend T operator++(T& x, int)
  {
    incrementable_type nrv(x);
    ++x;
    return nrv;
  }
private:
  typedef T incrementable_type;
};

template <class T, class B = operators_detail::empty_base<T> >
struct decrementable : B
{
  friend T operator--(T& x, int)
  {
    decrementable_type nrv(x);
    --x;
    return nrv;
  }
private:
  typedef T decrementable_type;
};



template <class T, class P, class B = operators_detail::empty_base<T> >
struct dereferenceable : B
{
  P operator->() const
  {
    return &*static_cast<const T&>(*this);
  }
};

template <class T, class I, class R, class B = operators_detail::empty_base<T> >
struct indexable : B
{
  R operator[](I n) const
  {
    return *(static_cast<const T&>(*this) + n);
  }
};
# 353 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
template <class T, class U, class B = operators_detail::empty_base<T> > struct left_shiftable2 : B { friend T operator <<( T lhs, const U& rhs ) { return lhs <<= rhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct left_shiftable1 : B { friend T operator <<( T lhs, const T& rhs ) { return lhs <<= rhs; } };
template <class T, class U, class B = operators_detail::empty_base<T> > struct right_shiftable2 : B { friend T operator >>( T lhs, const U& rhs ) { return lhs >>= rhs; } }; template <class T, class B = operators_detail::empty_base<T> > struct right_shiftable1 : B { friend T operator >>( T lhs, const T& rhs ) { return lhs >>= rhs; } };



template <class T, class U, class B = operators_detail::empty_base<T> >
struct equivalent2 : B
{
  friend bool operator==(const T& x, const U& y)
  {
    return !static_cast<bool>(x < y) && !static_cast<bool>(x > y);
  }
};

template <class T, class B = operators_detail::empty_base<T> >
struct equivalent1 : B
{
  friend bool operator==(const T&x, const T&y)
  {
    return !static_cast<bool>(x < y) && !static_cast<bool>(y < x);
  }
};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct partially_ordered2 : B
{
  friend bool operator<=(const T& x, const U& y)
    { return static_cast<bool>(x < y) || static_cast<bool>(x == y); }
  friend bool operator>=(const T& x, const U& y)
    { return static_cast<bool>(x > y) || static_cast<bool>(x == y); }
  friend bool operator>(const U& x, const T& y)
    { return y < x; }
  friend bool operator<(const U& x, const T& y)
    { return y > x; }
  friend bool operator<=(const U& x, const T& y)
    { return static_cast<bool>(y > x) || static_cast<bool>(y == x); }
  friend bool operator>=(const U& x, const T& y)
    { return static_cast<bool>(y < x) || static_cast<bool>(y == x); }
};

template <class T, class B = operators_detail::empty_base<T> >
struct partially_ordered1 : B
{
  friend bool operator>(const T& x, const T& y)
    { return y < x; }
  friend bool operator<=(const T& x, const T& y)
    { return static_cast<bool>(x < y) || static_cast<bool>(x == y); }
  friend bool operator>=(const T& x, const T& y)
    { return static_cast<bool>(y < x) || static_cast<bool>(x == y); }
};



template <class T, class U, class B = operators_detail::empty_base<T> >
struct totally_ordered2
    : less_than_comparable2<T, U
    , equality_comparable2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct totally_ordered1
    : less_than_comparable1<T
    , equality_comparable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct additive2
    : addable2<T, U
    , subtractable2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct additive1
    : addable1<T
    , subtractable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct multiplicative2
    : multipliable2<T, U
    , dividable2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct multiplicative1
    : multipliable1<T
    , dividable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct integer_multiplicative2
    : multiplicative2<T, U
    , modable2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct integer_multiplicative1
    : multiplicative1<T
    , modable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct arithmetic2
    : additive2<T, U
    , multiplicative2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct arithmetic1
    : additive1<T
    , multiplicative1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct integer_arithmetic2
    : additive2<T, U
    , integer_multiplicative2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct integer_arithmetic1
    : additive1<T
    , integer_multiplicative1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct bitwise2
    : xorable2<T, U
    , andable2<T, U
    , orable2<T, U, B
      > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct bitwise1
    : xorable1<T
    , andable1<T
    , orable1<T, B
      > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct unit_steppable
    : incrementable<T
    , decrementable<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct shiftable2
    : left_shiftable2<T, U
    , right_shiftable2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct shiftable1
    : left_shiftable1<T
    , right_shiftable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct ring_operators2
    : additive2<T, U
    , subtractable2_left<T, U
    , multipliable2<T, U, B
      > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct ring_operators1
    : additive1<T
    , multipliable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct ordered_ring_operators2
    : ring_operators2<T, U
    , totally_ordered2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct ordered_ring_operators1
    : ring_operators1<T
    , totally_ordered1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct field_operators2
    : ring_operators2<T, U
    , dividable2<T, U
    , dividable2_left<T, U, B
      > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct field_operators1
    : ring_operators1<T
    , dividable1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct ordered_field_operators2
    : field_operators2<T, U
    , totally_ordered2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct ordered_field_operators1
    : field_operators1<T
    , totally_ordered1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct euclidian_ring_operators2
    : ring_operators2<T, U
    , dividable2<T, U
    , dividable2_left<T, U
    , modable2<T, U
    , modable2_left<T, U, B
      > > > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct euclidian_ring_operators1
    : ring_operators1<T
    , dividable1<T
    , modable1<T, B
      > > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct ordered_euclidian_ring_operators2
    : totally_ordered2<T, U
    , euclidian_ring_operators2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct ordered_euclidian_ring_operators1
    : totally_ordered1<T
    , euclidian_ring_operators1<T, B
      > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct euclidean_ring_operators2
    : ring_operators2<T, U
    , dividable2<T, U
    , dividable2_left<T, U
    , modable2<T, U
    , modable2_left<T, U, B
      > > > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct euclidean_ring_operators1
    : ring_operators1<T
    , dividable1<T
    , modable1<T, B
      > > > {};

template <class T, class U, class B = operators_detail::empty_base<T> >
struct ordered_euclidean_ring_operators2
    : totally_ordered2<T, U
    , euclidean_ring_operators2<T, U, B
      > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct ordered_euclidean_ring_operators1
    : totally_ordered1<T
    , euclidean_ring_operators1<T, B
      > > {};

template <class T, class P, class B = operators_detail::empty_base<T> >
struct input_iteratable
    : equality_comparable1<T
    , incrementable<T
    , dereferenceable<T, P, B
      > > > {};

template <class T, class B = operators_detail::empty_base<T> >
struct output_iteratable
    : incrementable<T, B
      > {};

template <class T, class P, class B = operators_detail::empty_base<T> >
struct forward_iteratable
    : input_iteratable<T, P, B
      > {};

template <class T, class P, class B = operators_detail::empty_base<T> >
struct bidirectional_iteratable
    : forward_iteratable<T, P
    , decrementable<T, B
      > > {};





template <class T, class P, class D, class R, class B = operators_detail::empty_base<T> >
struct random_access_iteratable
    : bidirectional_iteratable<T, P
    , less_than_comparable1<T
    , additive2<T, D
    , indexable<T, D, R, B
      > > > > {};
# 658 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
namespace operators_detail
{



struct true_t {};
struct false_t {};

}
# 675 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
template<class T> struct is_chained_base {
  typedef operators_detail::false_t value;
};
# 753 "D:\\my_project\\boost_1_65_1\\boost/operators.hpp"
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct less_than_comparable; template<class T, class U, class B> struct less_than_comparable<T, U, B, operators_detail::false_t> : less_than_comparable2<T, U, B> {}; template<class T, class U> struct less_than_comparable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : less_than_comparable1<T, U> {}; template <class T, class B> struct less_than_comparable<T, T, B, operators_detail::false_t> : less_than_comparable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< less_than_comparable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< less_than_comparable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< less_than_comparable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct equality_comparable; template<class T, class U, class B> struct equality_comparable<T, U, B, operators_detail::false_t> : equality_comparable2<T, U, B> {}; template<class T, class U> struct equality_comparable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : equality_comparable1<T, U> {}; template <class T, class B> struct equality_comparable<T, T, B, operators_detail::false_t> : equality_comparable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< equality_comparable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< equality_comparable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< equality_comparable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct multipliable; template<class T, class U, class B> struct multipliable<T, U, B, operators_detail::false_t> : multipliable2<T, U, B> {}; template<class T, class U> struct multipliable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : multipliable1<T, U> {}; template <class T, class B> struct multipliable<T, T, B, operators_detail::false_t> : multipliable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< multipliable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< multipliable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< multipliable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct addable; template<class T, class U, class B> struct addable<T, U, B, operators_detail::false_t> : addable2<T, U, B> {}; template<class T, class U> struct addable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : addable1<T, U> {}; template <class T, class B> struct addable<T, T, B, operators_detail::false_t> : addable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< addable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< addable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< addable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct subtractable; template<class T, class U, class B> struct subtractable<T, U, B, operators_detail::false_t> : subtractable2<T, U, B> {}; template<class T, class U> struct subtractable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : subtractable1<T, U> {}; template <class T, class B> struct subtractable<T, T, B, operators_detail::false_t> : subtractable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< subtractable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< subtractable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< subtractable1<T, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< subtractable2_left<T, U, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct dividable; template<class T, class U, class B> struct dividable<T, U, B, operators_detail::false_t> : dividable2<T, U, B> {}; template<class T, class U> struct dividable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : dividable1<T, U> {}; template <class T, class B> struct dividable<T, T, B, operators_detail::false_t> : dividable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< dividable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< dividable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< dividable1<T, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< dividable2_left<T, U, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct modable; template<class T, class U, class B> struct modable<T, U, B, operators_detail::false_t> : modable2<T, U, B> {}; template<class T, class U> struct modable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : modable1<T, U> {}; template <class T, class B> struct modable<T, T, B, operators_detail::false_t> : modable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< modable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< modable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< modable1<T, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< modable2_left<T, U, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct xorable; template<class T, class U, class B> struct xorable<T, U, B, operators_detail::false_t> : xorable2<T, U, B> {}; template<class T, class U> struct xorable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : xorable1<T, U> {}; template <class T, class B> struct xorable<T, T, B, operators_detail::false_t> : xorable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< xorable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< xorable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< xorable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct andable; template<class T, class U, class B> struct andable<T, U, B, operators_detail::false_t> : andable2<T, U, B> {}; template<class T, class U> struct andable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : andable1<T, U> {}; template <class T, class B> struct andable<T, T, B, operators_detail::false_t> : andable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< andable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< andable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< andable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct orable; template<class T, class U, class B> struct orable<T, U, B, operators_detail::false_t> : orable2<T, U, B> {}; template<class T, class U> struct orable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : orable1<T, U> {}; template <class T, class B> struct orable<T, T, B, operators_detail::false_t> : orable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< orable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< orable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< orable1<T, B> > { typedef operators_detail::true_t value; };

template<class T, class B> struct is_chained_base< incrementable<T, B> > { typedef operators_detail::true_t value; };
template<class T, class B> struct is_chained_base< decrementable<T, B> > { typedef operators_detail::true_t value; };

template<class T, class U, class B> struct is_chained_base< dereferenceable<T, U, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class V, class B> struct is_chained_base< indexable<T, U, V, B> > { typedef operators_detail::true_t value; };

template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct left_shiftable; template<class T, class U, class B> struct left_shiftable<T, U, B, operators_detail::false_t> : left_shiftable2<T, U, B> {}; template<class T, class U> struct left_shiftable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : left_shiftable1<T, U> {}; template <class T, class B> struct left_shiftable<T, T, B, operators_detail::false_t> : left_shiftable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< left_shiftable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< left_shiftable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< left_shiftable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct right_shiftable; template<class T, class U, class B> struct right_shiftable<T, U, B, operators_detail::false_t> : right_shiftable2<T, U, B> {}; template<class T, class U> struct right_shiftable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : right_shiftable1<T, U> {}; template <class T, class B> struct right_shiftable<T, T, B, operators_detail::false_t> : right_shiftable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< right_shiftable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< right_shiftable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< right_shiftable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct equivalent; template<class T, class U, class B> struct equivalent<T, U, B, operators_detail::false_t> : equivalent2<T, U, B> {}; template<class T, class U> struct equivalent<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : equivalent1<T, U> {}; template <class T, class B> struct equivalent<T, T, B, operators_detail::false_t> : equivalent1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< equivalent<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< equivalent2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< equivalent1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct partially_ordered; template<class T, class U, class B> struct partially_ordered<T, U, B, operators_detail::false_t> : partially_ordered2<T, U, B> {}; template<class T, class U> struct partially_ordered<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : partially_ordered1<T, U> {}; template <class T, class B> struct partially_ordered<T, T, B, operators_detail::false_t> : partially_ordered1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< partially_ordered<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< partially_ordered2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< partially_ordered1<T, B> > { typedef operators_detail::true_t value; };

template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct totally_ordered; template<class T, class U, class B> struct totally_ordered<T, U, B, operators_detail::false_t> : totally_ordered2<T, U, B> {}; template<class T, class U> struct totally_ordered<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : totally_ordered1<T, U> {}; template <class T, class B> struct totally_ordered<T, T, B, operators_detail::false_t> : totally_ordered1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< totally_ordered<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< totally_ordered2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< totally_ordered1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct additive; template<class T, class U, class B> struct additive<T, U, B, operators_detail::false_t> : additive2<T, U, B> {}; template<class T, class U> struct additive<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : additive1<T, U> {}; template <class T, class B> struct additive<T, T, B, operators_detail::false_t> : additive1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< additive<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< additive2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< additive1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct multiplicative; template<class T, class U, class B> struct multiplicative<T, U, B, operators_detail::false_t> : multiplicative2<T, U, B> {}; template<class T, class U> struct multiplicative<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : multiplicative1<T, U> {}; template <class T, class B> struct multiplicative<T, T, B, operators_detail::false_t> : multiplicative1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< multiplicative<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< multiplicative2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< multiplicative1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct integer_multiplicative; template<class T, class U, class B> struct integer_multiplicative<T, U, B, operators_detail::false_t> : integer_multiplicative2<T, U, B> {}; template<class T, class U> struct integer_multiplicative<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : integer_multiplicative1<T, U> {}; template <class T, class B> struct integer_multiplicative<T, T, B, operators_detail::false_t> : integer_multiplicative1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< integer_multiplicative<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< integer_multiplicative2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< integer_multiplicative1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct arithmetic; template<class T, class U, class B> struct arithmetic<T, U, B, operators_detail::false_t> : arithmetic2<T, U, B> {}; template<class T, class U> struct arithmetic<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : arithmetic1<T, U> {}; template <class T, class B> struct arithmetic<T, T, B, operators_detail::false_t> : arithmetic1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< arithmetic<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< arithmetic2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< arithmetic1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct integer_arithmetic; template<class T, class U, class B> struct integer_arithmetic<T, U, B, operators_detail::false_t> : integer_arithmetic2<T, U, B> {}; template<class T, class U> struct integer_arithmetic<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : integer_arithmetic1<T, U> {}; template <class T, class B> struct integer_arithmetic<T, T, B, operators_detail::false_t> : integer_arithmetic1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< integer_arithmetic<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< integer_arithmetic2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< integer_arithmetic1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct bitwise; template<class T, class U, class B> struct bitwise<T, U, B, operators_detail::false_t> : bitwise2<T, U, B> {}; template<class T, class U> struct bitwise<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : bitwise1<T, U> {}; template <class T, class B> struct bitwise<T, T, B, operators_detail::false_t> : bitwise1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< bitwise<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< bitwise2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< bitwise1<T, B> > { typedef operators_detail::true_t value; };
template<class T, class B> struct is_chained_base< unit_steppable<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct shiftable; template<class T, class U, class B> struct shiftable<T, U, B, operators_detail::false_t> : shiftable2<T, U, B> {}; template<class T, class U> struct shiftable<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : shiftable1<T, U> {}; template <class T, class B> struct shiftable<T, T, B, operators_detail::false_t> : shiftable1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< shiftable<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< shiftable2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< shiftable1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct ring_operators; template<class T, class U, class B> struct ring_operators<T, U, B, operators_detail::false_t> : ring_operators2<T, U, B> {}; template<class T, class U> struct ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : ring_operators1<T, U> {}; template <class T, class B> struct ring_operators<T, T, B, operators_detail::false_t> : ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct ordered_ring_operators; template<class T, class U, class B> struct ordered_ring_operators<T, U, B, operators_detail::false_t> : ordered_ring_operators2<T, U, B> {}; template<class T, class U> struct ordered_ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : ordered_ring_operators1<T, U> {}; template <class T, class B> struct ordered_ring_operators<T, T, B, operators_detail::false_t> : ordered_ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< ordered_ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< ordered_ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< ordered_ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct field_operators; template<class T, class U, class B> struct field_operators<T, U, B, operators_detail::false_t> : field_operators2<T, U, B> {}; template<class T, class U> struct field_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : field_operators1<T, U> {}; template <class T, class B> struct field_operators<T, T, B, operators_detail::false_t> : field_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< field_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< field_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< field_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct ordered_field_operators; template<class T, class U, class B> struct ordered_field_operators<T, U, B, operators_detail::false_t> : ordered_field_operators2<T, U, B> {}; template<class T, class U> struct ordered_field_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : ordered_field_operators1<T, U> {}; template <class T, class B> struct ordered_field_operators<T, T, B, operators_detail::false_t> : ordered_field_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< ordered_field_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< ordered_field_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< ordered_field_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct euclidian_ring_operators; template<class T, class U, class B> struct euclidian_ring_operators<T, U, B, operators_detail::false_t> : euclidian_ring_operators2<T, U, B> {}; template<class T, class U> struct euclidian_ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : euclidian_ring_operators1<T, U> {}; template <class T, class B> struct euclidian_ring_operators<T, T, B, operators_detail::false_t> : euclidian_ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< euclidian_ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< euclidian_ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< euclidian_ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct ordered_euclidian_ring_operators; template<class T, class U, class B> struct ordered_euclidian_ring_operators<T, U, B, operators_detail::false_t> : ordered_euclidian_ring_operators2<T, U, B> {}; template<class T, class U> struct ordered_euclidian_ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : ordered_euclidian_ring_operators1<T, U> {}; template <class T, class B> struct ordered_euclidian_ring_operators<T, T, B, operators_detail::false_t> : ordered_euclidian_ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< ordered_euclidian_ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< ordered_euclidian_ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< ordered_euclidian_ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct euclidean_ring_operators; template<class T, class U, class B> struct euclidean_ring_operators<T, U, B, operators_detail::false_t> : euclidean_ring_operators2<T, U, B> {}; template<class T, class U> struct euclidean_ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : euclidean_ring_operators1<T, U> {}; template <class T, class B> struct euclidean_ring_operators<T, T, B, operators_detail::false_t> : euclidean_ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< euclidean_ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< euclidean_ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< euclidean_ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template <class T ,class U = T ,class B = operators_detail::empty_base<T> ,class O = typename is_chained_base<U>::value > struct ordered_euclidean_ring_operators; template<class T, class U, class B> struct ordered_euclidean_ring_operators<T, U, B, operators_detail::false_t> : ordered_euclidean_ring_operators2<T, U, B> {}; template<class T, class U> struct ordered_euclidean_ring_operators<T, U, operators_detail::empty_base<T>, operators_detail::true_t> : ordered_euclidean_ring_operators1<T, U> {}; template <class T, class B> struct ordered_euclidean_ring_operators<T, T, B, operators_detail::false_t> : ordered_euclidean_ring_operators1<T, B> {}; template<class T, class U, class B, class O> struct is_chained_base< ordered_euclidean_ring_operators<T, U, B, O> > { typedef operators_detail::true_t value; }; template<class T, class U, class B> struct is_chained_base< ordered_euclidean_ring_operators2<T, U, B> > { typedef operators_detail::true_t value; }; template<class T, class B> struct is_chained_base< ordered_euclidean_ring_operators1<T, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< input_iteratable<T, U, B> > { typedef operators_detail::true_t value; };
template<class T, class B> struct is_chained_base< output_iteratable<T, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< forward_iteratable<T, U, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class B> struct is_chained_base< bidirectional_iteratable<T, U, B> > { typedef operators_detail::true_t value; };
template<class T, class U, class V, class W, class B> struct is_chained_base< random_access_iteratable<T, U, V, W, B> > { typedef operators_detail::true_t value; };







template <class T, class U>
struct operators2
    : totally_ordered2<T,U
    , integer_arithmetic2<T,U
    , bitwise2<T,U
      > > > {};

template <class T, class U = T>
struct operators : operators2<T, U> {};

template <class T> struct operators<T, T>
    : totally_ordered<T
    , integer_arithmetic<T
    , bitwise<T
    , unit_steppable<T
      > > > > {};




template <class T,
          class V,
          class D = std::ptrdiff_t,
          class P = V const *,
          class R = V const &>
struct input_iterator_helper
  : input_iteratable<T, P
  , std::iterator<std::input_iterator_tag, V, D, P, R
    > > {};

template<class T>
struct output_iterator_helper
  : output_iteratable<T
  , std::iterator<std::output_iterator_tag, void, void, void, void
  > >
{
  T& operator*() { return static_cast<T&>(*this); }
  T& operator++() { return static_cast<T&>(*this); }
};

template <class T,
          class V,
          class D = std::ptrdiff_t,
          class P = V*,
          class R = V&>
struct forward_iterator_helper
  : forward_iteratable<T, P
  , std::iterator<std::forward_iterator_tag, V, D, P, R
    > > {};

template <class T,
          class V,
          class D = std::ptrdiff_t,
          class P = V*,
          class R = V&>
struct bidirectional_iterator_helper
  : bidirectional_iteratable<T, P
  , std::iterator<std::bidirectional_iterator_tag, V, D, P, R
    > > {};

template <class T,
          class V,
          class D = std::ptrdiff_t,
          class P = V*,
          class R = V&>
struct random_access_iterator_helper
  : random_access_iteratable<T, P, D, R
  , std::iterator<std::random_access_iterator_tag, V, D, P, R
    > >
{
  friend D requires_difference_operator(const T& x, const T& y) {
    return x - y;
  }
};

}
using namespace operators_impl;

}
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_defs.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_defs.hpp"
namespace boost {
namespace date_time {


  enum time_resolutions {
    sec,
    tenth,
    hundreth,
    hundredth = hundreth,
    milli,
    ten_thousandth,
    micro,
    nano,
    NumResolutions
  };


  enum dst_flags {not_dst, is_dst, calculate};


} }
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/special_defs.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/special_defs.hpp"
namespace boost {
namespace date_time {

    enum special_values {not_a_date_time,
                         neg_infin, pos_infin,
                         min_date_time, max_date_time,
                         not_special, NumSpecialValues};


} }
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp" 2


namespace boost {
namespace date_time {
# 45 "D:\\my_project\\boost_1_65_1\\boost/date_time/time.hpp"
  template <class T, class time_system>
  class base_time : private
      boost::less_than_comparable<T
    , boost::equality_comparable<T
      > >
  {
  public:

    typedef void _is_boost_date_time_time_point;
    typedef T time_type;
    typedef typename time_system::time_rep_type time_rep_type;
    typedef typename time_system::date_type date_type;
    typedef typename time_system::date_duration_type date_duration_type;
    typedef typename time_system::time_duration_type time_duration_type;


    base_time(const date_type& day,
              const time_duration_type& td,
              dst_flags dst=not_dst) :
      time_(time_system::get_time_rep(day, td, dst))
    {}
    base_time(special_values sv) :
      time_(time_system::get_time_rep(sv))
    {}
    base_time(const time_rep_type& rhs) :
      time_(rhs)
    {}
    date_type date() const
    {
      return time_system::get_date(time_);
    }
    time_duration_type time_of_day() const
    {
      return time_system::get_time_of_day(time_);
    }



    std::string zone_name(bool =false) const
    {
      return time_system::zone_name(time_);
    }



    std::string zone_abbrev(bool =false) const
    {
      return time_system::zone_name(time_);
    }

    std::string zone_as_posix_string() const
    {
      return std::string();
    }


    bool is_not_a_date_time() const
    {
      return time_.is_not_a_date_time();
    }

    bool is_infinity() const
    {
      return (is_pos_infinity() || is_neg_infinity());
    }

    bool is_pos_infinity() const
    {
      return time_.is_pos_infinity();
    }

    bool is_neg_infinity() const
    {
      return time_.is_neg_infinity();
    }

    bool is_special() const
    {
      return(is_not_a_date_time() || is_infinity());
    }

    bool operator==(const time_type& rhs) const
    {
      return time_system::is_equal(time_,rhs.time_);
    }

    bool operator<(const time_type& rhs) const
    {
      return time_system::is_less(time_,rhs.time_);
    }

    time_duration_type operator-(const time_type& rhs) const
    {
      return time_system::subtract_times(time_, rhs.time_);
    }

    time_type operator+(const date_duration_type& dd) const
    {
      return time_system::add_days(time_, dd);
    }
    time_type operator+=(const date_duration_type& dd)
    {
      time_ = (time_system::get_time_rep(date() + dd, time_of_day()));
      return time_type(time_);
    }

    time_type operator-(const date_duration_type& dd) const
    {
      return time_system::subtract_days(time_, dd);
    }
    time_type operator-=(const date_duration_type& dd)
    {
      time_ = (time_system::get_time_rep(date() - dd, time_of_day()));
      return time_type(time_);
    }

    time_type operator+(const time_duration_type& td) const
    {
      return time_type(time_system::add_time_duration(time_, td));
    }
    time_type operator+=(const time_duration_type& td)
    {
      time_ = (time_system::get_time_rep(date(), time_of_day() + td));
      return time_type(time_);
    }

    time_type operator-(const time_duration_type& rhs) const
    {
      return time_system::subtract_time_duration(time_, rhs);
    }
    time_type operator-=(const time_duration_type& td)
    {
      time_ = (time_system::get_time_rep(date(), time_of_day() - td));
      return time_type(time_);
    }

  protected:
    time_rep_type time_;
  };





} }
# 27 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_defs.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_defs.hpp"
namespace boost {
namespace date_time {


  enum weekdays {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};


  enum months_of_year {Jan=1,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,NotAMonth,NumMonths};

} }
# 28 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp" 2


namespace boost {

namespace date_time {

namespace winapi {



    extern "C" {

        struct FILETIME
        {
            boost::uint32_t dwLowDateTime;
            boost::uint32_t dwHighDateTime;
        };
        struct SYSTEMTIME
        {
            boost::uint16_t wYear;
            boost::uint16_t wMonth;
            boost::uint16_t wDayOfWeek;
            boost::uint16_t wDay;
            boost::uint16_t wHour;
            boost::uint16_t wMinute;
            boost::uint16_t wSecond;
            boost::uint16_t wMilliseconds;
        };

        __declspec(dllimport) void __stdcall GetSystemTimeAsFileTime(FILETIME* lpFileTime);
        __declspec(dllimport) int __stdcall FileTimeToLocalFileTime(const FILETIME* lpFileTime, FILETIME* lpLocalFileTime);
        __declspec(dllimport) void __stdcall GetSystemTime(SYSTEMTIME* lpSystemTime);
        __declspec(dllimport) int __stdcall SystemTimeToFileTime(const SYSTEMTIME* lpSystemTime, FILETIME* lpFileTime);

    }



    typedef FILETIME file_time;
    typedef SYSTEMTIME system_time;

    inline void get_system_time_as_file_time(file_time& ft)
    {






        GetSystemTimeAsFileTime(&ft);





    }
# 94 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp"
    template< typename FileTimeT >
    inline boost::uint64_t file_time_to_microseconds(FileTimeT const& ft)
    {


        const uint64_t shift = 116444736000000000ULL;

        union {
            FileTimeT as_file_time;
            uint64_t as_integer;
        } caster;
        caster.as_file_time = ft;

        caster.as_integer -= shift;
        return (caster.as_integer / 10);
    }

}
# 124 "D:\\my_project\\boost_1_65_1\\boost/date_time/filetime_functions.hpp"
template< typename TimeT, typename FileTimeT >
inline
TimeT time_from_ftime(const FileTimeT& ft)
{
    typedef typename TimeT::date_type date_type;
    typedef typename TimeT::date_duration_type date_duration_type;
    typedef typename TimeT::time_duration_type time_duration_type;






    union {
        FileTimeT as_file_time;
        uint64_t as_integer;
    } caster;
    caster.as_file_time = ft;

    uint64_t sec = caster.as_integer / 10000000UL;
    uint32_t sub_sec = (caster.as_integer % 10000000UL)

        / 10;





    const uint32_t sec_per_day = 86400;
    uint32_t days = static_cast< uint32_t >(sec / sec_per_day);
    uint32_t tmp = static_cast< uint32_t >(sec % sec_per_day);
    uint32_t hours = tmp / 3600;
    tmp %= 3600;
    uint32_t minutes = tmp / 60;
    tmp %= 60;
    uint32_t seconds = tmp;

    date_duration_type dd(days);
    date_type d = date_type(1601, Jan, 01) + dd;
    return TimeT(d, time_duration_type(hours, minutes, seconds, sub_sec));
}

}}
# 23 "D:\\my_project\\boost_1_65_1\\boost/date_time/microsec_time_clock.hpp" 2




namespace boost {
namespace date_time {
# 38 "D:\\my_project\\boost_1_65_1\\boost/date_time/microsec_time_clock.hpp"
  template<class time_type>
  class microsec_clock
  {
  private:

    typedef std::tm* (*time_converter)(const std::time_t*, std::tm*);

  public:
    typedef typename time_type::date_type date_type;
    typedef typename time_type::time_duration_type time_duration_type;
    typedef typename time_duration_type::rep_type resolution_traits_type;



    template<class time_zone_type>
    static time_type local_time(shared_ptr<time_zone_type> tz_ptr)
    {
      typedef typename time_type::utc_time_type utc_time_type;
      typedef second_clock<utc_time_type> second_clock;


      utc_time_type utc_time = second_clock::universal_time();
      time_duration_type utc_offset = second_clock::local_time() - utc_time;


      utc_time = microsec_clock<utc_time_type>::local_time() - utc_offset;
      return time_type(utc_time, tz_ptr);
    }


    static time_type local_time()
    {
      return create_time(&c_time::localtime);
    }


    static time_type universal_time()
    {
      return create_time(&c_time::gmtime);
    }

  private:
    static time_type create_time(time_converter converter)
    {






      winapi::file_time ft;
      winapi::get_system_time_as_file_time(ft);
      uint64_t micros = winapi::file_time_to_microseconds(ft);

      std::time_t t = static_cast<std::time_t>(micros / 1000000UL);

      boost::uint32_t sub_sec = static_cast<boost::uint32_t>(micros % 1000000UL);




      std::tm curr;
      std::tm* curr_ptr = converter(&t, &curr);
      date_type d(static_cast< typename date_type::year_type::value_type >(curr_ptr->tm_year + 1900),
                  static_cast< typename date_type::month_type::value_type >(curr_ptr->tm_mon + 1),
                  static_cast< typename date_type::day_type::value_type >(curr_ptr->tm_mday));





      int adjust = static_cast< int >(resolution_traits_type::res_adjust() / 1000000);

      time_duration_type td(static_cast< typename time_duration_type::hour_type >(curr_ptr->tm_hour),
                            static_cast< typename time_duration_type::min_type >(curr_ptr->tm_min),
                            static_cast< typename time_duration_type::sec_type >(curr_ptr->tm_sec),
                            sub_sec * adjust);

      return time_type(d,td);
    }
  };


} }
# 10 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/ptime.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/ptime.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/config/no_tr1/cmath.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_duration.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_duration.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_duration.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/static_assert.hpp" 1
# 76 "D:\\my_project\\boost_1_65_1\\boost/static_assert.hpp"
namespace boost{


template <bool x> struct STATIC_ASSERTION_FAILURE;

template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };


template<int x> struct static_assert_test{};

}
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_duration.hpp" 2





namespace boost {
namespace date_time {
# 33 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_duration.hpp"
  template<class T, typename rep_type>
  class time_duration : private
      boost::less_than_comparable<T
    , boost::equality_comparable<T
    > >





  {
  public:

    typedef void _is_boost_date_time_duration;
    typedef T duration_type;
    typedef rep_type traits_type;
    typedef typename rep_type::day_type day_type;
    typedef typename rep_type::hour_type hour_type;
    typedef typename rep_type::min_type min_type;
    typedef typename rep_type::sec_type sec_type;
    typedef typename rep_type::fractional_seconds_type fractional_seconds_type;
    typedef typename rep_type::tick_type tick_type;
    typedef typename rep_type::impl_type impl_type;

    time_duration() : ticks_(0) {}
    time_duration(hour_type hours_in,
                  min_type minutes_in,
                  sec_type seconds_in=0,
                  fractional_seconds_type frac_sec_in = 0) :
      ticks_(rep_type::to_tick_count(hours_in,minutes_in,seconds_in,frac_sec_in))
    {}


    time_duration(const time_duration<T, rep_type>& other)
      : ticks_(other.ticks_)
    {}

    time_duration(special_values sv) : ticks_(impl_type::from_special(sv))
    {}

    static duration_type unit()
    {
      return duration_type(0,0,0,1);
    }

    static tick_type ticks_per_second()
    {
      return rep_type::res_adjust();
    }

    static time_resolutions resolution()
    {
      return rep_type::resolution();
    }

    hour_type hours() const
    {
      return static_cast<hour_type>(ticks() / (3600*ticks_per_second()));
    }

    min_type minutes() const
    {
      return static_cast<min_type>((ticks() / (60*ticks_per_second())) % 60);
    }

    sec_type seconds() const
    {
      return static_cast<sec_type>((ticks()/ticks_per_second()) % 60);
    }

    sec_type total_seconds() const
    {
      return static_cast<sec_type>(ticks() / ticks_per_second());
    }

    tick_type total_milliseconds() const
    {
      if (ticks_per_second() < 1000) {
        return ticks() * (static_cast<tick_type>(1000) / ticks_per_second());
      }
      return ticks() / (ticks_per_second() / static_cast<tick_type>(1000)) ;
    }

    tick_type total_nanoseconds() const
    {
      if (ticks_per_second() < 1000000000) {
        return ticks() * (static_cast<tick_type>(1000000000) / ticks_per_second());
      }
      return ticks() / (ticks_per_second() / static_cast<tick_type>(1000000000)) ;
    }

    tick_type total_microseconds() const
    {
      if (ticks_per_second() < 1000000) {
        return ticks() * (static_cast<tick_type>(1000000) / ticks_per_second());
      }
      return ticks() / (ticks_per_second() / static_cast<tick_type>(1000000)) ;
    }

    fractional_seconds_type fractional_seconds() const
    {
      return (ticks() % ticks_per_second());
    }

    static unsigned short num_fractional_digits()
    {
      return rep_type::num_fractional_digits();
    }
    duration_type invert_sign() const
    {
      return duration_type(ticks_ * (-1));
    }
    bool is_negative() const
    {
      return ticks_ < 0;
    }
    bool operator<(const time_duration& rhs) const
    {
      return ticks_ < rhs.ticks_;
    }
    bool operator==(const time_duration& rhs) const
    {
      return ticks_ == rhs.ticks_;
    }

    duration_type operator-()const
    {
      return duration_type(ticks_ * (-1));
    }
    duration_type operator-(const duration_type& d) const
    {
      return duration_type(ticks_ - d.ticks_);
    }
    duration_type operator+(const duration_type& d) const
    {
      return duration_type(ticks_ + d.ticks_);
    }
    duration_type operator/(int divisor) const
    {
      return duration_type(ticks_ / divisor);
    }
    duration_type operator-=(const duration_type& d)
    {
      ticks_ = ticks_ - d.ticks_;
      return duration_type(ticks_);
    }
    duration_type operator+=(const duration_type& d)
    {
      ticks_ = ticks_ + d.ticks_;
      return duration_type(ticks_);
    }

    duration_type operator/=(int divisor)
    {
      ticks_ = ticks_ / divisor;
      return duration_type(ticks_);
    }

    duration_type operator*(int rhs) const
    {
      return duration_type(ticks_ * rhs);
    }
    duration_type operator*=(int divisor)
    {
      ticks_ = ticks_ * divisor;
      return duration_type(ticks_);
    }
    tick_type ticks() const
    {
      return traits_type::as_number(ticks_);
    }


    bool is_special()const
    {
      if(traits_type::is_adapted())
      {
        return ticks_.is_special();
      }
      else{
        return false;
      }
    }

    bool is_pos_infinity()const
    {
      if(traits_type::is_adapted())
      {
        return ticks_.is_pos_infinity();
      }
      else{
        return false;
      }
    }

    bool is_neg_infinity()const
    {
      if(traits_type::is_adapted())
      {
        return ticks_.is_neg_infinity();
      }
      else{
        return false;
      }
    }

    bool is_not_a_date_time()const
    {
      if(traits_type::is_adapted())
      {
        return ticks_.is_nan();
      }
      else{
        return false;
      }
    }


    impl_type get_rep()const
    {
      return ticks_;
    }

  protected:
    explicit time_duration(impl_type in) : ticks_(in) {}
    impl_type ticks_;
  };







  template<class base_duration, boost::int64_t frac_of_second>
  class subsecond_duration : public base_duration
  {
  public:
    typedef typename base_duration::impl_type impl_type;
    typedef typename base_duration::traits_type traits_type;

  private:

    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((traits_type::ticks_per_second >= frac_of_second ? traits_type::ticks_per_second % frac_of_second : frac_of_second % traits_type::ticks_per_second) == 0) >)> boost_static_assert_typedef_277 ;

    static const boost::int64_t adjustment_ratio = (traits_type::ticks_per_second >= frac_of_second ? traits_type::ticks_per_second / frac_of_second : frac_of_second / traits_type::ticks_per_second);

  public:
    explicit subsecond_duration(boost::int64_t ss) :
      base_duration(impl_type(traits_type::ticks_per_second >= frac_of_second ? ss * adjustment_ratio : ss / adjustment_ratio))
    {
    }
  };



} }
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_resolution_traits.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_resolution_traits.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_resolution_traits.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/int_adapter.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/date_time/int_adapter.hpp"
namespace boost {
namespace date_time {
# 39 "D:\\my_project\\boost_1_65_1\\boost/date_time/int_adapter.hpp"
template<typename int_type_>
class int_adapter {
public:
  typedef int_type_ int_type;
  int_adapter(int_type v) :
    value_(v)
  {}
  static bool has_infinity()
  {
    return true;
  }
  static const int_adapter pos_infinity()
  {
    return (::std::numeric_limits<int_type>::max)();
  }
  static const int_adapter neg_infinity()
  {
    return (::std::numeric_limits<int_type>::min)();
  }
  static const int_adapter not_a_number()
  {
    return (::std::numeric_limits<int_type>::max)()-1;
  }
  static int_adapter max ()
  {
    return (::std::numeric_limits<int_type>::max)()-2;
  }
  static int_adapter min ()
  {
    return (::std::numeric_limits<int_type>::min)()+1;
  }
  static int_adapter from_special(special_values sv)
  {
    switch (sv) {
    case not_a_date_time: return not_a_number();
    case neg_infin: return neg_infinity();
    case pos_infin: return pos_infinity();
    case max_date_time: return (max)();
    case min_date_time: return (min)();
    default: return not_a_number();
    }
  }
  static bool is_inf(int_type v)
  {
    return (v == neg_infinity().as_number() ||
            v == pos_infinity().as_number());
  }
  static bool is_neg_inf(int_type v)
  {
    return (v == neg_infinity().as_number());
  }
  static bool is_pos_inf(int_type v)
  {
    return (v == pos_infinity().as_number());
  }
  static bool is_not_a_number(int_type v)
  {
    return (v == not_a_number().as_number());
  }

  static special_values to_special(int_type v)
  {
    if (is_not_a_number(v)) return not_a_date_time;
    if (is_neg_inf(v)) return neg_infin;
    if (is_pos_inf(v)) return pos_infin;
    return not_special;
  }


  static int_type maxcount()
  {
    return (::std::numeric_limits<int_type>::max)()-3;
  }
  bool is_infinity() const
  {
    return (value_ == neg_infinity().as_number() ||
            value_ == pos_infinity().as_number());
  }
  bool is_pos_infinity()const
  {
    return(value_ == pos_infinity().as_number());
  }
  bool is_neg_infinity()const
  {
    return(value_ == neg_infinity().as_number());
  }
  bool is_nan() const
  {
    return (value_ == not_a_number().as_number());
  }
  bool is_special() const
  {
    return(is_infinity() || is_nan());
  }
  bool operator==(const int_adapter& rhs) const
  {
    return (compare(rhs) == 0);
  }
  bool operator==(const int& rhs) const
  {

    bool is_signed = std::numeric_limits<int_type>::is_signed;
    if(!is_signed)
    {
      if(is_neg_inf(value_) && rhs == 0)
      {
        return false;
      }
    }
    return (compare(rhs) == 0);
  }
  bool operator!=(const int_adapter& rhs) const
  {
    return (compare(rhs) != 0);
  }
  bool operator!=(const int& rhs) const
  {

    bool is_signed = std::numeric_limits<int_type>::is_signed;
    if(!is_signed)
    {
      if(is_neg_inf(value_) && rhs == 0)
      {
        return true;
      }
    }
    return (compare(rhs) != 0);
  }
  bool operator<(const int_adapter& rhs) const
  {
    return (compare(rhs) == -1);
  }
  bool operator<(const int& rhs) const
  {

    bool is_signed = std::numeric_limits<int_type>::is_signed;
    if(!is_signed)
    {
      if(is_neg_inf(value_) && rhs == 0)
      {
        return true;
      }
    }
    return (compare(rhs) == -1);
  }
  bool operator>(const int_adapter& rhs) const
  {
    return (compare(rhs) == 1);
  }
  int_type as_number() const
  {
    return value_;
  }

  special_values as_special() const
  {
    return int_adapter::to_special(value_);
  }
# 205 "D:\\my_project\\boost_1_65_1\\boost/date_time/int_adapter.hpp"
  template<class rhs_type>
  inline
  int_adapter operator+(const int_adapter<rhs_type>& rhs) const
  {
    if(is_special() || rhs.is_special())
    {
      if (is_nan() || rhs.is_nan())
      {
        return int_adapter::not_a_number();
      }
      if((is_pos_inf(value_) && rhs.is_neg_inf(rhs.as_number())) ||
      (is_neg_inf(value_) && rhs.is_pos_inf(rhs.as_number())) )
      {
        return int_adapter::not_a_number();
      }
      if (is_infinity())
      {
        return *this;
      }
      if (rhs.is_pos_inf(rhs.as_number()))
      {
        return int_adapter::pos_infinity();
      }
      if (rhs.is_neg_inf(rhs.as_number()))
      {
        return int_adapter::neg_infinity();
      }
    }
    return int_adapter<int_type>(value_ + static_cast<int_type>(rhs.as_number()));
  }

  int_adapter operator+(const int_type rhs) const
  {
    if(is_special())
    {
      if (is_nan())
      {
        return int_adapter<int_type>(not_a_number());
      }
      if (is_infinity())
      {
        return *this;
      }
    }
    return int_adapter<int_type>(value_ + rhs);
  }



  template<class rhs_type>
  inline
  int_adapter operator-(const int_adapter<rhs_type>& rhs)const
  {
    if(is_special() || rhs.is_special())
    {
      if (is_nan() || rhs.is_nan())
      {
        return int_adapter::not_a_number();
      }
      if((is_pos_inf(value_) && rhs.is_pos_inf(rhs.as_number())) ||
         (is_neg_inf(value_) && rhs.is_neg_inf(rhs.as_number())) )
      {
        return int_adapter::not_a_number();
      }
      if (is_infinity())
      {
        return *this;
      }
      if (rhs.is_pos_inf(rhs.as_number()))
      {
        return int_adapter::neg_infinity();
      }
      if (rhs.is_neg_inf(rhs.as_number()))
      {
        return int_adapter::pos_infinity();
      }
    }
    return int_adapter<int_type>(value_ - static_cast<int_type>(rhs.as_number()));
  }
  int_adapter operator-(const int_type rhs) const
  {
    if(is_special())
    {
      if (is_nan())
      {
        return int_adapter<int_type>(not_a_number());
      }
      if (is_infinity())
      {
        return *this;
      }
    }
    return int_adapter<int_type>(value_ - rhs);
  }


  int_adapter operator*(const int_adapter& rhs)const
  {
    if(this->is_special() || rhs.is_special())
    {
      return mult_div_specials(rhs);
    }
    return int_adapter<int_type>(value_ * rhs.value_);
  }


  int_adapter operator*(const int rhs) const
  {
    if(is_special())
    {
      return mult_div_specials(rhs);
    }
    return int_adapter<int_type>(value_ * rhs);
  }


  int_adapter operator/(const int_adapter& rhs)const
  {
    if(this->is_special() || rhs.is_special())
    {
      if(is_infinity() && rhs.is_infinity())
      {
        return int_adapter<int_type>(not_a_number());
      }
      if(rhs != 0)
      {
        return mult_div_specials(rhs);
      }
      else {
        return int_adapter<int_type>(value_ / rhs.value_);
      }
    }
    return int_adapter<int_type>(value_ / rhs.value_);
  }


  int_adapter operator/(const int rhs) const
  {
    if(is_special() && rhs != 0)
    {
      return mult_div_specials(rhs);
    }
    return int_adapter<int_type>(value_ / rhs);
  }


  int_adapter operator%(const int_adapter& rhs)const
  {
    if(this->is_special() || rhs.is_special())
    {
      if(is_infinity() && rhs.is_infinity())
      {
        return int_adapter<int_type>(not_a_number());
      }
      if(rhs != 0)
      {
        return mult_div_specials(rhs);
      }
      else {
        return int_adapter<int_type>(value_ % rhs.value_);
      }
    }
    return int_adapter<int_type>(value_ % rhs.value_);
  }


  int_adapter operator%(const int rhs) const
  {
    if(is_special() && rhs != 0)
    {
      return mult_div_specials(rhs);
    }
    return int_adapter<int_type>(value_ % rhs);
  }
private:
  int_type value_;


  int compare(const int_adapter& rhs)const
  {
    if(this->is_special() || rhs.is_special())
    {
      if(this->is_nan() || rhs.is_nan()) {
        if(this->is_nan() && rhs.is_nan()) {
          return 0;
        }
        else {
          return 2;
        }
      }
      if((is_neg_inf(value_) && !is_neg_inf(rhs.value_)) ||
         (is_pos_inf(rhs.value_) && !is_pos_inf(value_)) )
        {
          return -1;
        }
      if((is_pos_inf(value_) && !is_pos_inf(rhs.value_)) ||
         (is_neg_inf(rhs.value_) && !is_neg_inf(value_)) ) {
        return 1;
      }
    }
    if(value_ < rhs.value_) return -1;
    if(value_ > rhs.value_) return 1;

    return 0;
  }





  int_adapter mult_div_specials(const int_adapter& rhs)const
  {
    int min_value;

    bool is_signed = std::numeric_limits<int_type>::is_signed;
    if(is_signed) {
      min_value = 0;
    }
    else {
      min_value = 1;
    }
    if(this->is_nan() || rhs.is_nan()) {
      return int_adapter<int_type>(not_a_number());
    }
    if((*this > 0 && rhs > 0) || (*this < min_value && rhs < min_value)) {
        return int_adapter<int_type>(pos_infinity());
    }
    if((*this > 0 && rhs < min_value) || (*this < min_value && rhs > 0)) {
        return int_adapter<int_type>(neg_infinity());
    }

    return int_adapter<int_type>(not_a_number());
  }






  int_adapter mult_div_specials(const int& rhs) const
  {
    int min_value;

    bool is_signed = std::numeric_limits<int_type>::is_signed;
    if(is_signed) {
      min_value = 0;
    }
    else {
      min_value = 1;
    }
    if(this->is_nan()) {
      return int_adapter<int_type>(not_a_number());
    }
    if((*this > 0 && rhs > 0) || (*this < min_value && rhs < 0)) {
        return int_adapter<int_type>(pos_infinity());
    }
    if((*this > 0 && rhs < 0) || (*this < min_value && rhs > 0)) {
        return int_adapter<int_type>(neg_infinity());
    }

    return int_adapter<int_type>(not_a_number());
  }

};






  template<class charT, class traits, typename int_type>
  inline
  std::basic_ostream<charT, traits>&
  operator<<(std::basic_ostream<charT, traits>& os, const int_adapter<int_type>& ia)
  {
    if(ia.is_special()) {

      switch(ia.as_special())
        {
      case not_a_date_time:
        os << "not-a-number";
        break;
      case pos_infin:
        os << "+infinity";
        break;
      case neg_infin:
        os << "-infinity";
        break;
      default:
        os << "";
      }
    }
    else {
      os << ia.as_number();
    }
    return os;
  }



} }
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_resolution_traits.hpp" 2



namespace boost {
namespace date_time {


  template <typename T>


  inline T absolute_value(T x)
  {
    return x < 0 ? -x : x;
  }


  struct time_resolution_traits_bi32_impl {
    typedef boost::int32_t int_type;
    typedef boost::int32_t impl_type;
    static int_type as_number(impl_type i){ return i;}

    static bool is_adapted() { return false;}
  };

  struct time_resolution_traits_adapted32_impl {
    typedef boost::int32_t int_type;
    typedef boost::date_time::int_adapter<boost::int32_t> impl_type;
    static int_type as_number(impl_type i){ return i.as_number();}

    static bool is_adapted() { return true;}
  };

  struct time_resolution_traits_bi64_impl {
    typedef boost::int64_t int_type;
    typedef boost::int64_t impl_type;
    static int_type as_number(impl_type i){ return i;}

    static bool is_adapted() { return false;}
  };

  struct time_resolution_traits_adapted64_impl {
    typedef boost::int64_t int_type;
    typedef boost::date_time::int_adapter<boost::int64_t> impl_type;
    static int_type as_number(impl_type i){ return i.as_number();}

    static bool is_adapted() { return true;}
  };

  template<typename frac_sec_type,
           time_resolutions res,



           typename frac_sec_type::int_type resolution_adjust,

           unsigned short frac_digits,
           typename var_type = std::time_t >
  class time_resolution_traits {
  public:
    typedef typename frac_sec_type::int_type fractional_seconds_type;
    typedef typename frac_sec_type::int_type tick_type;
    typedef typename frac_sec_type::impl_type impl_type;
    typedef var_type day_type;
    typedef var_type hour_type;
    typedef var_type min_type;
    typedef var_type sec_type;


    static fractional_seconds_type as_number(impl_type i)
    {
      return frac_sec_type::as_number(i);
    }
    static bool is_adapted()
    {
      return frac_sec_type::is_adapted();
    }





    static const fractional_seconds_type ticks_per_second = resolution_adjust;


    static time_resolutions resolution()
    {
      return res;
    }
    static unsigned short num_fractional_digits()
    {
      return frac_digits;
    }
    static fractional_seconds_type res_adjust()
    {
      return resolution_adjust;
    }

    static tick_type to_tick_count(hour_type hours,
                                   min_type minutes,
                                   sec_type seconds,
                                   fractional_seconds_type fs)
    {
      if(hours < 0 || minutes < 0 || seconds < 0 || fs < 0)
      {
        hours = absolute_value(hours);
        minutes = absolute_value(minutes);
        seconds = absolute_value(seconds);
        fs = absolute_value(fs);
        return static_cast<tick_type>(((((fractional_seconds_type(hours)*3600)
                                       + (fractional_seconds_type(minutes)*60)
                                       + seconds)*res_adjust()) + fs) * -1);
      }

      return static_cast<tick_type>((((fractional_seconds_type(hours)*3600)
                                    + (fractional_seconds_type(minutes)*60)
                                    + seconds)*res_adjust()) + fs);
    }

  };

  typedef time_resolution_traits<time_resolution_traits_adapted32_impl, milli, 1000, 3 > milli_res;
  typedef time_resolution_traits<time_resolution_traits_adapted64_impl, micro, 1000000, 6 > micro_res;
  typedef time_resolution_traits<time_resolution_traits_adapted64_impl, nano, 1000000000, 9 > nano_res;


} }
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/date.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/year_month_day.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/year_month_day.hpp"
namespace boost {
namespace date_time {


  template<typename YearType, typename MonthType, typename DayType>
  struct year_month_day_base {
    year_month_day_base(YearType year,
                        MonthType month,
                        DayType day);
    YearType year;
    MonthType month;
    DayType day;
    typedef YearType year_type;
    typedef MonthType month_type;
    typedef DayType day_type;
  };



  template<typename YearType, typename MonthType, typename DayType>
  inline
  year_month_day_base<YearType,MonthType,DayType>::year_month_day_base(YearType y,
                                                                       MonthType m,
                                                                       DayType d) :
    year(y),
    month(m),
    day(d)
  {}

} }
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/date.hpp" 2



namespace boost {
namespace date_time {
# 53 "D:\\my_project\\boost_1_65_1\\boost/date_time/date.hpp"
  template<class T, class calendar, class duration_type_>
  class date : private
       boost::less_than_comparable<T
     , boost::equality_comparable<T
    > >
  {
  public:
    typedef T date_type;
    typedef calendar calendar_type;
    typedef typename calendar::date_traits_type traits_type;
    typedef duration_type_ duration_type;
    typedef typename calendar::year_type year_type;
    typedef typename calendar::month_type month_type;
    typedef typename calendar::day_type day_type;
    typedef typename calendar::ymd_type ymd_type;
    typedef typename calendar::date_rep_type date_rep_type;
    typedef typename calendar::date_int_type date_int_type;
    typedef typename calendar::day_of_week_type day_of_week_type;
    date(year_type y, month_type m, day_type d)
      : days_(calendar::day_number(ymd_type(y, m, d)))
    {}
    date(const ymd_type& ymd)
      : days_(calendar::day_number(ymd))
    {}

    year_type year() const
    {
      ymd_type ymd = calendar::from_day_number(days_);
      return ymd.year;
    }
    month_type month() const
    {
      ymd_type ymd = calendar::from_day_number(days_);
      return ymd.month;
    }
    day_type day() const
    {
      ymd_type ymd = calendar::from_day_number(days_);
      return ymd.day;
    }
    day_of_week_type day_of_week() const
    {
      ymd_type ymd = calendar::from_day_number(days_);
      return calendar::day_of_week(ymd);
    }
    ymd_type year_month_day() const
    {
      return calendar::from_day_number(days_);
    }
    bool operator<(const date_type& rhs) const
    {
      return days_ < rhs.days_;
    }
    bool operator==(const date_type& rhs) const
    {
      return days_ == rhs.days_;
    }

    bool is_special()const
    {
      return(is_not_a_date() || is_infinity());
    }

    bool is_not_a_date() const
    {
      return traits_type::is_not_a_number(days_);
    }

    bool is_infinity() const
    {
      return traits_type::is_inf(days_);
    }

    bool is_pos_infinity() const
    {
      return traits_type::is_pos_inf(days_);
    }

    bool is_neg_infinity() const
    {
      return traits_type::is_neg_inf(days_);
    }

    special_values as_special() const
    {
      return traits_type::to_special(days_);
    }
    duration_type operator-(const date_type& d) const
    {
      if (!this->is_special() && !d.is_special())
      {


        typedef typename duration_type::duration_rep_type duration_rep_type;
        return duration_type(static_cast< duration_rep_type >(days_) - static_cast< duration_rep_type >(d.days_));
      }
      else
      {

        date_rep_type val = date_rep_type(days_) - date_rep_type(d.days_);
        return duration_type(val.as_special());
      }
    }

    date_type operator-(const duration_type& dd) const
    {
      if(dd.is_special())
      {
        return date_type(date_rep_type(days_) - dd.get_rep());
      }
      return date_type(date_rep_type(days_) - static_cast<date_int_type>(dd.days()));
    }
    date_type operator-=(const duration_type& dd)
    {
      *this = *this - dd;
      return date_type(days_);
    }
    date_rep_type day_count() const
    {
      return days_;
    }

    date_type operator+(const duration_type& dd) const
    {
      if(dd.is_special())
      {
        return date_type(date_rep_type(days_) + dd.get_rep());
      }
      return date_type(date_rep_type(days_) + static_cast<date_int_type>(dd.days()));
    }
    date_type operator+=(const duration_type& dd)
    {
      *this = *this + dd;
      return date_type(days_);
    }


  protected:




    explicit date(date_int_type days) : days_(days) {}
    explicit date(date_rep_type days) : days_(days.as_number()) {}
    date_int_type days_;

  };




} }
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
namespace boost {
namespace date_time {
# 51 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  class period : private
      boost::less_than_comparable<period<point_rep, duration_rep>
    , boost::equality_comparable< period<point_rep, duration_rep>
    > >
  {
  public:
    typedef point_rep point_type;
    typedef duration_rep duration_type;

    period(point_rep first_point, point_rep end_point);
    period(point_rep first_point, duration_rep len);
    point_rep begin() const;
    point_rep end() const;
    point_rep last() const;
    duration_rep length() const;
    bool is_null() const;
    bool operator==(const period& rhs) const;
    bool operator<(const period& rhs) const;
    void shift(const duration_rep& d);
    void expand(const duration_rep& d);
    bool contains(const point_rep& point) const;
    bool contains(const period& other) const;
    bool intersects(const period& other) const;
    bool is_adjacent(const period& other) const;
    bool is_before(const point_rep& point) const;
    bool is_after(const point_rep& point) const;
    period intersection(const period& other) const;
    period merge(const period& other) const;
    period span(const period& other) const;
  private:
    point_rep begin_;
    point_rep last_;
  };




  template<class point_rep, class duration_rep>
  inline
  period<point_rep,duration_rep>::period(point_rep first_point,
                                         point_rep end_point) :
    begin_(first_point),
    last_(end_point - duration_rep::unit())
  {}




  template<class point_rep, class duration_rep>
  inline
  period<point_rep,duration_rep>::period(point_rep first_point, duration_rep len) :
    begin_(first_point),
    last_(first_point + len-duration_rep::unit())
  { }



  template<class point_rep, class duration_rep>
  inline
  point_rep period<point_rep,duration_rep>::begin() const
  {
    return begin_;
  }


  template<class point_rep, class duration_rep>
  inline
  point_rep period<point_rep,duration_rep>::end() const
  {
    return last_ + duration_rep::unit();
  }


  template<class point_rep, class duration_rep>
  inline
  point_rep period<point_rep,duration_rep>::last() const
  {
    return last_;
  }


  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::is_null() const
  {
    return end() <= begin_;
  }


  template<class point_rep, class duration_rep>
  inline
  duration_rep period<point_rep,duration_rep>::length() const
  {
    if(last_ < begin_){
      return last_+duration_rep::unit() - begin_;
    }
    else{
      return end() - begin_;
    }
  }


  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::operator==(const period& rhs) const
  {
    return ((begin_ == rhs.begin_) &&
             (last_ == rhs.last_));
  }


  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::operator<(const period& rhs) const
  {
    return (last_ < rhs.begin_);
  }



  template<class point_rep, class duration_rep>
  inline
  void period<point_rep,duration_rep>::shift(const duration_rep& d)
  {
    begin_ = begin_ + d;
    last_ = last_ + d;
  }
# 199 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  void period<point_rep,duration_rep>::expand(const duration_rep& d)
  {
    begin_ = begin_ - d;
    last_ = last_ + d;
  }


  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::contains(const point_rep& point) const
  {
    return ((point >= begin_) &&
            (point <= last_));
  }



  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::contains(const period<point_rep,duration_rep>& other) const
  {
    return ((begin_ <= other.begin_) && (last_ >= other.last_));
  }
# 235 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  bool
  period<point_rep,duration_rep>::is_adjacent(const period<point_rep,duration_rep>& other) const
  {
    return (other.begin() == end() ||
            begin_ == other.end());
  }
# 254 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  bool
  period<point_rep,duration_rep>::is_after(const point_rep& t) const
  {
    if (is_null())
    {
      return false;
    }

    return t < begin_;
  }
# 276 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  bool
  period<point_rep,duration_rep>::is_before(const point_rep& t) const
  {
    if (is_null())
    {
      return false;
    }

    return last_ < t;
  }
# 301 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  bool period<point_rep,duration_rep>::intersects(const period<point_rep,duration_rep>& other) const
  {
    return ( contains(other.begin_) ||
             other.contains(begin_) ||
             ((other.begin_ < begin_) && (other.last_ >= begin_)));
  }


  template<class point_rep, class duration_rep>
  inline
  period<point_rep,duration_rep>
  period<point_rep,duration_rep>::intersection(const period<point_rep,duration_rep>& other) const
  {
    if (begin_ > other.begin_) {
      if (last_ <= other.last_) {
        return *this;
      }

      return period<point_rep,duration_rep>(begin_, other.end());
    }
    else {
      if (last_ <= other.last_) {
        return period<point_rep,duration_rep>(other.begin_, this->end());
      }

      return other;
    }

  }




  template<class point_rep, class duration_rep>
  inline
  period<point_rep,duration_rep>
  period<point_rep,duration_rep>::merge(const period<point_rep,duration_rep>& other) const
  {
    if (this->intersects(other)) {
      if (begin_ < other.begin_) {
        return period<point_rep,duration_rep>(begin_, last_ > other.last_ ? this->end() : other.end());
      }

      return period<point_rep,duration_rep>(other.begin_, last_ > other.last_ ? this->end() : other.end());

    }
    return period<point_rep,duration_rep>(begin_,begin_);
  }
# 363 "D:\\my_project\\boost_1_65_1\\boost/date_time/period.hpp"
  template<class point_rep, class duration_rep>
  inline
  period<point_rep,duration_rep>
  period<point_rep,duration_rep>::span(const period<point_rep,duration_rep>& other) const
  {
    point_rep start((begin_ < other.begin_) ? begin() : other.begin());
    point_rep newend((last_ < other.last_) ? other.end() : this->end());
    return period<point_rep,duration_rep>(start, newend);
  }


} }
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_weekday.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_weekday.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/constrained_value.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/constrained_value.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/static_cast.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/static_cast.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/workaround.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/static_cast.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/integral.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/integral.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/msvc.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/integral.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/eti.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp" 2
# 73 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename T > struct value_type_wknd
{
    typedef typename T::value_type type;
};
# 87 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/value_wknd.hpp"
}}}
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/void_fwd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/void_fwd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/adl_barrier.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/adl_barrier.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/adl.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/adl.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/intel.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/adl.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/gcc.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/adl.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/adl_barrier.hpp" 2
# 33 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/adl_barrier.hpp"
namespace mpl_ { namespace aux {} }
namespace boost { namespace mpl { using namespace mpl_;
namespace aux { using namespace mpl_::aux; }
}}
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/void_fwd.hpp" 2


namespace mpl_ {

struct void_;

}
namespace boost { namespace mpl { using ::mpl_::void_; } }
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool_fwd.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool_fwd.hpp"
namespace mpl_ {

template< bool C_ > struct bool_;


typedef bool_<true> true_;
typedef bool_<false> false_;

}

namespace boost { namespace mpl { using ::mpl_::bool_; } }
namespace boost { namespace mpl { using ::mpl_::true_; } }
namespace boost { namespace mpl { using ::mpl_::false_; } }
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c_tag.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c_tag.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/static_constant.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c_tag.hpp" 2


namespace mpl_ {
struct integral_c_tag { static const int value = 0; };
}
namespace boost { namespace mpl { using ::mpl_::integral_c_tag; } }
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/bool.hpp" 2



namespace mpl_ {

template< bool C_ > struct bool_
{
    static const bool value = C_;
    typedef integral_c_tag tag;
    typedef bool_ type;
    typedef bool value_type;
                    operator bool() const { return this->value; }
};


template< bool C_ >
bool const bool_<C_>::value;


}
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_fwd.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_fwd.hpp"
namespace mpl_ {


struct na
{
    typedef na type;
    enum { value = 0 };
};

}
namespace boost { namespace mpl { using ::mpl_::na; } }
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/ctps.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp" 2


namespace boost { namespace mpl {

template< typename T >
struct is_na
    : false_
{



};

template<>
struct is_na<na>
    : true_
{



};

template< typename T >
struct is_not_na
    : true_
{



};

template<>
struct is_not_na<na>
    : false_
{



};


template< typename T, typename U > struct if_na
{
    typedef T type;
};

template< typename U > struct if_na<na,U>
{
    typedef U type;
};
# 93 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na.hpp"
}}
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/lambda.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/lambda.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/ttp.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/lambda.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/int.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/int.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/int_fwd.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/int_fwd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/nttp_decl.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/nttp_decl.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/nttp.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/nttp_decl.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/int_fwd.hpp" 2


namespace mpl_ {

template< int N > struct int_;

}
namespace boost { namespace mpl { using ::mpl_::int_; } }
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/int.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< int N >
struct int_
{
    static const int value = N;





    typedef int_ type;

    typedef int value_type;
    typedef integral_c_tag tag;
# 72 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef mpl_::int_< static_cast<int>((value + 1)) > next;
    typedef mpl_::int_< static_cast<int>((value - 1)) > prior;






                    operator int() const { return static_cast<int>(this->value); }
};


template< int N >
int const mpl_::int_< N >::value;


}
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/int.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/lambda_arity_param.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/template_arity_fwd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/template_arity_fwd.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename F > struct template_arity;

}}}
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda_fwd.hpp" 2


namespace boost { namespace mpl {

template<
      typename T = na
    , typename Tag = void_



    >
struct lambda;

}}
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/arity.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/arity.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/dtp.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/arity.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/preprocessor.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp" 2
# 46 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/inc.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/inc.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/inc.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/inc.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/inc.hpp" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/inc.hpp" 2
# 47 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 48 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/params.hpp" 2
# 26 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/enum.hpp" 1
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/enum.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 1
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/enum.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp" 1
# 46 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/enum.hpp" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/limits/arity.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/and.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/and.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/and.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/and.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bitand.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bitand.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bitand.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/and.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/identity.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/identity.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/identity.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/identity.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/identity.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/identity.hpp" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/identity.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/empty.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/empty.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/empty.hpp" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2
# 66 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/inc.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 2
# 41 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/expr_iif.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/expr_iif.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/expr_iif.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/is_binary.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/is_binary.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/is_binary.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/check.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/check.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/check.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/check.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/is_binary.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/compl.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/compl.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/compl.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/adt.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_left.hpp" 2
# 41 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_right.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_right.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_right.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/reverse.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/reverse.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/reverse.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_left.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/reverse.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/detail/fold_right.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/list/fold_right.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bitand.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2
# 48 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/detail/while.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/detail/while.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/detail/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/detail/while.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/detail/while.hpp" 2
# 48 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/expand.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/expand.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/expand.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/overload.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/overload.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/overload.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/size.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/size.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/size.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/size.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/overload.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/expand.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/overload.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/detail/is_single_return.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/detail/is_single_return.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/detail/is_single_return.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/elem.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/elem.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/variadic/elem.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/detail/is_single_return.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/add.hpp" 2
# 66 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/while.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/sub.hpp" 2
# 67 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/inc.hpp" 1
# 68 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 69 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp" 1
# 70 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 71 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2
# 28 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2







# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/overload_resolution.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_spec.hpp" 2
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/lambda_support.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp" 2





namespace boost { namespace mpl {



template<
      bool C
    , typename T1
    , typename T2
    >
struct if_c
{
    typedef T1 type;
};

template<
      typename T1
    , typename T2
    >
struct if_c<false,T1,T2>
{
    typedef T2 type;
};



template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = na
    >
struct if_
{
 private:

    typedef if_c<



          static_cast<bool>(T1::value)

        , T2
        , T3
        > almost_type_;

 public:
    typedef typename almost_type_::type type;


};
# 131 "D:\\my_project\\boost_1_65_1\\boost/mpl/if.hpp"
template<> struct if_< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : if_< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< if_< na , na , na > , Tag > { typedef false_ is_le; typedef if_< na , na , na > result_; typedef if_< na , na , na > type; };

}}
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/constrained_value.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_of.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_of.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/intrinsics.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/intrinsics.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/version.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/config.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/intrinsics.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/integral_constant.hpp" 1
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/integral_constant.hpp"
namespace mpl_{

   template <bool B> struct bool_;
   template <class I, I val> struct integral_c;
   struct integral_c_tag;
}

namespace boost
{
   namespace mpl
   {
      using ::mpl_::bool_;
      using ::mpl_::integral_c;
      using ::mpl_::integral_c_tag;
   }
}



namespace boost{

   template <class T, T val>
   struct integral_constant
   {
      typedef mpl::integral_c_tag tag;
      typedef T value_type;
      typedef integral_constant<T, val> type;
      static const T value = val;




      template <class U>
      static U& dereference(U* p) { return *p; }

      operator const mpl::integral_c<T, val>& ()const
      {
         static const char data[sizeof(long)] = { 0 };
         return dereference(reinterpret_cast<const mpl::integral_c<T, val>*>(&data));
      }
                      operator T()const { return val; }
   };

   template <class T, T val>
   T const integral_constant<T, val>::value;

   template <bool val>
   struct integral_constant<bool, val>
   {
      typedef mpl::integral_c_tag tag;
      typedef bool value_type;
      typedef integral_constant<bool, val> type;
      static const bool value = val;




      template <class T>
      static T& dereference(T* p) { return *p; }

      operator const mpl::bool_<val>& ()const
      {
         static const char data = 0;
         return dereference(reinterpret_cast<const mpl::bool_<val>*>(&data));
      }
                      operator bool()const { return val; }
   };

   template <bool val>
   bool const integral_constant<bool, val>::value;

   typedef integral_constant<bool, true> true_type;
   typedef integral_constant<bool, false> false_type;

}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_union.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_union.hpp"
namespace boost {




template <class T> struct is_union : public integral_constant<bool, false> {};


template <class T> struct is_union<T const> : public is_union<T>{};
template <class T> struct is_union<T volatile const> : public is_union<T>{};
template <class T> struct is_union<T volatile> : public is_union<T>{};

}
# 17 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/yes_no_type.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/yes_no_type.hpp"
namespace boost {
namespace type_traits {

typedef char yes_type;
struct no_type
{
   char padding[8];
};

}
}
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp"
namespace boost {

namespace detail {
# 65 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp"
template <typename T>
struct is_class_impl
{
    template <class U> static ::boost::type_traits::yes_type is_class_tester(void(U::*)(void));
    template <class U> static ::boost::type_traits::no_type is_class_tester(...);

    static const bool value = sizeof(is_class_tester<T>(0)) == sizeof(::boost::type_traits::yes_type) && ! ::boost::is_union<T>::value;



};
# 103 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_class.hpp"
}

template <class T> struct is_class : public integral_constant<bool, ::boost::detail::is_class_impl<T>::value> {};






}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_same.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_same.hpp"
namespace boost {


   template <class T, class U> struct is_same : public false_type {};
   template <class T> struct is_same<T,T> : public true_type {};







}
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_array.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_array.hpp"
namespace boost {




   template <class T> struct is_array : public false_type {};

   template <class T, std::size_t N> struct is_array<T[N]> : public true_type {};
   template <class T, std::size_t N> struct is_array<T const[N]> : public true_type{};
   template <class T, std::size_t N> struct is_array<T volatile[N]> : public true_type{};
   template <class T, std::size_t N> struct is_array<T const volatile[N]> : public true_type{};

   template <class T> struct is_array<T[]> : public true_type{};
   template <class T> struct is_array<T const[]> : public true_type{};
   template <class T> struct is_array<T const volatile[]> : public true_type{};
   template <class T> struct is_array<T volatile[]> : public true_type{};





}
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_arithmetic.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_arithmetic.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_integral.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_integral.hpp"
namespace boost {






template <class T> struct is_integral : public false_type {};
template <class T> struct is_integral<const T> : public is_integral<T> {};
template <class T> struct is_integral<volatile const T> : public is_integral<T>{};
template <class T> struct is_integral<volatile T> : public is_integral<T>{};




template<> struct is_integral<unsigned char> : public true_type {};
template<> struct is_integral<unsigned short> : public true_type{};
template<> struct is_integral<unsigned int> : public true_type{};
template<> struct is_integral<unsigned long> : public true_type{};

template<> struct is_integral<signed char> : public true_type{};
template<> struct is_integral<short> : public true_type{};
template<> struct is_integral<int> : public true_type{};
template<> struct is_integral<long> : public true_type{};

template<> struct is_integral<char> : public true_type{};
template<> struct is_integral<bool> : public true_type{};





template<> struct is_integral<wchar_t> : public true_type{};
# 67 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_integral.hpp"
template<> struct is_integral< ::boost::ulong_long_type> : public true_type{};
template<> struct is_integral< ::boost::long_long_type> : public true_type{};
# 87 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_integral.hpp"
}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_arithmetic.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_floating_point.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_floating_point.hpp"
namespace boost {


   template <class T> struct is_floating_point : public false_type{};
   template <class T> struct is_floating_point<const T> : public is_floating_point<T>{};
   template <class T> struct is_floating_point<volatile const T> : public is_floating_point<T>{};
   template <class T> struct is_floating_point<volatile T> : public is_floating_point<T>{};
   template<> struct is_floating_point<float> : public true_type{};
   template<> struct is_floating_point<double> : public true_type{};
   template<> struct is_floating_point<long double> : public true_type{};





}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_arithmetic.hpp" 2


namespace boost {

template <class T>
struct is_arithmetic : public integral_constant<bool, is_integral<T>::value || is_floating_point<T>::value> {};

}
# 21 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_void.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_void.hpp"
namespace boost {

template <class T>
struct is_void : public false_type {};

template<> struct is_void<void> : public true_type {};
template<> struct is_void<const void> : public true_type{};
template<> struct is_void<const volatile void> : public true_type{};
template<> struct is_void<volatile void> : public true_type{};

}
# 22 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_lvalue_reference.hpp" 1








# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_reference.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_reference.hpp"
namespace boost {

namespace detail {






template <typename T>
struct add_reference_impl
{
    typedef T& type;
};
# 38 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_reference.hpp"
}

template <class T> struct add_reference
{
   typedef typename boost::detail::add_reference_impl<T>::type type;
};
template <class T> struct add_reference<T&>
{
   typedef T& type;
};


template <> struct add_reference<void> { typedef void type; };

template <> struct add_reference<const void> { typedef const void type; };
template <> struct add_reference<const volatile void> { typedef const volatile void type; };
template <> struct add_reference<volatile void> { typedef volatile void type; };
# 64 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_reference.hpp"
}
# 9 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_lvalue_reference.hpp" 2


namespace boost{

template <class T> struct add_lvalue_reference
{
   typedef typename boost::add_reference<T>::type type;
};
# 31 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_lvalue_reference.hpp"
}
# 26 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_rvalue_reference.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_rvalue_reference.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_reference.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_reference.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_lvalue_reference.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_lvalue_reference.hpp"
namespace boost {





   template <class T> struct is_lvalue_reference : public false_type{};
   template <class T> struct is_lvalue_reference<T&> : public true_type{};
# 47 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_lvalue_reference.hpp"
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_reference.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_rvalue_reference.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_rvalue_reference.hpp"
namespace boost {

template <class T> struct is_rvalue_reference : public false_type {};




}
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_reference.hpp" 2


namespace boost {

template <class T> struct is_reference
   : public
   integral_constant<
      bool,
      ::boost::is_lvalue_reference<T>::value || ::boost::is_rvalue_reference<T>::value>
{};

}
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_rvalue_reference.hpp" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_rvalue_reference.hpp"
namespace boost {

namespace type_traits_detail {

    template <typename T, bool b>
    struct add_rvalue_reference_helper
    { typedef T type; };
# 47 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_rvalue_reference.hpp"
    template <typename T>
    struct add_rvalue_reference_imp
    {
       typedef typename boost::type_traits_detail::add_rvalue_reference_helper
                  <T, (is_void<T>::value == false && is_reference<T>::value == false) >::type type;
    };

}

template <class T> struct add_rvalue_reference
{
   typedef typename boost::type_traits_detail::add_rvalue_reference_imp<T>::type type;
};







}
# 27 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_function_ptr_tester.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_function_ptr_tester.hpp"
namespace boost {
namespace type_traits {



no_type is_function_ptr_tester(...);





template <class R >
yes_type is_function_ptr_tester(R (*)());
template <class R >
yes_type is_function_ptr_tester(R (*)( ...));

template <class R >
yes_type is_function_ptr_tester(R (__stdcall*)());

template <class R >
yes_type is_function_ptr_tester(R (__fastcall*)());

template <class R >
yes_type is_function_ptr_tester(R (__cdecl*)());

template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0));
template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0 ...));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1));
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 ...));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2));
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 ...));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3));
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 ...));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
# 418 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_function_ptr_tester.hpp"
}
}
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp"
namespace boost {



namespace detail {
# 60 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp"
template <typename T>
struct is_function_impl
{




    static T* t;
    static const bool value = sizeof(::boost::type_traits::is_function_ptr_tester(t)) == sizeof(::boost::type_traits::yes_type);






};

template <typename T>
struct is_function_impl<T&> : public false_type
{};
# 88 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_function.hpp"
}






template <class T> struct is_function : integral_constant<bool, ::boost::detail::is_function_impl<T>::value> {};




}
# 28 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp" 2
# 41 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
namespace boost {
# 55 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
namespace detail {
# 306 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
template <typename From>
struct is_convertible_basic_impl_add_lvalue_reference
   : add_lvalue_reference<From>
{};

template <typename From>
struct is_convertible_basic_impl_add_lvalue_reference<From[]>
{
    typedef From type [];
};

template <typename From, typename To>
struct is_convertible_basic_impl
{
    static ::boost::type_traits::no_type _m_check(...);
    static ::boost::type_traits::yes_type _m_check(To);
    typedef typename is_convertible_basic_impl_add_lvalue_reference<From>::type lvalue_type;
    static lvalue_type _m_from;
# 337 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
    static const bool value = sizeof( _m_check(_m_from) ) == sizeof(::boost::type_traits::yes_type);






};
# 358 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
template <typename From, typename To>
struct is_convertible_impl
{
   static const bool value = ( ::boost::detail::is_convertible_basic_impl<From, To>::value && !::boost::is_array<To>::value && !::boost::is_function<To>::value);
};


template <bool trivial1, bool trivial2, bool abstract_target>
struct is_convertible_impl_select
{
   template <class From, class To>
   struct rebind
   {
      typedef is_convertible_impl<From, To> type;
   };
};

template <>
struct is_convertible_impl_select<true, true, false>
{
   template <class From, class To>
   struct rebind
   {
      typedef true_type type;
   };
};

template <>
struct is_convertible_impl_select<false, false, true>
{
   template <class From, class To>
   struct rebind
   {
      typedef false_type type;
   };
};

template <>
struct is_convertible_impl_select<true, false, true>
{
   template <class From, class To>
   struct rebind
   {
      typedef false_type type;
   };
};

template <typename From, typename To>
struct is_convertible_impl_dispatch_base
{

   typedef is_convertible_impl_select<
      ::boost::is_arithmetic<From>::value,
      ::boost::is_arithmetic<To>::value,




      false

   > selector;



   typedef typename selector::template rebind<From, To> isc_binder;
   typedef typename isc_binder::type type;
};

template <typename From, typename To>
struct is_convertible_impl_dispatch
   : public is_convertible_impl_dispatch_base<From, To>::type
{};
# 438 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
template <> struct is_convertible_impl_dispatch<void, void> : public true_type{};
template <> struct is_convertible_impl_dispatch<void, void const> : public true_type{};
template <> struct is_convertible_impl_dispatch<void, void const volatile> : public true_type{};
template <> struct is_convertible_impl_dispatch<void, void volatile> : public true_type{};

template <> struct is_convertible_impl_dispatch<void const, void> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const, void const> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const, void const volatile> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const, void volatile> : public true_type{};

template <> struct is_convertible_impl_dispatch<void const volatile, void> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const volatile, void const> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const volatile, void const volatile> : public true_type{};
template <> struct is_convertible_impl_dispatch<void const volatile, void volatile> : public true_type{};

template <> struct is_convertible_impl_dispatch<void volatile, void> : public true_type{};
template <> struct is_convertible_impl_dispatch<void volatile, void const> : public true_type{};
template <> struct is_convertible_impl_dispatch<void volatile, void const volatile> : public true_type{};
template <> struct is_convertible_impl_dispatch<void volatile, void volatile> : public true_type{};





template <class To> struct is_convertible_impl_dispatch<void, To> : public false_type{};
template <class From> struct is_convertible_impl_dispatch<From, void> : public false_type{};


template <class To> struct is_convertible_impl_dispatch<void const, To> : public false_type{};
template <class From> struct is_convertible_impl_dispatch<From, void const> : public false_type{};
template <class To> struct is_convertible_impl_dispatch<void const volatile, To> : public false_type{};
template <class From> struct is_convertible_impl_dispatch<From, void const volatile> : public false_type{};
template <class To> struct is_convertible_impl_dispatch<void volatile, To> : public false_type{};
template <class From> struct is_convertible_impl_dispatch<From, void volatile> : public false_type{};


}

template <class From, class To>
struct is_convertible : public integral_constant<bool, ::boost::detail::is_convertible_impl_dispatch<From, To>::value> {};
# 486 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_convertible.hpp"
}
# 17 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_cv.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_cv.hpp"
namespace boost {


template <class T> struct remove_cv{ typedef T type; };
template <class T> struct remove_cv<T const>{ typedef T type; };
template <class T> struct remove_cv<T volatile>{ typedef T type; };
template <class T> struct remove_cv<T const volatile>{ typedef T type; };


template <class T, std::size_t N> struct remove_cv<T const[N]>{ typedef T type[N]; };
template <class T, std::size_t N> struct remove_cv<T const volatile[N]>{ typedef T type[N]; };
template <class T, std::size_t N> struct remove_cv<T volatile[N]>{ typedef T type[N]; };

template <class T> struct remove_cv<T const[]>{ typedef T type[]; };
template <class T> struct remove_cv<T const volatile[]>{ typedef T type[]; };
template <class T> struct remove_cv<T volatile[]>{ typedef T type[]; };
# 43 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_cv.hpp"
}
# 21 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp" 2



namespace boost {

namespace detail {
# 113 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp"
template <typename B, typename D>
struct bd_helper
{






    template <typename T>
    static type_traits::yes_type check_sig(D const volatile *, T);
    static type_traits::no_type check_sig(B const volatile *, int);




};

template<typename B, typename D>
struct is_base_and_derived_impl2
{
# 142 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp"
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(sizeof(B) != 0) >)> boost_static_assert_typedef_142 ;
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(sizeof(D) != 0) >)> boost_static_assert_typedef_143 ;

    struct Host
    {

        operator B const volatile *() const;



        operator D const volatile *();
    };

    static const bool value = sizeof(bd_helper<B,D>::check_sig(Host(), 0)) == sizeof(type_traits::yes_type);




};
# 178 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp"
template <typename B, typename D>
struct is_base_and_derived_impl3
{
    static const bool value = false;
};

template <bool ic1, bool ic2, bool iss>
struct is_base_and_derived_select
{
   template <class T, class U>
   struct rebind
   {
      typedef is_base_and_derived_impl3<T,U> type;
   };
};

template <>
struct is_base_and_derived_select<true,true,false>
{
   template <class T, class U>
   struct rebind
   {
      typedef is_base_and_derived_impl2<T,U> type;
   };
};

template <typename B, typename D>
struct is_base_and_derived_impl
{
    typedef typename remove_cv<B>::type ncvB;
    typedef typename remove_cv<D>::type ncvD;

    typedef is_base_and_derived_select<
       ::boost::is_class<B>::value,
       ::boost::is_class<D>::value,
       ::boost::is_same<ncvB,ncvD>::value> selector;
    typedef typename selector::template rebind<ncvB,ncvD> binder;
    typedef typename binder::type bound_type;

    static const bool value = bound_type::value;
};
# 229 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_and_derived.hpp"
}

template <class Base, class Derived> struct is_base_and_derived
   : public integral_constant<bool, (::boost::detail::is_base_and_derived_impl<Base, Derived>::value)> {};

template <class Base, class Derived> struct is_base_and_derived<Base&, Derived> : public false_type{};
template <class Base, class Derived> struct is_base_and_derived<Base, Derived&> : public false_type{};
template <class Base, class Derived> struct is_base_and_derived<Base&, Derived&> : public false_type{};





}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_base_of.hpp" 2




namespace boost {

   namespace detail{
      template <class B, class D>
      struct is_base_of_imp
      {
          typedef typename remove_cv<B>::type ncvB;
          typedef typename remove_cv<D>::type ncvD;
          static const bool value = ( (::boost::detail::is_base_and_derived_impl<ncvB,ncvD>::value) || (::boost::is_same<ncvB,ncvD>::value && ::boost::is_class<ncvB>::value));


      };
   }

   template <class Base, class Derived> struct is_base_of
      : public integral_constant<bool, (::boost::detail::is_base_of_imp<Base, Derived>::value)> {};

   template <class Base, class Derived> struct is_base_of<Base, Derived&> : false_type{};
   template <class Base, class Derived> struct is_base_of<Base&, Derived&> : false_type{};
   template <class Base, class Derived> struct is_base_of<Base&, Derived> : false_type{};

}
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/constrained_value.hpp" 2


namespace boost {


namespace CV {

  enum violation_enum {min_violation, max_violation};
# 41 "D:\\my_project\\boost_1_65_1\\boost/date_time/constrained_value.hpp"
  template<class value_policies>
  class constrained_value {
  public:
    typedef typename value_policies::value_type value_type;

    constrained_value(value_type value) : value_((min)())
    {
      assign(value);
    }
    constrained_value& operator=(value_type v)
    {
      assign(v);
      return *this;
    }

    static value_type max () {return (value_policies::max)();}

    static value_type min () {return (value_policies::min)();}

    operator value_type() const {return value_;}
  protected:
    value_type value_;
  private:
    void assign(value_type value)
    {


      if (value+1 < (min)()+1) {
        value_policies::on_error(value_, value, min_violation);
        return;
      }
      if (value > (max)()) {
        value_policies::on_error(value_, value, max_violation);
        return;
      }
      value_ = value;
    }
};


  template<typename rep_type, rep_type min_value,
           rep_type max_value, class exception_type>
  class simple_exception_policy
  {
    struct exception_wrapper : public exception_type
    {




      operator std::out_of_range () const
      {

        return std::out_of_range("constrained value boundary has been violated");
      }
    };

    typedef typename mpl::if_<
      is_base_of< std::exception, exception_type >,
      exception_type,
      exception_wrapper
    >::type actual_exception_type;

  public:
    typedef rep_type value_type;
    static rep_type min () { return min_value; }
    static rep_type max () { return max_value; }
    static void on_error(rep_type, rep_type, violation_enum)
    {
      boost::throw_exception(actual_exception_type());
    }
  };



} }
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_weekday.hpp" 2






namespace boost {
namespace gregorian {


  using date_time::Sunday;
  using date_time::Monday;
  using date_time::Tuesday;
  using date_time::Wednesday;
  using date_time::Thursday;
  using date_time::Friday;
  using date_time::Saturday;



  struct bad_weekday : public std::out_of_range
  {
    bad_weekday() : std::out_of_range(std::string("Weekday is out of range 0..6")) {}
  };
  typedef CV::simple_exception_policy<unsigned short, 0, 6, bad_weekday> greg_weekday_policies;
  typedef CV::constrained_value<greg_weekday_policies> greg_weekday_rep;



  class greg_weekday : public greg_weekday_rep {
  public:
    typedef boost::date_time::weekdays weekday_enum;
    greg_weekday(unsigned short day_of_week_num) :
      greg_weekday_rep(day_of_week_num)
    {}

    unsigned short as_number() const {return value_;}
    const char* as_short_string() const;
    const char* as_long_string() const;

    const wchar_t* as_short_wstring() const;
    const wchar_t* as_long_wstring() const;

    weekday_enum as_enum() const {return static_cast<weekday_enum>(value_);}


  };



} }
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_day_of_year.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_day_of_year.hpp"
namespace boost {
namespace gregorian {


  struct bad_day_of_year : public std::out_of_range
  {
    bad_day_of_year() :
      std::out_of_range(std::string("Day of year value is out of range 1..366"))
    {}
  };


  typedef CV::simple_exception_policy<unsigned short,1,366,bad_day_of_year> greg_day_of_year_policies;


  typedef CV::constrained_value<greg_day_of_year_policies> greg_day_of_year_rep;


} }
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.hpp"
namespace boost {
namespace date_time {
# 28 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.hpp"
  template<typename ymd_type_, typename date_int_type_>
  class gregorian_calendar_base {
  public:

    typedef ymd_type_ ymd_type;

    typedef typename ymd_type::month_type month_type;

    typedef typename ymd_type::day_type day_type;

    typedef typename ymd_type::year_type year_type;

    typedef date_int_type_ date_int_type;


    static unsigned short day_of_week(const ymd_type& ymd);
    static int week_number(const ymd_type&ymd);

    static date_int_type day_number(const ymd_type& ymd);
    static date_int_type julian_day_number(const ymd_type& ymd);
    static date_int_type modjulian_day_number(const ymd_type& ymd);
    static ymd_type from_day_number(date_int_type);
    static ymd_type from_julian_day_number(date_int_type);
    static ymd_type from_modjulian_day_number(date_int_type);
    static bool is_leap_year(year_type);
    static unsigned short end_of_month_day(year_type y, month_type m);
    static ymd_type epoch();
    static unsigned short days_in_week();

  };



} }



# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.ipp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.ipp"
namespace boost {
namespace date_time {



  template<typename ymd_type_, typename date_int_type_>
  inline
  unsigned short
  gregorian_calendar_base<ymd_type_,date_int_type_>::day_of_week(const ymd_type& ymd) {
    unsigned short a = static_cast<unsigned short>((14-ymd.month)/12);
    unsigned short y = static_cast<unsigned short>(ymd.year - a);
    unsigned short m = static_cast<unsigned short>(ymd.month + 12*a - 2);
    unsigned short d = static_cast<unsigned short>((ymd.day + y + (y/4) - (y/100) + (y/400) + (31*m)/12) % 7);

    return d;
  }







  template<typename ymd_type_, typename date_int_type_>
  inline
  int
  gregorian_calendar_base<ymd_type_,date_int_type_>::week_number(const ymd_type& ymd) {
    unsigned long julianbegin = julian_day_number(ymd_type(ymd.year,1,1));
    unsigned long juliantoday = julian_day_number(ymd);
    unsigned long day = (julianbegin + 3) % 7;
    unsigned long week = (juliantoday + day - julianbegin + 4)/7;

    if ((week >= 1) && (week <= 52)) {
      return static_cast<int>(week);
    }

    if (week == 53) {
      if((day==6) ||(day == 5 && is_leap_year(ymd.year))) {
        return static_cast<int>(week);
      } else {
        return 1;
      }
    }

    else if (week == 0) {
      julianbegin = julian_day_number(ymd_type(static_cast<unsigned short>(ymd.year-1),1,1));
      juliantoday = julian_day_number(ymd);
      day = (julianbegin + 3) % 7;
      week = (juliantoday + day - julianbegin + 4)/7;
      return static_cast<int>(week);
    }

    return static_cast<int>(week);

  }




  template<typename ymd_type_, typename date_int_type_>
  inline
  date_int_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::day_number(const ymd_type& ymd)
  {
    unsigned short a = static_cast<unsigned short>((14-ymd.month)/12);
    unsigned short y = static_cast<unsigned short>(ymd.year + 4800 - a);
    unsigned short m = static_cast<unsigned short>(ymd.month + 12*a - 3);
    unsigned long d = ymd.day + ((153*m + 2)/5) + 365*y + (y/4) - (y/100) + (y/400) - 32045;
    return static_cast<date_int_type>(d);
  }




  template<typename ymd_type_, typename date_int_type_>
  inline
  date_int_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::julian_day_number(const ymd_type& ymd)
  {
    return day_number(ymd);
  }





  template<typename ymd_type_, typename date_int_type_>
  inline
  date_int_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::modjulian_day_number(const ymd_type& ymd)
  {
    return julian_day_number(ymd)-2400001;
  }


  template<typename ymd_type_, typename date_int_type_>
  inline
  ymd_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::from_day_number(date_int_type dayNumber)
  {
    date_int_type a = dayNumber + 32044;
    date_int_type b = (4*a + 3)/146097;
    date_int_type c = a-((146097*b)/4);
    date_int_type d = (4*c + 3)/1461;
    date_int_type e = c - (1461*d)/4;
    date_int_type m = (5*e + 2)/153;
    unsigned short day = static_cast<unsigned short>(e - ((153*m + 2)/5) + 1);
    unsigned short month = static_cast<unsigned short>(m + 3 - 12 * (m/10));
    year_type year = static_cast<unsigned short>(100*b + d - 4800 + (m/10));


    return ymd_type(static_cast<unsigned short>(year),month,day);
  }


  template<typename ymd_type_, typename date_int_type_>
  inline
  ymd_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::from_julian_day_number(date_int_type dayNumber)
  {
    date_int_type a = dayNumber + 32044;
    date_int_type b = (4*a+3)/146097;
    date_int_type c = a - ((146097*b)/4);
    date_int_type d = (4*c + 3)/1461;
    date_int_type e = c - ((1461*d)/4);
    date_int_type m = (5*e + 2)/153;
    unsigned short day = static_cast<unsigned short>(e - ((153*m + 2)/5) + 1);
    unsigned short month = static_cast<unsigned short>(m + 3 - 12 * (m/10));
    year_type year = static_cast<year_type>(100*b + d - 4800 + (m/10));


    return ymd_type(year,month,day);
  }


  template<typename ymd_type_, typename date_int_type_>
  inline
  ymd_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::from_modjulian_day_number(date_int_type dayNumber) {
    date_int_type jd = dayNumber + 2400001;
    return from_julian_day_number(jd);
  }





  template<typename ymd_type_, typename date_int_type_>
  inline
  bool
  gregorian_calendar_base<ymd_type_,date_int_type_>::is_leap_year(year_type year)
  {

    return (!(year % 4)) && ((year % 100) || (!(year % 400)));
  }





  template<typename ymd_type_, typename date_int_type_>
  inline
  unsigned short
  gregorian_calendar_base<ymd_type_,date_int_type_>::end_of_month_day(year_type year,
                                                                      month_type month)
  {
    switch (month) {
    case 2:
      if (is_leap_year(year)) {
        return 29;
      } else {
        return 28;
      };
    case 4:
    case 6:
    case 9:
    case 11:
      return 30;
    default:
      return 31;
    };

  }


  template<typename ymd_type_, typename date_int_type_>
  inline
  ymd_type_
  gregorian_calendar_base<ymd_type_,date_int_type_>::epoch()
  {
    return ymd_type(1400,1,1);
  }


  template<typename ymd_type_, typename date_int_type_>
  inline
  unsigned short
  gregorian_calendar_base<ymd_type_,date_int_type_>::days_in_week()
  {
    return 7;
  }


} }
# 64 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian_calendar.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_ymd.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_ymd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_day.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_day.hpp"
namespace boost {
namespace gregorian {


  struct bad_day_of_month : public std::out_of_range
  {
    bad_day_of_month() :
      std::out_of_range(std::string("Day of month value is out of range 1..31"))
    {}

    bad_day_of_month(const std::string& s) :
      std::out_of_range(s)
    {}
  };

  typedef CV::simple_exception_policy<unsigned short, 1, 31, bad_day_of_month> greg_day_policies;


  typedef CV::constrained_value<greg_day_policies> greg_day_rep;







  class greg_day : public greg_day_rep {
  public:
    greg_day(unsigned short day_of_month) : greg_day_rep(day_of_month) {}
    unsigned short as_number() const {return value_;}
    operator unsigned short() const {return value_;}
  private:

  };



} }
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_ymd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_year.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_year.hpp"
namespace boost {
namespace gregorian {


  struct bad_year : public std::out_of_range
  {
    bad_year() :
      std::out_of_range(std::string("Year is out of valid range: 1400..10000"))
    {}
  };

  typedef CV::simple_exception_policy<unsigned short, 1400, 10000, bad_year> greg_year_policies;


  typedef CV::constrained_value<greg_year_policies> greg_year_rep;
# 40 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_year.hpp"
  class greg_year : public greg_year_rep {
  public:
    greg_year(unsigned short year) : greg_year_rep(year) {}
    operator unsigned short() const {return value_;}
  };



} }
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_ymd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_month.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_month.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\map" 1 3








# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mytree,
 class _Base = _Iterator_base0>
 class _Tree_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mytree::value_type,
   typename _Mytree::difference_type,
   typename _Mytree::const_pointer,
   typename _Mytree::const_reference,
   _Base>
 {
public:
 typedef _Tree_unchecked_const_iterator<_Mytree, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_unchecked_const_iterator()
  : _Ptr()
  {
  }

 _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mytree::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  if (_Mytree::_Isnil(_Ptr))
   ;
  else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
   _Ptr = _Mytree::_Min(
    _Mytree::_Right(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Right(_Pnode))
    _Ptr = _Pnode;
   _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  if (_Mytree::_Isnil(_Ptr))
   _Ptr = _Mytree::_Right(_Ptr);
  else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
   _Ptr = _Mytree::_Max(
    _Mytree::_Left(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Left(_Pnode))
    _Ptr = _Pnode;
   if (_Mytree::_Isnil(_Ptr))
    ;
   else
    _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mytree>
 class _Tree_unchecked_iterator
  : public _Tree_unchecked_const_iterator<_Mytree>
 {
public:
 typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_unchecked_iterator()
  {
  }

 _Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mytree>
 class _Tree_const_iterator
  : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
 {
public:
 typedef _Tree_const_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_const_iterator()
  : _Mybase()
  {
  }

 _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {

  const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
  if (_Mycont == 0
   || this->_Ptr == nullptr_t{}
   || this->_Ptr == _Mycont->_Myhead)
   {
   _Debug_message(L"map/set iterator not dereferencable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 238);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 239, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 239, 0); };
   }
# 249 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
  return (_Mytree::_Myval(this->_Ptr));
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == nullptr_t{}
   || _Mytree::_Isnil(this->_Ptr))
   {
   _Debug_message(L"map/set iterator not incrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 264);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 265, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 265, 0); };
   }






  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == nullptr_t{})
   {
   _Debug_message(L"map/set iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 290);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 291, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 291, 0); };
   }

  _Nodeptr _Ptrsav = this->_Ptr;
  --static_cast<_Mybase&>(*this);
  if (_Ptrsav == this->_Ptr)
   {
   _Debug_message(L"map/set iterator not decrementable", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 298);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 299, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 299, 0); };
   }
# 313 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {

  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"map/set iterators incompatible", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 328);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 329, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 329, 0); };
   }





  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mytree> inline
 typename _Tree_const_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_const_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_const_iterator<_Mytree>&
  _Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
   typename _Tree_const_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mytree>
 class _Tree_iterator
  : public _Tree_const_iterator<_Mytree>
 {
public:
 typedef _Tree_iterator<_Mytree> _Myiter;
 typedef _Tree_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;

 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_iterator()
  {
  }

 _Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --static_cast<_Mybase&>(*this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mytree> inline
 typename _Tree_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_iterator<_Mytree>&
  _Rechecked(_Tree_iterator<_Mytree>& _Iter,
   typename _Tree_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _Tree_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _Tree_node
  {
  _Voidptr _Left;
  _Voidptr _Parent;
  _Voidptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Value_type>
 struct _Tree_node<_Value_type, void *>
  {
  typedef _Tree_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Ty>
 struct _Tree_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _Tree_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _Tree_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Tree_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;

 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _Tree_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Tree_simple_types<typename _Alty::value_type>,
  _Tree_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Tree_val
  : public _Container_base
 {
public:
 typedef _Tree_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Myt> const_iterator;
 typedef _Tree_iterator<_Myt> iterator;

 _Tree_val()
  : _Myhead(),
  _Mysize(0)
  {
  }

 enum _Redbl
  {
  _Red, _Black};

 static char& _Color(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Color);
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Isnil);
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Left);
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Parent);
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Right);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Right(_Pnode)))
   _Pnode = _Right(_Pnode);
  return (_Pnode);
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Left(_Pnode)))
   _Pnode = _Left(_Pnode);
  return (_Pnode);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<class _Traits>
 class _Tree_comp_alloc
 {
public:
 typedef _Tree_comp_alloc<_Traits> _Myt;

 typedef typename _Traits::allocator_type allocator_type;
 typedef typename _Traits::key_compare key_compare;

 typedef _Tree_base_types<typename _Traits::value_type,
  allocator_type> _Alloc_types;

 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
 typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;

 enum _Redbl
  {
  _Red, _Black
  };

 static char& _Color(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Color(_Pnode));
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Isnil(_Pnode));
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Left(_Pnode));
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Parent(_Pnode));
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Right(_Pnode));
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Myval(_Pnode));
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Max(_Pnode));
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Min(_Pnode));
  }

 _Tree_comp_alloc(const key_compare& _Parg)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _Zero_then_variadic_args_t())
  {
  _Construct();
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _Tree_comp_alloc(const key_compare& _Parg, _Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  _Construct();
  }
# 740 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree" 3
 void _Construct()
  {
  _Myhead() = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(_Myhead());
  throw;
  }
  }

 ~_Tree_comp_alloc() noexcept
  {
  _Freeheadnode(_Myhead());
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Unfancy(_Alproxy.allocate(1));
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Nodeptr _Buyheadnode()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Pnode);
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  _Color(_Pnode) = _Black;
  _Isnil(_Pnode) = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Myhead());
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode0(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Buynode0();

  this->_Color(_Pnode) = _Red;
  this->_Isnil(_Pnode) = false;

  try {
  this->_Getal().construct(
   ::std:: addressof(_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Freenode0(_Pnode);
  throw;
  }

  return (_Pnode);
  }

 key_compare& _Getcomp() noexcept
  {
  return (_Mypair._Get_first());
  }

 const key_compare& _Getcomp() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 _Tree_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 const _Tree_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 _Nodeptr& _Myhead() noexcept
  {
  return (_Get_data()._Myhead);
  }

 const _Nodeptr& _Myhead() const noexcept
  {
  return (_Get_data()._Myhead);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

private:
 _Compressed_pair<key_compare,
  _Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
 };


template<class _Traits>
 class _Tree
  : public _Tree_comp_alloc<_Traits>
 {
public:
 typedef _Tree<_Traits> _Myt;
 typedef _Tree_comp_alloc<_Traits> _Mybase;

 typedef typename _Traits::key_type key_type;
 typedef typename _Traits::value_compare value_compare;
 enum
  {
  _Multi = _Traits::_Multi};

 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::key_compare key_compare;
 typedef typename _Mybase::allocator_type allocator_type;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mybase::const_iterator,
  typename _Mybase::iterator>::type iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 typedef pair<iterator, bool> _Pairib;
 typedef pair<iterator, iterator> _Pairii;
 typedef pair<const_iterator, const_iterator> _Paircc;

 struct _Copy_tag
  {
  };
 struct _Move_tag
  {
  };

 _Tree(const key_compare& _Parg)
  : _Mybase(_Parg)
  {
  }

 _Tree(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  }

 template<class _Any_alloc>
  _Tree(const _Myt& _Right, _Any_alloc&& _Al)
  : _Mybase(_Right.key_comp(), ::std:: forward<_Any_alloc>(_Al))
  {
  try {
  _Copy(_Right, _Copy_tag());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(_Myt&& _Right)
  : _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 _Tree(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Getcomp(), _Right._Getcomp());
  _Swap_adl(this->_Myhead(), _Right._Myhead());
  ::std:: swap(this->_Mysize(), _Right._Mysize());
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Copy(_Right, _Move_tag());
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }

 ~_Tree() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    this->_Copy_alloc(_Right._Getal());

   this->_Getcomp() = _Right._Getcomp();
   _Copy(_Right, _Copy_tag());
   }
  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(_Lmost(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(_Lmost(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myhead(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myhead(), &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  allocator_type _Ret(this->_Getal());
  return (_Ret);
  }

 key_compare key_comp() const
  {
  return (this->_Getcomp());
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil()).first);
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<!_Multi2, int> = 0>
  _Pairib insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 template<bool _Multi2 = _Multi,
  enable_if_t<_Multi2, int> = 0>
  iterator insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil()).first);
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  return (_Insert_hint(_Where,
   _Val, _Nil()));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Insert_hint(_Where,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1248);
  for (; _First != _Last; ++_First)
   emplace_hint(end(), *_First);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 iterator erase(const_iterator _Where)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || this->_Isnil(_Where._Mynode()))
   _Debug_message(L"map/set erase iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1263);
  _Nodeptr _Erasednode = _Where._Mynode();
  ++_Where;
  _Orphan_ptr(_Erasednode);






  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if (this->_Isnil(this->_Left(_Pnode)))
   _Fixnode = this->_Right(_Pnode);
  else if (this->_Isnil(this->_Right(_Pnode)))
   _Fixnode = this->_Left(_Pnode);
  else
   {
   _Pnode = _Where._Mynode();
   _Fixnode = this->_Right(_Pnode);
   }

  if (_Pnode == _Erasednode)
   {
   _Fixnodeparent = this->_Parent(_Erasednode);
   if (!this->_Isnil(_Fixnode))
    this->_Parent(_Fixnode) = _Fixnodeparent;

   if (_Root() == _Erasednode)
    _Root() = _Fixnode;
   else if (this->_Left(_Fixnodeparent) == _Erasednode)
    this->_Left(_Fixnodeparent) = _Fixnode;
   else
    this->_Right(_Fixnodeparent) =
     _Fixnode;

   if (_Lmost() == _Erasednode)
    _Lmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Min(_Fixnode);

   if (_Rmost() == _Erasednode)
    _Rmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Max(_Fixnode);
   }
  else
   {
   this->_Parent(this->_Left(_Erasednode)) =
    _Pnode;
   this->_Left(_Pnode) =
    this->_Left(_Erasednode);

   if (_Pnode == this->_Right(_Erasednode))
    _Fixnodeparent = _Pnode;
   else
    {
    _Fixnodeparent =
     this->_Parent(_Pnode);
    if (!this->_Isnil(_Fixnode))
     this->_Parent(_Fixnode) = _Fixnodeparent;
    this->_Left(_Fixnodeparent) = _Fixnode;
    this->_Right(_Pnode) =
     this->_Right(_Erasednode);
    this->_Parent(this->_Right(_Erasednode)) =
     _Pnode;
    }

   if (_Root() == _Erasednode)
    _Root() = _Pnode;
   else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
    this->_Left(this->_Parent(_Erasednode)) =
     _Pnode;
   else
    this->_Right(this->_Parent(_Erasednode)) =
     _Pnode;

   this->_Parent(_Pnode) =
    this->_Parent(_Erasednode);
   ::std:: swap(this->_Color(_Pnode),
    this->_Color(_Erasednode));
   }

  if (this->_Color(_Erasednode) == this->_Black)
   {
   for (; _Fixnode != _Root()
    && this->_Color(_Fixnode) == this->_Black;
    _Fixnodeparent = this->_Parent(_Fixnode))
    if (_Fixnode == this->_Left(_Fixnodeparent))
     {
     _Pnode = this->_Right(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Lrotate(_Fixnodeparent);
      _Pnode = this->_Right(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Left(_Pnode)) == this->_Black
      && this->_Color(this->_Right(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Right(_Pnode))
       == this->_Black)
       {
       this->_Color(this->_Left(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Rrotate(_Pnode);
       _Pnode = this->_Right(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Right(_Pnode)) = this->_Black;
      _Lrotate(_Fixnodeparent);
      break;
      }
     }
    else
     {
     _Pnode = this->_Left(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Rrotate(_Fixnodeparent);
      _Pnode = this->_Left(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Right(_Pnode)) ==
      this->_Black
      && this->_Color(this->_Left(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Left(_Pnode)) == this->_Black)
       {
       this->_Color(this->_Right(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Lrotate(_Pnode);
       _Pnode = this->_Left(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Left(_Pnode)) = this->_Black;
      _Rrotate(_Fixnodeparent);
      break;
      }
     }

   this->_Color(_Fixnode) = this->_Black;
   }

  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Erasednode)));

  this->_Getal().deallocate(_Erasednode, 1);

  if (0 < this->_Mysize())
   --this->_Mysize();

  return (iterator(_Where._Ptr,
   &this->_Get_data()));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (iterator(_First._Ptr, &this->_Get_data()));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = ::std:: distance(_Where.first, _Where.second);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() noexcept
  {

  this->_Orphan_ptr(nullptr_t{});


  _Erase(_Root());
  _Root() = this->_Myhead();
  _Lmost() = this->_Myhead();
  _Rmost() = this->_Myhead();
  this->_Mysize() = 0;
  }

 iterator find(const key_type& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1484)

     ? end() : _Where);
  }

 const_iterator find(const key_type& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1493)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator find(const _Other& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1505)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator find(const _Other& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1517)

     ? end() : _Where);
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  size_type count(const _Other& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  return (::std:: distance(_Ans.first, _Ans.second));
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator lower_bound(const _Other& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator lower_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator upper_bound(const _Other& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator upper_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Pairii equal_range(const _Other& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Paircc equal_range(const _Other& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Getcomp(), _Right._Getcomp());
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }
  }

protected:
 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
  {
  return (_Node);
  }

 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
  {
  return (this->_Buynode(::std:: forward<_Valty>(_Val)));
  }

 void _Destroy_if_not_nil(_Nodeptr _Newnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Newnode)));

  this->_Getal().deallocate(_Newnode, 1);
  }

 void _Destroy_if_not_nil(_Nil)
  {
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_hint(const_iterator _Where,
   _Valty&& _Val, _Nodety _Newnode)
  {
  const_iterator _Next;
  bool _Leftish = false;

  try {


  if (_Where._Getcont() != &this->_Get_data())
   _Debug_message(L"map/set insert iterator outside range", L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1663);


  if (size() == 0)
   return (_Insert_at(true, this->_Myhead(),
    ::std:: forward<_Valty>(_Val), _Newnode));
  else if (this->_Multi)
   {
   if (_Where == begin())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1674))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    _Leftish = true;
    }
   else if (_Where == end())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Rmost()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1682))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1687)

    && !_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1690))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1700)

    && (++(_Next = _Where) == end()
     || !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Next._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1703)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else
    _Leftish = true;
   }
  else
   {
   if (_Where == begin())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1720))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Where == end())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Rmost()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1727))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1732)

    && _Debug_lt_pred(this->_Getcomp(), this->_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1735))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1745)

    && (++(_Next = _Where) == end()
     || _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Next._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1748)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }

  return (_Insert_nohint(_Leftish,
   ::std:: forward<_Valty>(_Val), _Newnode).first);
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert_nohint(bool _Leftish,
   _Valty&& _Val, _Nodety _Newnode)
  {
  try {
  _Nodeptr _Trynode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();
  bool _Addleft = true;

  while (!this->_Isnil(_Trynode))
   {
   _Wherenode = _Trynode;
   if (_Leftish)
    _Addleft = !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Trynode), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1783);


   else
    _Addleft = _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Trynode), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1787);


   _Trynode = _Addleft ? this->_Left(_Trynode)
    : this->_Right(_Trynode);
   }

  if (this->_Multi)
   return (_Pairib(_Insert_at(_Addleft, _Wherenode,
    ::std:: forward<_Valty>(_Val), _Newnode), true));
  else
   {
   iterator _Where = iterator(_Wherenode, &this->_Get_data());
   if (!_Addleft)
    ;
   else if (_Where == begin())
    return (_Pairib(_Insert_at(true, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    --_Where;

   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1808))


    return (_Pairib(_Insert_at(_Addleft, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    {
    _Destroy_if_not_nil(_Newnode);
    return (_Pairib(_Where, false));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
  _Valty&& _Val, _Nodety _Node)
  {
  if (max_size() - 1 <= this->_Mysize())
   {
   _Destroy_if_not_nil(_Node);
   _Xlength_error("map/set<T> too long");
   }
  _Nodeptr _Newnode = _Buynode_if_nil(_Node,
   ::std:: forward<_Valty>(_Val));

  ++this->_Mysize();
  _Newnode->_Parent = _Wherenode;

  if (_Wherenode == this->_Myhead())
   {
   _Root() = _Newnode;
   _Lmost() = _Newnode;
   _Rmost() = _Newnode;
   }
  else if (_Addleft)
   {
   this->_Left(_Wherenode) = _Newnode;
   if (_Wherenode == _Lmost())
    _Lmost() = _Newnode;
   }
  else
   {
   this->_Right(_Wherenode) = _Newnode;
   if (_Wherenode == _Rmost())
    _Rmost() = _Newnode;
   }

  for (_Nodeptr _Pnode = _Newnode;
   this->_Color(this->_Parent(_Pnode)) == this->_Red; )
   if (this->_Parent(_Pnode)
    == this->_Left(this->_Parent(this->_Parent(_Pnode))))
    {
    _Wherenode =
     this->_Right(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode)))
      = this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Right(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Lrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Rrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }
   else
    {
    _Wherenode =
     this->_Left(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Left(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Rrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Lrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }

  this->_Color(_Root()) = this->_Black;
  return (iterator(_Newnode, &this->_Get_data()));
  }

 template<class _Moveit>
  void _Copy(const _Myt& _Right, _Moveit _Movefl)
  {
  _Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
  this->_Mysize() = _Right.size();
  if (!this->_Isnil(_Root()))
   {
   _Lmost() = this->_Min(_Root());
   _Rmost() = this->_Max(_Root());
   }
  else
   {
   _Lmost() = this->_Myhead();
   _Rmost() = this->_Myhead();
   }
  }

 template<class _Ty,
  class _Is_set>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
  {
  return (this->_Buynode(_Val));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
  {
  return (this->_Buynode(::std:: move(_Val)));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
  {
  return (this->_Buynode(
   ::std:: move(const_cast<key_type&>(_Val.first)),
   ::std:: move(_Val.second)));
  }

 template<class _Moveit>
  _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
   _Moveit _Movefl)
  {
  _Nodeptr _Newroot = this->_Myhead();

  if (!this->_Isnil(_Rootnode))
   {
   typename is_same<key_type, value_type>::type _Is_set;
   _Nodeptr _Pnode = _Copy_or_move(
    this->_Myval(_Rootnode), _Movefl, _Is_set);
   _Pnode->_Parent = _Wherenode;
   _Pnode->_Color = this->_Color(_Rootnode);
   if (this->_Isnil(_Newroot))
    _Newroot = _Pnode;

   try {
   this->_Left(_Pnode) =
    _Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
   this->_Right(_Pnode) =
    _Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
   } catch (...) {
   _Erase(_Newroot);
   throw;
   }
   }

  return (_Newroot);
  }

 template<class _Other>
  _Paircc _Eqrange(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead();
  _Nodeptr _Hinode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 1994))
    _Pnode = this->_Right(_Pnode);
   else
    {
    if (this->_Isnil(_Hinode)
      && _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2000))

     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  _Pnode = this->_Isnil(_Hinode) ? _Root()
   : this->_Left(_Hinode);
  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2009))
    {
    _Hinode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
  const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
  return (_Paircc(_First, _Last));
  }

 template<class _Other>
  _Pairii _Eqrange(const _Other& _Keyval)
  {
  _Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
  iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
  iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
  return (_Pairii(_First, _Last));
  }

 void _Erase(_Nodeptr _Rootnode)
  {
  for (_Nodeptr _Pnode = _Rootnode;
   !this->_Isnil(_Pnode); _Rootnode = _Pnode)
   {
   _Erase(this->_Right(_Pnode));
   _Pnode = this->_Left(_Pnode);
   this->_Getal().destroy(
    ::std:: addressof(this->_Myval(_Rootnode)));

   this->_Getal().deallocate(_Rootnode, 1);
   }
  }

 bool _Compare(const key_type& _Left, const key_type& _Right) const
  {
  return (_Debug_lt_pred(this->_Getcomp(), _Left, _Right, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtree", 2047));
  }

 template<class _Ty1,
  class _Ty2>
  bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
  {
  return (this->_Getcomp()(_Left, _Right));
  }

 template<class _Other>
  _Nodeptr _Lbound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(this->_Key(_Pnode), _Keyval))
    _Pnode = this->_Right(_Pnode);
   else
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  return (_Wherenode);
  }

 _Nodeptr& _Lmost() const
  {
  return (this->_Left(this->_Myhead()));
  }

 void _Lrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Right(_Wherenode);
  this->_Right(_Wherenode) = this->_Left(_Pnode);

  if (!this->_Isnil(this->_Left(_Pnode)))
   this->_Parent(this->_Left(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  this->_Left(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 _Nodeptr& _Rmost() const
  {
  return (this->_Right(this->_Myhead()));
  }

 _Nodeptr& _Root() const
  {
  return (this->_Parent(this->_Myhead()));
  }

 void _Rrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Left(_Wherenode);
  this->_Left(_Wherenode) = this->_Right(_Pnode);

  if (!this->_Isnil(this->_Right(_Pnode)))
   this->_Parent(this->_Right(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  this->_Right(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 template<class _Other>
  _Nodeptr _Ubound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(_Keyval, this->_Key(_Pnode)))
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  return (_Wherenode);
  }


 void _Orphan_ptr(_Nodeptr _Ptr)
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr == this->_Myhead()
     || _Ptr != nullptr_t{} && (*_Pnext)->_Ptr != _Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }


 void _Tidy()
  {
  erase(begin(), end());
  }

 const key_type& _Kfn(const value_type& _Val) const
  {
  return (_Traits::_Kfn(_Val));
  }

 const key_type& _Key(_Nodeptr _Pnode) const
  {
  return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
  }
 };


template<class _Traits> inline
 bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Traits> inline
 bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Traits> inline
 bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Traits> inline
 bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Traits> inline
 bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Traits> inline
 bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left < _Right));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\map" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tmap_traits
 {
public:
 typedef _Kty key_type;
 typedef pair<const _Kty, _Ty> value_type;
 typedef _Pr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 class value_compare
  {
  friend class _Tmap_traits<_Kty, _Ty, _Pr, _Alloc, _Mfl>;

 public:
  typedef value_type first_argument_type;
  typedef value_type second_argument_type;
  typedef bool result_type;

  bool operator()(const value_type& _Left,
   const value_type& _Right) const
   {
   return (comp(_Left.first, _Right.first));
   }

  value_compare(key_compare _Pred)
   : comp(_Pred)
   {
   }

 protected:
  key_compare comp;
  };

 template<class _Ty1,
  class _Ty2>
  static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.first);
  }
 };


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class map
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> >
 {
public:
 typedef map<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Pairib _Pairib;

 map()
  : _Mybase(key_compare())
  {
  }

 explicit map(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 map(const _Myt& _Right)
  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())
  {
  }

 map(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit map(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 map(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 map(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 map(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 mapped_type& operator[](key_type&& _Keyval)
  {
  return (try_emplace(::std:: move(_Keyval)).first->second);
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)

  {
  _Mybase::swap(_Right);
  }

 using _Mybase::insert;

 template<class _Valty,
  class = enable_if_t<is_constructible<value_type, _Valty>::value> >
  _Pairib insert(_Valty&& _Val)
  {
  return (this->emplace(::std:: forward<_Valty>(_Val)));
  }

 template<class _Valty,
  class = enable_if_t<is_constructible<value_type, _Valty>::value> >
  iterator insert(const_iterator _Where, _Valty&& _Val)
  {
  return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class _Keyty,
  class... _Mappedty>
  _Pairib _Try_emplace(_Keyty&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Debug_lt_pred(_Mybase::_Getcomp(), _Keyval, _Mybase::_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\map", 212))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     piecewise_construct,
     ::std:: forward_as_tuple(
      ::std:: forward<_Keyty>(_Keyval)),
     ::std:: forward_as_tuple(
      ::std:: forward<_Mappedty>(_Mapval)...)),
    true));
  else
   return (_Pairib(_Where, false));
  }

 template<class... _Mappedty>
  _Pairib try_emplace(const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class... _Mappedty>
  _Pairib try_emplace(key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class _Keyty,
  class _Mappedty>
  _Pairib _Insert_or_assign(_Keyty&& _Keyval,
   _Mappedty&& _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Debug_lt_pred(_Mybase::_Getcomp(), _Keyval, _Mybase::_Key(_Where._Mynode()), L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\map", 264))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     ::std:: forward<_Keyty>(_Keyval),
     ::std:: forward<_Mappedty>(_Mapval)),
    true));
  else
   {
   _Where->second = ::std:: forward<_Mappedty>(_Mapval);
   return (_Pairib(_Where, false));
   }
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 map(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  insert(_Ilist);
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_Ilist);
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_Ilist);
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  insert(_Ilist);
  return (*this);
  }

 mapped_type& operator[](const key_type& _Keyval)
  {
  return (try_emplace(_Keyval).first->second);
  }

 mapped_type& at(const key_type& _Keyval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }

 const mapped_type& at(const key_type& _Keyval) const
  {
  const_iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
  map<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class multimap
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> >
 {
public:
 typedef multimap<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;

 multimap()
  : _Mybase(key_compare())
  {
  }

 explicit multimap(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multimap(const _Myt& _Right)
  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())
  {
  }

 multimap(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multimap(const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  }

 multimap(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last)
  : _Mybase(key_compare())
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multimap(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multimap(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && _Is_nothrow_swappable<_Pr>::value)

  {
  _Mybase::swap(_Right);
  }

 using _Mybase::insert;

 template<class _Valty,
  class = enable_if_t<is_constructible<value_type, _Valty>::value> >
  iterator insert(_Valty&& _Val)
  {
  return (this->emplace(::std:: forward<_Valty>(_Val)));
  }

 template<class _Valty,
  class = enable_if_t<is_constructible<value_type, _Valty>::value> >
  iterator insert(const_iterator _Where, _Valty&& _Val)
  {
  return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
  }

 multimap(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare())
  {
  insert(_Ilist);
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred)
  {
  insert(_Ilist);
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  insert(_Ilist);
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  insert(_Ilist);
  return (*this);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
  multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_month.hpp" 2


# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cctype" 1 3
# 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cctype" 3
namespace std {
using :: isalnum; using :: isalpha; using :: iscntrl;
using :: isdigit; using :: isgraph; using :: islower;
using :: isprint; using :: ispunct; using :: isspace;
using :: isupper; using :: isxdigit; using :: tolower;
using :: toupper;

using :: isblank;
}
# 20 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_month.hpp" 2


namespace boost {
namespace gregorian {

  typedef date_time::months_of_year months_of_year;


  using date_time::Jan;
  using date_time::Feb;
  using date_time::Mar;
  using date_time::Apr;
  using date_time::May;
  using date_time::Jun;
  using date_time::Jul;
  using date_time::Aug;
  using date_time::Sep;
  using date_time::Oct;
  using date_time::Nov;
  using date_time::Dec;
  using date_time::NotAMonth;
  using date_time::NumMonths;


  struct bad_month : public std::out_of_range
  {
    bad_month() : std::out_of_range(std::string("Month number is out of range 1..12")) {}
  };

  typedef CV::simple_exception_policy<unsigned short, 1, 12, bad_month> greg_month_policies;

  typedef CV::constrained_value<greg_month_policies> greg_month_rep;



  class greg_month : public greg_month_rep {
  public:
    typedef date_time::months_of_year month_enum;
    typedef std::map<std::string, unsigned short> month_map_type;
    typedef boost::shared_ptr<month_map_type> month_map_ptr_type;

    greg_month(month_enum theMonth) :
      greg_month_rep(static_cast<greg_month_rep::value_type>(theMonth)) {}

    greg_month(unsigned short theMonth) : greg_month_rep(theMonth) {}

    operator unsigned short() const {return value_;}

    unsigned short as_number() const {return value_;}
    month_enum as_enum() const {return static_cast<month_enum>(value_);}
    const char* as_short_string() const;
    const char* as_long_string() const;

    const wchar_t* as_short_wstring() const;
    const wchar_t* as_long_wstring() const;


    static month_map_ptr_type get_month_map_ptr();



    const char* as_short_string(char) const
    {
      return as_short_string();
    }
    const char* as_long_string(char) const
    {
      return as_long_string();
    }

    const wchar_t* as_short_string(wchar_t) const
    {
      return as_short_wstring();
    }
    const wchar_t* as_long_string(wchar_t) const
    {
      return as_long_wstring();
    }

  };

} }
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_ymd.hpp" 2


namespace boost {
namespace gregorian {

  typedef date_time::year_month_day_base<greg_year,
                                         greg_month,
                                         greg_day> greg_year_month_day;



} }
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_calendar.hpp" 2



namespace boost {
namespace gregorian {


  typedef date_time::int_adapter<uint32_t> fancy_date_rep;


  class gregorian_calendar :
    public date_time::gregorian_calendar_base<greg_year_month_day, fancy_date_rep::int_type> {
  public:

    typedef greg_weekday day_of_week_type;

    typedef greg_day_of_year_rep day_of_year_type;

    typedef fancy_date_rep date_rep_type;

    typedef fancy_date_rep date_traits_type;


  private:
  };

} }
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_duration.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_duration.hpp"
namespace boost {
namespace date_time {



  template<class duration_rep_traits>
  class date_duration : private
              boost::less_than_comparable1< date_duration< duration_rep_traits >
            , boost::equality_comparable1< date_duration< duration_rep_traits >
            , boost::addable1< date_duration< duration_rep_traits >
            , boost::subtractable1< date_duration< duration_rep_traits >
            , boost::dividable2< date_duration< duration_rep_traits >, int
            > > > > >
  {
  public:
    typedef typename duration_rep_traits::int_type duration_rep_type;
    typedef typename duration_rep_traits::impl_type duration_rep;


    explicit date_duration(duration_rep day_count) : days_(day_count) {}



    date_duration(special_values sv) :
            days_(duration_rep::from_special(sv))
    {}



    date_duration(const date_duration<duration_rep_traits>& other) :
            days_(other.days_)
    {}


    duration_rep get_rep()const
    {
        return days_;
    }
    bool is_special()const
    {
        return days_.is_special();
    }

    duration_rep_type days() const
    {
        return duration_rep_traits::as_number(days_);
    }

    static date_duration unit()
    {
        return date_duration<duration_rep_traits>(1);
    }

    bool operator==(const date_duration& rhs) const
    {
        return days_ == rhs.days_;
    }

    bool operator<(const date_duration& rhs) const
    {
        return days_ < rhs.days_;
    }







    date_duration& operator-=(const date_duration& rhs)
    {

        days_ = days_ - rhs.days_;
        return *this;
    }

    date_duration& operator+=(const date_duration& rhs)
    {
        days_ = days_ + rhs.days_;
        return *this;
    }


    date_duration operator-() const
    {
        return date_duration<duration_rep_traits>(get_rep() * (-1));
    }

    date_duration& operator/=(int divisor)
    {
        days_ = days_ / divisor;
        return *this;
    }


    bool is_negative() const
    {
        return days_ < 0;
    }

  private:
    duration_rep days_;
  };





  struct duration_traits_long
  {
    typedef long int_type;
    typedef long impl_type;
    static int_type as_number(impl_type i) { return i; }
  };




  struct duration_traits_adapted
  {
    typedef long int_type;
    typedef boost::date_time::int_adapter<long> impl_type;
    static int_type as_number(impl_type i) { return i.as_number(); }
  };


} }
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration.hpp" 2




namespace boost {
namespace gregorian {


  typedef boost::date_time::duration_traits_adapted date_duration_rep;




  class date_duration :
    public boost::date_time::date_duration< date_duration_rep >
  {
    typedef boost::date_time::date_duration< date_duration_rep > base_type;

  public:
    typedef base_type::duration_rep duration_rep;


    explicit date_duration(duration_rep day_count = 0) : base_type(day_count) {}


    date_duration(date_time::special_values sv) : base_type(sv) {}


    date_duration(const date_duration& other) : base_type(static_cast< base_type const& >(other))
    {}


    date_duration(const base_type& other) : base_type(other)
    {}





    bool operator== (const date_duration& rhs) const
    {
      return base_type::operator== (rhs);
    }
    bool operator!= (const date_duration& rhs) const
    {
      return !operator== (rhs);
    }
    bool operator< (const date_duration& rhs) const
    {
      return base_type::operator< (rhs);
    }
    bool operator> (const date_duration& rhs) const
    {
      return !(base_type::operator< (rhs) || base_type::operator== (rhs));
    }
    bool operator<= (const date_duration& rhs) const
    {
      return (base_type::operator< (rhs) || base_type::operator== (rhs));
    }
    bool operator>= (const date_duration& rhs) const
    {
      return !base_type::operator< (rhs);
    }


    date_duration& operator-= (const date_duration& rhs)
    {
      base_type::operator-= (rhs);
      return *this;
    }
    friend date_duration operator- (date_duration rhs, date_duration const& lhs)
    {
      rhs -= lhs;
      return rhs;
    }


    date_duration& operator+= (const date_duration& rhs)
    {
      base_type::operator+= (rhs);
      return *this;
    }
    friend date_duration operator+ (date_duration rhs, date_duration const& lhs)
    {
      rhs += lhs;
      return rhs;
    }


    date_duration operator- ()const
    {
      return date_duration(get_rep() * (-1));
    }


    date_duration& operator/= (int divisor)
    {
      base_type::operator/= (divisor);
      return *this;
    }
    friend date_duration operator/ (date_duration rhs, int lhs)
    {
      rhs /= lhs;
      return rhs;
    }


    static date_duration unit()
    {
      return date_duration(base_type::unit().get_rep());
    }
  };


  typedef date_duration days;

} }



# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_duration_types.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_duration_types.hpp"
namespace boost {
namespace date_time {



  template <class duration_config>
  class weeks_duration : public date_duration<duration_config> {
  public:
    weeks_duration(typename duration_config::impl_type w)
      : date_duration<duration_config>(w * 7) {}
    weeks_duration(special_values sv)
      : date_duration<duration_config>(sv) {}
  };


  template<class t>
  class years_duration;






  template<class base_config>
  class months_duration
  {
    private:
      typedef typename base_config::int_rep int_rep;
      typedef typename int_rep::int_type int_type;
      typedef typename base_config::date_type date_type;
      typedef typename date_type::duration_type duration_type;
      typedef typename base_config::month_adjustor_type month_adjustor_type;
      typedef months_duration<base_config> months_type;
      typedef years_duration<base_config> years_type;
    public:
      months_duration(int_rep num) : _m(num) {}
      months_duration(special_values sv) : _m(sv)
      {
        _m = int_rep::from_special(sv);
      }
      int_rep number_of_months() const { return _m; }

      duration_type get_neg_offset(const date_type& d) const
      {
        month_adjustor_type m_adj(_m.as_number());
        return duration_type(m_adj.get_neg_offset(d));
      }
      duration_type get_offset(const date_type& d) const
      {
        month_adjustor_type m_adj(_m.as_number());
        return duration_type(m_adj.get_offset(d));
      }
      bool operator==(const months_type& rhs) const
      {
        return(_m == rhs._m);
      }
      bool operator!=(const months_type& rhs) const
      {
        return(_m != rhs._m);
      }
      months_type operator+(const months_type& rhs)const
      {
        return months_type(_m + rhs._m);
      }
      months_type& operator+=(const months_type& rhs)
      {
        _m = _m + rhs._m;
        return *this;
      }
      months_type operator-(const months_type& rhs)const
      {
        return months_type(_m - rhs._m);
      }
      months_type& operator-=(const months_type& rhs)
      {
        _m = _m - rhs._m;
        return *this;
      }
      months_type operator*(const int_type rhs)const
      {
        return months_type(_m * rhs);
      }
      months_type& operator*=(const int_type rhs)
      {
        _m = _m * rhs;
        return *this;
      }
      months_type operator/(const int_type rhs)const
      {
        return months_type(_m / rhs);
      }
      months_type& operator/=(const int_type rhs)
      {
        _m = _m / rhs;
        return *this;
      }
      months_type operator+(const years_type& y)const
      {
        return months_type(y.number_of_years() * 12 + _m);
      }
      months_type& operator+=(const years_type& y)
      {
        _m = y.number_of_years() * 12 + _m;
        return *this;
      }
      months_type operator-(const years_type& y) const
      {
        return months_type(_m - y.number_of_years() * 12);
      }
      months_type& operator-=(const years_type& y)
      {
        _m = _m - y.number_of_years() * 12;
        return *this;
      }


      friend date_type operator+(const date_type& d, const months_type& m)
      {
        return d + m.get_offset(d);
      }
      friend date_type operator+=(date_type& d, const months_type& m)
      {
        return d += m.get_offset(d);
      }
      friend date_type operator-(const date_type& d, const months_type& m)
      {

        return d + m.get_neg_offset(d);
      }
      friend date_type operator-=(date_type& d, const months_type& m)
      {

        return d += m.get_neg_offset(d);
      }

    private:
      int_rep _m;
  };







  template<class base_config>
  class years_duration
  {
    private:
      typedef typename base_config::int_rep int_rep;
      typedef typename int_rep::int_type int_type;
      typedef typename base_config::date_type date_type;
      typedef typename date_type::duration_type duration_type;
      typedef typename base_config::month_adjustor_type month_adjustor_type;
      typedef years_duration<base_config> years_type;
      typedef months_duration<base_config> months_type;
    public:
      years_duration(int_rep num) : _y(num) {}
      years_duration(special_values sv) : _y(sv)
      {
        _y = int_rep::from_special(sv);
      }
      int_rep number_of_years() const { return _y; }

      duration_type get_neg_offset(const date_type& d) const
      {
        month_adjustor_type m_adj(_y.as_number() * 12);
        return duration_type(m_adj.get_neg_offset(d));
      }
      duration_type get_offset(const date_type& d) const
      {
        month_adjustor_type m_adj(_y.as_number() * 12);
        return duration_type(m_adj.get_offset(d));
      }
      bool operator==(const years_type& rhs) const
      {
        return(_y == rhs._y);
      }
      bool operator!=(const years_type& rhs) const
      {
        return(_y != rhs._y);
      }
      years_type operator+(const years_type& rhs)const
      {
        return years_type(_y + rhs._y);
      }
      years_type& operator+=(const years_type& rhs)
      {
        _y = _y + rhs._y;
        return *this;
      }
      years_type operator-(const years_type& rhs)const
      {
        return years_type(_y - rhs._y);
      }
      years_type& operator-=(const years_type& rhs)
      {
        _y = _y - rhs._y;
        return *this;
      }
      years_type operator*(const int_type rhs)const
      {
        return years_type(_y * rhs);
      }
      years_type& operator*=(const int_type rhs)
      {
        _y = _y * rhs;
        return *this;
      }
      years_type operator/(const int_type rhs)const
      {
        return years_type(_y / rhs);
      }
      years_type& operator/=(const int_type rhs)
      {
        _y = _y / rhs;
        return *this;
      }
      months_type operator+(const months_type& m) const
      {
        return(months_type(_y * 12 + m.number_of_months()));
      }
      months_type operator-(const months_type& m) const
      {
        return(months_type(_y * 12 - m.number_of_months()));
      }


      friend date_type operator+(const date_type& d, const years_type& y)
      {
        return d + y.get_offset(d);
      }
      friend date_type operator+=(date_type& d, const years_type& y)
      {
        return d += y.get_offset(d);
      }
      friend date_type operator-(const date_type& d, const years_type& y)
      {

        return d + y.get_neg_offset(d);
      }
      friend date_type operator-=(date_type& d, const years_type& y)
      {

        return d += y.get_neg_offset(d);
      }

    private:
      int_rep _y;
  };

}}
# 132 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration_types.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration_types.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_date.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_date.hpp"
namespace boost {
namespace gregorian {


  using date_time::special_values;
  using date_time::not_special;
  using date_time::neg_infin;
  using date_time::pos_infin;
  using date_time::not_a_date_time;
  using date_time::max_date_time;
  using date_time::min_date_time;
# 38 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_date.hpp"
  class date : public date_time::date<date, gregorian_calendar, date_duration>
  {
   public:
    typedef gregorian_calendar::year_type year_type;
    typedef gregorian_calendar::month_type month_type;
    typedef gregorian_calendar::day_type day_type;
    typedef gregorian_calendar::day_of_year_type day_of_year_type;
    typedef gregorian_calendar::ymd_type ymd_type;
    typedef gregorian_calendar::date_rep_type date_rep_type;
    typedef gregorian_calendar::date_int_type date_int_type;
    typedef date_duration duration_type;


    date():
      date_time::date<date, gregorian_calendar, date_duration>(date_rep_type::from_special(not_a_date_time))
    {}


    date(year_type y, month_type m, day_type d)
      : date_time::date<date, gregorian_calendar, date_duration>(y, m, d)
    {
      if (gregorian_calendar::end_of_month_day(y, m) < d) {
        boost::throw_exception(bad_day_of_month(std::string("Day of month is not valid for year")));
      }
    }

    explicit date(const ymd_type& ymd)
      : date_time::date<date, gregorian_calendar, date_duration>(ymd)
    {}

    explicit date(const date_int_type& rhs):
      date_time::date<date,gregorian_calendar, date_duration>(rhs)
    {}

    explicit date(date_rep_type rhs):
      date_time::date<date,gregorian_calendar, date_duration>(rhs)
    {}

    explicit date(special_values sv):
      date_time::date<date, gregorian_calendar, date_duration>(date_rep_type::from_special(sv))
    {
      if (sv == min_date_time)
      {
        *this = date(1400, 1, 1);
      }
      if (sv == max_date_time)
      {
        *this = date(9999, 12, 31);
      }

    }

    date_int_type julian_day() const
    {
      ymd_type ymd = year_month_day();
      return gregorian_calendar::julian_day_number(ymd);
    }

    day_of_year_type day_of_year() const
    {
      date start_of_year(year(), 1, 1);
      unsigned short doy = static_cast<unsigned short>((*this-start_of_year).days() + 1);
      return day_of_year_type(doy);
    }

    date_int_type modjulian_day() const
    {
      ymd_type ymd = year_month_day();
      return gregorian_calendar::modjulian_day_number(ymd);
    }

    int week_number() const
    {
      ymd_type ymd = year_month_day();
      return gregorian_calendar::week_number(ymd);
    }

    date_int_type day_number() const
    {
      return days_;
    }

    date end_of_month() const
    {
      ymd_type ymd = year_month_day();
      short eom_day = gregorian_calendar::end_of_month_day(ymd.year, ymd.month);
      return date(ymd.year, ymd.month, eom_day);
    }

   private:

  };



} }
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/adjust_functors.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/adjust_functors.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/wrapping_int.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/wrapping_int.hpp"
namespace boost {
namespace date_time {
# 30 "D:\\my_project\\boost_1_65_1\\boost/date_time/wrapping_int.hpp"
template<typename int_type_, int_type_ wrap_val>
class wrapping_int {
public:
  typedef int_type_ int_type;

  static int_type wrap_value() {return wrap_val;}

  wrapping_int(int_type v) : value_(v) {}

  int_type as_int() const {return value_;}
  operator int_type() const {return value_;}





  template< typename IntT >
  IntT add(IntT v)
  {
    int_type remainder = static_cast<int_type>(v % (wrap_val));
    IntT overflow = static_cast<IntT>(v / (wrap_val));
    value_ = static_cast<int_type>(value_ + remainder);
    return calculate_wrap(overflow);
  }






  template< typename IntT >
  IntT subtract(IntT v)
  {
    int_type remainder = static_cast<int_type>(v % (wrap_val));
    IntT underflow = static_cast<IntT>(-(v / (wrap_val)));
    value_ = static_cast<int_type>(value_ - remainder);
    return calculate_wrap(underflow) * -1;
  }
private:
  int_type value_;

  template< typename IntT >
  IntT calculate_wrap(IntT wrap)
  {
    if ((value_) >= wrap_val)
    {
      ++wrap;
      value_ -= (wrap_val);
    }
    else if(value_ < 0)
    {
      --wrap;
      value_ += (wrap_val);
    }
    return wrap;
  }

};






template<typename int_type_, int_type_ wrap_min, int_type_ wrap_max>
class wrapping_int2 {
public:
  typedef int_type_ int_type;
  static int_type wrap_value() {return wrap_max;}
  static int_type min_value() {return wrap_min;}


  wrapping_int2(int_type v) : value_(v) {
    if(value_ < wrap_min)
    {
      value_ = wrap_min;
    }
    if(value_ > wrap_max)
    {
      value_ = wrap_max;
    }
  }

  int_type as_int() const {return value_;}
  operator int_type() const {return value_;}





  template< typename IntT >
  IntT add(IntT v)
  {
    int_type remainder = static_cast<int_type>(v % (wrap_max - wrap_min + 1));
    IntT overflow = static_cast<IntT>(v / (wrap_max - wrap_min + 1));
    value_ = static_cast<int_type>(value_ + remainder);
    return calculate_wrap(overflow);
  }





  template< typename IntT >
  IntT subtract(IntT v)
  {
    int_type remainder = static_cast<int_type>(v % (wrap_max - wrap_min + 1));
    IntT underflow = static_cast<IntT>(-(v / (wrap_max - wrap_min + 1)));
    value_ = static_cast<int_type>(value_ - remainder);
    return calculate_wrap(underflow);
  }

private:
  int_type value_;

  template< typename IntT >
  IntT calculate_wrap(IntT wrap)
  {
    if ((value_) > wrap_max)
    {
      ++wrap;
      value_ -= (wrap_max - wrap_min + 1);
    }
    else if((value_) < wrap_min)
    {
      --wrap;
      value_ += (wrap_max - wrap_min + 1);
    }
    return wrap;
  }
};



} }
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/adjust_functors.hpp" 2


namespace boost {
namespace date_time {



  template<class date_type>
  class day_functor
  {
  public:
    typedef typename date_type::duration_type duration_type;
    day_functor(int f) : f_(f) {}
    duration_type get_offset(const date_type& d) const
    {


      d.year();
      return duration_type(f_);
    }
    duration_type get_neg_offset(const date_type& d) const
    {

      d.year();
      return duration_type(-f_);
    }
  private:
    int f_;
  };
# 53 "D:\\my_project\\boost_1_65_1\\boost/date_time/adjust_functors.hpp"
  template<class date_type>
  class month_functor
  {
  public:
    typedef typename date_type::duration_type duration_type;
    typedef typename date_type::calendar_type cal_type;
    typedef typename cal_type::ymd_type ymd_type;
    typedef typename cal_type::day_type day_type;

    month_functor(int f) : f_(f), origDayOfMonth_(0) {}
    duration_type get_offset(const date_type& d) const
    {
      ymd_type ymd(d.year_month_day());
      if (origDayOfMonth_ == 0) {
        origDayOfMonth_ = ymd.day;
        day_type endOfMonthDay(cal_type::end_of_month_day(ymd.year,ymd.month));
        if (endOfMonthDay == ymd.day) {
          origDayOfMonth_ = -1;
        }
      }
      typedef date_time::wrapping_int2<short,1,12> wrap_int2;
      typedef typename wrap_int2::int_type int_type;
      wrap_int2 wi(ymd.month);

      int_type year = wi.add(static_cast<int_type>(f_));
      year = static_cast<int_type>(year + ymd.year);



      day_type resultingEndOfMonthDay(cal_type::end_of_month_day(year, wi.as_int()));

      if (origDayOfMonth_ == -1) {
        return date_type(year, wi.as_int(), resultingEndOfMonthDay) - d;
      }
      day_type dayOfMonth = origDayOfMonth_;
      if (dayOfMonth > resultingEndOfMonthDay) {
        dayOfMonth = resultingEndOfMonthDay;
      }
      return date_type(year, wi.as_int(), dayOfMonth) - d;
    }

    duration_type get_neg_offset(const date_type& d) const
    {
      ymd_type ymd(d.year_month_day());
      if (origDayOfMonth_ == 0) {
        origDayOfMonth_ = ymd.day;
        day_type endOfMonthDay(cal_type::end_of_month_day(ymd.year,ymd.month));
        if (endOfMonthDay == ymd.day) {
          origDayOfMonth_ = -1;
        }
      }
      typedef date_time::wrapping_int2<short,1,12> wrap_int2;
      typedef typename wrap_int2::int_type int_type;
      wrap_int2 wi(ymd.month);

      int_type year = wi.subtract(static_cast<int_type>(f_));
      year = static_cast<int_type>(year + ymd.year);

      day_type resultingEndOfMonthDay(cal_type::end_of_month_day(year, wi.as_int()));

      if (origDayOfMonth_ == -1) {
        return date_type(year, wi.as_int(), resultingEndOfMonthDay) - d;
      }
      day_type dayOfMonth = origDayOfMonth_;
      if (dayOfMonth > resultingEndOfMonthDay) {
        dayOfMonth = resultingEndOfMonthDay;
      }
      return date_type(year, wi.as_int(), dayOfMonth) - d;
    }
  private:
    int f_;
    mutable short origDayOfMonth_;
  };



  template<class date_type>
  class week_functor
  {
  public:
    typedef typename date_type::duration_type duration_type;
    typedef typename date_type::calendar_type calendar_type;
    week_functor(int f) : f_(f) {}
    duration_type get_offset(const date_type& d) const
    {


      d.year();
      return duration_type(f_*calendar_type::days_in_week());
    }
    duration_type get_neg_offset(const date_type& d) const
    {

      d.year();
      return duration_type(-f_*calendar_type::days_in_week());
    }
  private:
    int f_;
  };


  template<class date_type>
  class year_functor
  {
  public:

    typedef typename date_type::duration_type duration_type;
    year_functor(int f) : _mf(f * 12) {}
    duration_type get_offset(const date_type& d) const
    {
      return _mf.get_offset(d);
    }
    duration_type get_neg_offset(const date_type& d) const
    {
      return _mf.get_neg_offset(d);
    }
  private:
    month_functor<date_type> _mf;
  };


} }
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/greg_duration_types.hpp" 2




namespace boost {
namespace gregorian {


  struct greg_durations_config {
    typedef date date_type;
    typedef date_time::int_adapter<int> int_rep;
    typedef date_time::month_functor<date_type> month_adjustor_type;
  };

  typedef date_time::months_duration<greg_durations_config> months;
  typedef date_time::years_duration<greg_durations_config> years;

  class weeks_duration : public date_duration {
  public:
    weeks_duration(duration_rep w)
      : date_duration(w * 7) {}
    weeks_duration(date_time::special_values sv)
      : date_duration(sv) {}
  };

  typedef weeks_duration weeks;

}}
# 22 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sstream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#pragma warning(disable: 4251)


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringbuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringbuf(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  {
  _Init(0, 0, _Getstate(_Mode));
  }

 explicit basic_stringbuf(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  _Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
  }

 basic_stringbuf(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mysb::swap(_Right);
   ::std:: swap(_Seekhigh, _Right._Seekhigh);
   ::std:: swap(_Mystate, _Right._Mystate);
   _Swap_adl(_Al, _Right._Al);
   }
  }

 basic_stringbuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringbuf() noexcept
  {
  _Tidy();
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16};
 typedef int _Strstate;

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 _Mystr str() const
  {
  if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
   {
   _Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
    ? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
   return (_Str);
   }
  else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
   {
   _Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
   return (_Str);
   }
  else
   {
   _Mystr _Nul;
   return (_Nul);
   }
  }

 void str(const _Mystr& _Newstr)
  {
  _Tidy();
  _Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
  }

protected:
 virtual int_type overflow(int_type _Meta = _Traits::eof())
  {
  if (_Mystate & _Constant)
   return (_Traits::eof());
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));

  if (_Mystate & _Append
   && _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
   _Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else
   {
   size_t _Oldsize = _Mysb::pptr() == 0
    ? 0 : _Mysb::epptr() - _Mysb::eback();
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while (0 < _Inc && 2147483647 - _Inc < _Newsize)
    _Inc /= 2;
   if (_Inc == 0)
    return (_Traits::eof());

   _Newsize += _Inc;

   _Elem *_Newptr = _Al.allocate(_Newsize);
   _Elem *_Oldptr = _Mysb::eback();

   if (0 < _Oldsize)
    _Traits::copy(_Newptr, _Oldptr, _Oldsize);

   if (_Oldsize == 0)
    {
    _Seekhigh = _Newptr;
    _Mysb::setp(_Newptr, _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
    }
   else
    {
    _Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
    _Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
     _Newptr + (_Mysb::pptr() - _Oldptr),
     _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr,
      _Newptr + (_Mysb::gptr() - _Oldptr),
      _Mysb::pptr() + 1);
    }

   if (_Mystate & _Allocated)
    _Al.deallocate(_Oldptr, _Oldsize);
   _Mystate |= _Allocated;

   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  }

 virtual int_type pbackfail(int_type _Meta = _Traits::eof())
  {
  if (_Mysb::gptr() == 0
   || _Mysb::gptr() <= _Mysb::eback()
   || (!_Traits::eq_int_type(_Traits::eof(), _Meta)
   && !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
   && _Mystate & _Constant))
   return (_Traits::eof());
  else
   {
   _Mysb::gbump(-1);
   if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
    *_Mysb::gptr() = _Traits::to_char_type(_Meta);
   return (_Traits::not_eof(_Meta));
   }
  }

 virtual int_type underflow()
  {
  if (_Mysb::gptr() == 0)
   return (_Traits::eof());
  else if (_Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Mystate & _Noread || _Mysb::pptr() == 0
   || (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
   return (_Traits::eof());
  else
   {
   if (_Seekhigh < _Mysb::pptr())
    _Seekhigh = _Mysb::pptr();
   _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
   return (_Traits::to_int_type(*_Mysb::gptr()));
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Which = ios_base::in | ios_base::out)
  {
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Which & ios_base::in && _Mysb::gptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur
    && (_Which & ios_base::out) == 0)
    _Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Which & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Which & ios_base::out && _Mysb::pptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur)
    _Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }

  else if (_Off != 0)


   _Off = _BADOFF;
  return (pos_type(_Off));
  }

 virtual pos_type seekpos(pos_type _Ptr,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  streamoff _Off = (streamoff)_Ptr;
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Off == _BADOFF)
   ;
  else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Mode & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return (streampos(_Off));
  }

 void _Init(const _Elem *_Ptr,
  size_t _Count, _Strstate _State)
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if (_Count != 0
   && (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
   {
   _Elem *_Pnew = _Al.allocate(_Count);
   _Traits::copy(_Pnew, _Ptr, _Count);
   _Seekhigh = _Pnew + _Count;

   if (!(_Mystate & _Noread))
    _Mysb::setg(_Pnew, _Pnew,
     _Pnew + _Count);
   if (!(_Mystate & _Constant))
    {
    _Mysb::setp(_Pnew,
     (_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count);
    if (_Mysb::gptr() == 0)
     _Mysb::setg(_Pnew, 0, _Pnew);
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy()
  {
  if (_Mystate & _Allocated)
   _Al.deallocate(_Mysb::eback(),
    (_Mysb::pptr() != 0 ? _Mysb::epptr()
     : _Mysb::egptr()) - _Mysb::eback());
  _Mysb::setg(0, 0, 0);
  _Mysb::setp(0, 0);
  _Seekhigh = 0;
  _Mystate &= ~_Allocated;
  }

private:
 enum
  {
  _MINSIZE = 32};

 _Strstate _Getstate(ios_base::openmode _Mode)
  {
  _Strstate _State = (_Strstate)0;
  if (!(_Mode & ios_base::in))
   _State |= _Noread;
  if (!(_Mode & ios_base::out))
   _State |= _Constant;
  if (_Mode & ios_base::app)
   _State |= _Append;
  if (_Mode & ios_base::ate)
   _State |= _Atend;
  return (_State);
  }

 _Elem *_Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
  basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_istringstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::in)
  {
  }

 explicit basic_istringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::in)
  {
  }

 basic_istringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_istringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_ostringstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::out)
  {
  }

 explicit basic_ostringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::out)
  {
  }

 basic_ostringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_ostringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringstream(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode)
  {
  }

 explicit basic_stringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode)
  {
  }

 basic_stringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_stringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp" 2





namespace boost {
namespace date_time {







  template<class date_type>
  class year_based_generator
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::year_type year_type;
    year_based_generator() {}
    virtual ~year_based_generator() {}
    virtual date_type get_date(year_type y) const = 0;

    virtual std::string to_string() const =0;
  };
# 55 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
  template<class date_type>
 class partial_date : public year_based_generator<date_type>
 {
 public:
   typedef typename date_type::calendar_type calendar_type;
   typedef typename calendar_type::day_type day_type;
   typedef typename calendar_type::month_type month_type;
   typedef typename calendar_type::year_type year_type;
   typedef typename date_type::duration_type duration_type;
   typedef typename duration_type::duration_rep duration_rep;
   partial_date(day_type d, month_type m) :
     day_(d),
     month_(m)
   {}





   partial_date(duration_rep days) :
     day_(1),
     month_(1)
   {
     date_type d1(2000,1,1);
     if(days > 1) {
       if(days > 366)
       {
         days = 366;
       }
       days = days - 1;
       duration_type dd(days);
       d1 = d1 + dd;
     }
     day_ = d1.day();
     month_ = d1.month();
   }
# 101 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
   date_type get_date(year_type y) const
   {
     if((day_ == 29) && (month_ == 2) && !(calendar_type::is_leap_year(y))) {
       std::ostringstream ss;
       ss << "No Feb 29th in given year of " << y << ".";
       boost::throw_exception(std::invalid_argument(ss.str()));
     }
     return date_type(y, month_, day_);
   }
   date_type operator()(year_type y) const
   {
     return get_date(y);

   }
   bool operator==(const partial_date& rhs) const
   {
     return (month_ == rhs.month_) && (day_ == rhs.day_);
   }
   bool operator<(const partial_date& rhs) const
   {
     if (month_ < rhs.month_) return true;
     if (month_ > rhs.month_) return false;

     return (day_ < rhs.day_);
   }


   month_type month() const
   {
     return month_;
   }
   day_type day() const
   {
     return day_;
   }






   virtual std::string to_string() const
   {
     std::ostringstream ss;
     date_type d(2004, month_, day_);
     unsigned short c = d.day_of_year();
     c--;
     ss << c;
     return ss.str();
   }
 private:
   day_type day_;
   month_type month_;
 };



                       const char* nth_as_str(int n);
# 177 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
  template<class date_type>
  class nth_kday_of_month : public year_based_generator<date_type>
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::day_of_week_type day_of_week_type;
    typedef typename calendar_type::month_type month_type;
    typedef typename calendar_type::year_type year_type;
    typedef typename date_type::duration_type duration_type;
    enum week_num {first=1, second, third, fourth, fifth};
    nth_kday_of_month(week_num week_no,
                      day_of_week_type dow,
                      month_type m) :
      month_(m),
      wn_(week_no),
      dow_(dow)
    {}

    date_type get_date(year_type y) const
    {
      date_type d(y, month_, 1);
      duration_type one_day(1);
      duration_type one_week(7);
      while (dow_ != d.day_of_week()) {
        d = d + one_day;
      }
      int week = 1;
      while (week < wn_) {
        d = d + one_week;
        week++;
      }

      if(d.month() != month_) {
        d = d - one_week;
      }
      return d;
    }

    month_type month() const
    {
      return month_;
    }
    week_num nth_week() const
    {
      return wn_;
    }
    day_of_week_type day_of_week() const
    {
      return dow_;
    }
    const char* nth_week_as_str() const
    {
      return nth_as_str(wn_);
    }


    virtual std::string to_string() const
    {
     std::ostringstream ss;
     ss << 'M'
       << static_cast<int>(month_) << '.'
       << static_cast<int>(wn_) << '.'
       << static_cast<int>(dow_);
     return ss.str();
    }
  private:
    month_type month_;
    week_num wn_;
    day_of_week_type dow_;
  };





  template<class date_type>
  class first_kday_of_month : public year_based_generator<date_type>
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::day_of_week_type day_of_week_type;
    typedef typename calendar_type::month_type month_type;
    typedef typename calendar_type::year_type year_type;
    typedef typename date_type::duration_type duration_type;




    first_kday_of_month(day_of_week_type dow, month_type m) :
      month_(m),
      dow_(dow)
    {}

    date_type get_date(year_type year) const
    {
      date_type d(year, month_,1);
      duration_type one_day(1);
      while (dow_ != d.day_of_week()) {
        d = d + one_day;
      }
      return d;
    }

    month_type month() const
    {
      return month_;
    }
    day_of_week_type day_of_week() const
    {
      return dow_;
    }


    virtual std::string to_string() const
    {
     std::ostringstream ss;
     ss << 'M'
       << static_cast<int>(month_) << '.'
       << 1 << '.'
       << static_cast<int>(dow_);
     return ss.str();
    }
  private:
    month_type month_;
    day_of_week_type dow_;
  };
# 313 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
  template<class date_type>
  class last_kday_of_month : public year_based_generator<date_type>
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::day_of_week_type day_of_week_type;
    typedef typename calendar_type::month_type month_type;
    typedef typename calendar_type::year_type year_type;
    typedef typename date_type::duration_type duration_type;




    last_kday_of_month(day_of_week_type dow, month_type m) :
      month_(m),
      dow_(dow)
    {}

    date_type get_date(year_type year) const
    {
      date_type d(year, month_, calendar_type::end_of_month_day(year,month_));
      duration_type one_day(1);
      while (dow_ != d.day_of_week()) {
        d = d - one_day;
      }
      return d;
    }

    month_type month() const
    {
      return month_;
    }
    day_of_week_type day_of_week() const
    {
      return dow_;
    }


    virtual std::string to_string() const
    {
      std::ostringstream ss;
      ss << 'M'
         << static_cast<int>(month_) << '.'
         << 5 << '.'
         << static_cast<int>(dow_);
      return ss.str();
    }
  private:
    month_type month_;
    day_of_week_type dow_;
   };
# 375 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
  template<class date_type>
  class first_kday_after
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::day_of_week_type day_of_week_type;
    typedef typename date_type::duration_type duration_type;
    first_kday_after(day_of_week_type dow) :
      dow_(dow)
    {}

    date_type get_date(date_type start_day) const
    {
      duration_type one_day(1);
      date_type d = start_day + one_day;
      while (dow_ != d.day_of_week()) {
        d = d + one_day;
      }
      return d;
    }

    day_of_week_type day_of_week() const
    {
      return dow_;
    }
  private:
    day_of_week_type dow_;
  };
# 413 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_generators.hpp"
  template<class date_type>
  class first_kday_before
  {
  public:
    typedef typename date_type::calendar_type calendar_type;
    typedef typename calendar_type::day_of_week_type day_of_week_type;
    typedef typename date_type::duration_type duration_type;
    first_kday_before(day_of_week_type dow) :
      dow_(dow)
    {}

    date_type get_date(date_type start_day) const
    {
      duration_type one_day(1);
      date_type d = start_day - one_day;
      while (dow_ != d.day_of_week()) {
        d = d - one_day;
      }
      return d;
    }

    day_of_week_type day_of_week() const
    {
      return dow_;
    }
  private:
    day_of_week_type dow_;
  };





  template<typename date_type, class weekday_type>
  inline
  typename date_type::duration_type days_until_weekday(const date_type& d, const weekday_type& wd)
  {
    typedef typename date_type::duration_type duration_type;
    duration_type wks(0);
    duration_type dd(wd.as_number() - d.day_of_week().as_number());
    if(dd.is_negative()){
      wks = duration_type(7);
    }
    return dd + wks;
  }






  template<typename date_type, class weekday_type>
  inline
  typename date_type::duration_type days_before_weekday(const date_type& d, const weekday_type& wd)
  {
    typedef typename date_type::duration_type duration_type;
    duration_type wks(0);
    duration_type dd(wd.as_number() - d.day_of_week().as_number());
    if(dd.days() > 0){
      wks = duration_type(7);
    }


    return (-dd + wks);
  }






  template<class date_type, class weekday_type>
  inline
  date_type next_weekday(const date_type& d, const weekday_type& wd)
  {
    return d + days_until_weekday(d, wd);
  }






  template<class date_type, class weekday_type>
  inline
  date_type previous_weekday(const date_type& d, const weekday_type& wd)
  {
    return d - days_before_weekday(d, wd);
  }

} }
# 25 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_clock_device.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_clock_device.hpp"
namespace boost {
namespace date_time {







  template<class date_type>
  class day_clock
  {
  public:
    typedef typename date_type::ymd_type ymd_type;

    static date_type local_day()
    {
      return date_type(local_day_ymd());
    }

    static typename date_type::ymd_type local_day_ymd()
    {
      ::std::tm result;
      ::std::tm* curr = get_local_time(result);
      return ymd_type(static_cast<unsigned short>(curr->tm_year + 1900),
                      static_cast<unsigned short>(curr->tm_mon + 1),
                      static_cast<unsigned short>(curr->tm_mday));
    }

    static typename date_type::ymd_type universal_day_ymd()
    {
      ::std::tm result;
      ::std::tm* curr = get_universal_time(result);
      return ymd_type(static_cast<unsigned short>(curr->tm_year + 1900),
                      static_cast<unsigned short>(curr->tm_mon + 1),
                      static_cast<unsigned short>(curr->tm_mday));
    }

    static date_type universal_day()
    {
      return date_type(universal_day_ymd());
    }

  private:
    static ::std::tm* get_local_time(std::tm& result)
    {
      ::std::time_t t;
      ::std::time(&t);
      return c_time::localtime(&t, &result);
    }
    static ::std::tm* get_universal_time(std::tm& result)
    {
      ::std::time_t t;
      ::std::time(&t);
      return c_time::gmtime(&t, &result);
    }

  };

} }
# 26 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_iterator.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_iterator.hpp"
namespace boost {
namespace date_time {

  enum date_resolutions {day, week, months, year, decade, century, NumDateResolutions};
# 32 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_iterator.hpp"
  template<class date_type>
  class date_itr_base {



  public:
    typedef typename date_type::duration_type duration_type;
    typedef date_type value_type;
    typedef std::input_iterator_tag iterator_category;

    date_itr_base(date_type d) : current_(d) {}
    virtual ~date_itr_base() {}
    date_itr_base& operator++()
    {
      current_ = current_ + get_offset(current_);
      return *this;
    }
    date_itr_base& operator--()
    {
      current_ = current_ + get_neg_offset(current_);
      return *this;
    }
    virtual duration_type get_offset(const date_type& current) const=0;
    virtual duration_type get_neg_offset(const date_type& current) const=0;
    date_type operator*() {return current_;}
    date_type* operator->() {return &current_;}
    bool operator< (const date_type& d) {return current_ < d;}
    bool operator<= (const date_type& d) {return current_ <= d;}
    bool operator> (const date_type& d) {return current_ > d;}
    bool operator>= (const date_type& d) {return current_ >= d;}
    bool operator== (const date_type& d) {return current_ == d;}
    bool operator!= (const date_type& d) {return current_ != d;}
  private:
    date_type current_;
  };
# 76 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_iterator.hpp"
  template<class offset_functor, class date_type>
  class date_itr : public date_itr_base<date_type> {
  public:
    typedef typename date_type::duration_type duration_type;
    date_itr(date_type d, int factor=1) :
      date_itr_base<date_type>(d),
      of_(factor)
    {}
  private:
    virtual duration_type get_offset(const date_type& current) const
    {
      return of_.get_offset(current);
    }
    virtual duration_type get_neg_offset(const date_type& current) const
    {
      return of_.get_neg_offset(current);
    }
    offset_functor of_;
  };



} }
# 27 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_types.hpp" 2



namespace boost {






namespace gregorian {



  typedef date_time::period<date, date_duration> date_period;






  typedef date_time::year_based_generator<date> year_based_generator;


  typedef date_time::partial_date<date> partial_date;

  typedef date_time::nth_kday_of_month<date> nth_kday_of_month;
  typedef nth_kday_of_month nth_day_of_the_week_in_month;

  typedef date_time::first_kday_of_month<date> first_kday_of_month;
  typedef first_kday_of_month first_day_of_the_week_in_month;

  typedef date_time::last_kday_of_month<date> last_kday_of_month;
  typedef last_kday_of_month last_day_of_the_week_in_month;

  typedef date_time::first_kday_after<date> first_kday_after;
  typedef first_kday_after first_day_of_the_week_after;

  typedef date_time::first_kday_before<date> first_kday_before;
  typedef first_kday_before first_day_of_the_week_before;




  typedef date_time::day_clock<date> day_clock;




  typedef date_time::date_itr_base<date> date_iterator;




  typedef date_time::date_itr<date_time::day_functor<date>,
                              date> day_iterator;



  typedef date_time::date_itr<date_time::week_functor<date>,
                              date> week_iterator;



  typedef date_time::date_itr<date_time::month_functor<date>,
                              date> month_iterator;



  typedef date_time::date_itr<date_time::year_functor<date>,
                              date> year_iterator;


  using date_time::days_until_weekday;
  using date_time::days_before_weekday;
  using date_time::next_weekday;
  using date_time::previous_weekday;

} }
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp" 2




namespace boost {
namespace posix_time {
# 40 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp"
  typedef date_time::time_resolution_traits<
    boost::date_time::time_resolution_traits_adapted64_impl, boost::date_time::micro,
                                            1000000, 6 > time_res_traits;
# 57 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp"
  class time_duration :
    public date_time::time_duration<time_duration, time_res_traits>
  {
  public:
    typedef time_res_traits rep_type;
    typedef time_res_traits::day_type day_type;
    typedef time_res_traits::hour_type hour_type;
    typedef time_res_traits::min_type min_type;
    typedef time_res_traits::sec_type sec_type;
    typedef time_res_traits::fractional_seconds_type fractional_seconds_type;
    typedef time_res_traits::tick_type tick_type;
    typedef time_res_traits::impl_type impl_type;
    time_duration(hour_type hour,
                  min_type min,
                  sec_type sec,
                  fractional_seconds_type fs=0) :
      date_time::time_duration<time_duration, time_res_traits>(hour,min,sec,fs)
    {}
    time_duration() :
      date_time::time_duration<time_duration, time_res_traits>(0,0,0)
    {}

    time_duration(boost::date_time::special_values sv) :
      date_time::time_duration<time_duration, time_res_traits>(sv)
    {}

    friend class date_time::time_duration<time_duration, time_res_traits>;
  protected:
    explicit time_duration(impl_type tick_count) :
      date_time::time_duration<time_duration, time_res_traits>(tick_count)
    {}
  };
# 154 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_config.hpp"
  class millisec_posix_time_system_config
  {
   public:
    typedef boost::int64_t time_rep_type;

    typedef gregorian::date date_type;
    typedef gregorian::date_duration date_duration_type;
    typedef time_duration time_duration_type;
    typedef time_res_traits::tick_type int_type;
    typedef time_res_traits::impl_type impl_type;
    typedef time_res_traits resolution_traits;


    static const boost::int64_t tick_per_second = 1000000;

  };



} }
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_system_split.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_system_split.hpp"
namespace boost {
namespace date_time {





  template<typename config>

  class split_timedate_system
  {
   public:
    typedef typename config::time_rep_type time_rep_type;
    typedef typename config::date_type date_type;
    typedef typename config::time_duration_type time_duration_type;
    typedef typename config::date_duration_type date_duration_type;
    typedef typename config::int_type int_type;
    typedef typename config::resolution_traits resolution_traits;





   private:
     static const int_type ticks_per_day = (86400LL) * config::tick_per_second;
   public:



    typedef date_time::wrapping_int<int_type, ticks_per_day> wrap_int_type;



    static time_rep_type get_time_rep(special_values sv)
    {
      switch (sv) {
      case not_a_date_time:
        return time_rep_type(date_type(not_a_date_time),
                             time_duration_type(not_a_date_time));
      case pos_infin:
        return time_rep_type(date_type(pos_infin),
                             time_duration_type(pos_infin));
      case neg_infin:
        return time_rep_type(date_type(neg_infin),
                             time_duration_type(neg_infin));
      case max_date_time: {
        time_duration_type td = time_duration_type(24,0,0,0) - time_duration_type(0,0,0,1);
        return time_rep_type(date_type(max_date_time), td);
      }
      case min_date_time:
        return time_rep_type(date_type(min_date_time), time_duration_type(0,0,0,0));

      default:
        return time_rep_type(date_type(not_a_date_time),
                             time_duration_type(not_a_date_time));

      }

    }

    static time_rep_type get_time_rep(const date_type& day,
                                      const time_duration_type& tod,
                                      date_time::dst_flags = not_dst)
    {
      if(day.is_special() || tod.is_special()) {
        if(day.is_not_a_date() || tod.is_not_a_date_time()) {
          return time_rep_type(date_type(not_a_date_time),
                               time_duration_type(not_a_date_time));
        }
        else if(day.is_pos_infinity()) {
          if(tod.is_neg_infinity()) {
            return time_rep_type(date_type(not_a_date_time),
                                 time_duration_type(not_a_date_time));
          }
          else {
            return time_rep_type(day, time_duration_type(pos_infin));
          }
        }
        else if(day.is_neg_infinity()) {
          if(tod.is_pos_infinity()) {
            return time_rep_type(date_type(not_a_date_time),
                                 time_duration_type(not_a_date_time));
          }
          else {
            return time_rep_type(day, time_duration_type(neg_infin));
          }
        }
        else if(tod.is_pos_infinity()) {
          if(day.is_neg_infinity()) {
            return time_rep_type(date_type(not_a_date_time),
                                 time_duration_type(not_a_date_time));
          }
          else {
            return time_rep_type(date_type(pos_infin), tod);
          }
        }
        else if(tod.is_neg_infinity()) {
          if(day.is_pos_infinity()) {
            return time_rep_type(date_type(not_a_date_time),
                                 time_duration_type(not_a_date_time));
          }
          else {
            return time_rep_type(date_type(neg_infin), tod);
          }
        }
      }
      return time_rep_type(day, tod);
    }
    static date_type get_date(const time_rep_type& val)
    {
      return date_type(val.day);
    }
    static time_duration_type get_time_of_day(const time_rep_type& val)
    {
      return time_duration_type(val.time_of_day);
    }
    static std::string zone_name(const time_rep_type&)
    {
      return std::string();
    }
    static bool is_equal(const time_rep_type& lhs, const time_rep_type& rhs)
    {
      return ((lhs.day == rhs.day) && (lhs.time_of_day == rhs.time_of_day));
    }
    static bool is_less(const time_rep_type& lhs, const time_rep_type& rhs)
    {
      if (lhs.day < rhs.day) return true;
      if (lhs.day > rhs.day) return false;
      return (lhs.time_of_day < rhs.time_of_day);
    }
    static time_rep_type add_days(const time_rep_type& base,
                                  const date_duration_type& dd)
    {
      return time_rep_type(base.day+dd, base.time_of_day);
    }
    static time_rep_type subtract_days(const time_rep_type& base,
                                       const date_duration_type& dd)
    {
      return split_timedate_system::get_time_rep(base.day-dd, base.time_of_day);
    }
    static time_rep_type subtract_time_duration(const time_rep_type& base,
                                                const time_duration_type& td)
    {
      if(base.day.is_special() || td.is_special())
      {
        return split_timedate_system::get_time_rep(base.day, -td);
      }
      if (td.is_negative()) {
        time_duration_type td1 = td.invert_sign();
        return add_time_duration(base,td1);
      }

      wrap_int_type day_offset(base.time_of_day.ticks());
      date_duration_type day_overflow(static_cast<typename date_duration_type::duration_rep_type>(day_offset.subtract(td.ticks())));

      return time_rep_type(base.day-day_overflow,
                           time_duration_type(0,0,0,day_offset.as_int()));
    }
    static time_rep_type add_time_duration(const time_rep_type& base,
                                           time_duration_type td)
    {
      if(base.day.is_special() || td.is_special()) {
        return split_timedate_system::get_time_rep(base.day, td);
      }
      if (td.is_negative()) {
        time_duration_type td1 = td.invert_sign();
        return subtract_time_duration(base,td1);
      }

      wrap_int_type day_offset(base.time_of_day.ticks());
      date_duration_type day_overflow(static_cast< typename date_duration_type::duration_rep_type >(day_offset.add(td.ticks())));

      return time_rep_type(base.day+day_overflow,
                           time_duration_type(0,0,0,day_offset.as_int()));
    }
    static time_duration_type subtract_times(const time_rep_type& lhs,
                                             const time_rep_type& rhs)
    {
      date_duration_type dd = lhs.day - rhs.day;
      time_duration_type td(dd.days()*24,0,0);
      time_duration_type td2 = lhs.time_of_day - rhs.time_of_day;
      return td+td2;

    }

  };

} }
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_system_counted.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_system_counted.hpp"
namespace boost {
namespace date_time {


  template<class config>
  struct counted_time_rep
  {
    typedef typename config::int_type int_type;
    typedef typename config::date_type date_type;
    typedef typename config::impl_type impl_type;
    typedef typename date_type::duration_type date_duration_type;
    typedef typename date_type::calendar_type calendar_type;
    typedef typename date_type::ymd_type ymd_type;
    typedef typename config::time_duration_type time_duration_type;
    typedef typename config::resolution_traits resolution_traits;

    counted_time_rep(const date_type& d, const time_duration_type& time_of_day)
      : time_count_(1)
    {
      if(d.is_infinity() || d.is_not_a_date() || time_of_day.is_special()) {
        time_count_ = time_of_day.get_rep() + d.day_count();

      }
      else {
        time_count_ = (d.day_number() * frac_sec_per_day()) + time_of_day.ticks();
      }
    }
    explicit counted_time_rep(int_type count) :
      time_count_(count)
    {}
    explicit counted_time_rep(impl_type count) :
      time_count_(count)
    {}
    date_type date() const
    {
      if(time_count_.is_special()) {
        return date_type(time_count_.as_special());
      }
      else {
        typename calendar_type::date_int_type dc = static_cast<typename calendar_type::date_int_type>(day_count());

        ymd_type ymd = calendar_type::from_day_number(dc);
        return date_type(ymd);
      }
    }

    unsigned long day_count() const
    {
# 78 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_system_counted.hpp"
      return static_cast<unsigned long>(resolution_traits::as_number(time_count_) / frac_sec_per_day());
    }
    int_type time_count() const
    {
      return resolution_traits::as_number(time_count_);
    }
    int_type tod() const
    {
      return resolution_traits::as_number(time_count_) % frac_sec_per_day();
    }
    static int_type frac_sec_per_day()
    {
      int_type seconds_per_day = 60*60*24;
      int_type fractional_sec_per_sec(resolution_traits::res_adjust());
      return seconds_per_day*fractional_sec_per_sec;
    }
    bool is_pos_infinity()const
    {
      return impl_type::is_pos_inf(time_count_.as_number());
    }
    bool is_neg_infinity()const
    {
      return impl_type::is_neg_inf(time_count_.as_number());
    }
    bool is_not_a_date_time()const
    {
      return impl_type::is_not_a_number(time_count_.as_number());
    }
    bool is_special()const
    {
      return time_count_.is_special();
    }
    impl_type get_rep()const
    {
      return time_count_;
    }
  private:
    impl_type time_count_;
  };


  template<class time_rep>
  class counted_time_system
  {
   public:
    typedef time_rep time_rep_type;
    typedef typename time_rep_type::impl_type impl_type;
    typedef typename time_rep_type::time_duration_type time_duration_type;
    typedef typename time_duration_type::fractional_seconds_type fractional_seconds_type;
    typedef typename time_rep_type::date_type date_type;
    typedef typename time_rep_type::date_duration_type date_duration_type;


    template<class T> static void unused_var(const T&) {}

    static time_rep_type get_time_rep(const date_type& day,
                                      const time_duration_type& tod,
                                      date_time::dst_flags dst=not_dst)
    {
      unused_var(dst);
      return time_rep_type(day, tod);
    }

    static time_rep_type get_time_rep(special_values sv)
    {
      switch (sv) {
      case not_a_date_time:
        return time_rep_type(date_type(not_a_date_time),
                             time_duration_type(not_a_date_time));
      case pos_infin:
        return time_rep_type(date_type(pos_infin),
                             time_duration_type(pos_infin));
      case neg_infin:
        return time_rep_type(date_type(neg_infin),
                             time_duration_type(neg_infin));
      case max_date_time: {
        time_duration_type td = time_duration_type(24,0,0,0) - time_duration_type(0,0,0,1);
        return time_rep_type(date_type(max_date_time), td);
      }
      case min_date_time:
        return time_rep_type(date_type(min_date_time), time_duration_type(0,0,0,0));

      default:
        return time_rep_type(date_type(not_a_date_time),
                             time_duration_type(not_a_date_time));

      }

    }

    static date_type get_date(const time_rep_type& val)
    {
      return val.date();
    }
    static time_duration_type get_time_of_day(const time_rep_type& val)
    {
      if(val.is_special()) {
        return time_duration_type(val.get_rep().as_special());
      }
      else{
        return time_duration_type(0,0,0,val.tod());
      }
    }
    static std::string zone_name(const time_rep_type&)
    {
      return "";
    }
    static bool is_equal(const time_rep_type& lhs, const time_rep_type& rhs)
    {
      return (lhs.time_count() == rhs.time_count());
    }
    static bool is_less(const time_rep_type& lhs, const time_rep_type& rhs)
    {
      return (lhs.time_count() < rhs.time_count());
    }
    static time_rep_type add_days(const time_rep_type& base,
                                  const date_duration_type& dd)
    {
      if(base.is_special() || dd.is_special()) {
        return(time_rep_type(base.get_rep() + dd.get_rep()));
      }
      else {
        return time_rep_type(base.time_count() + (dd.days() * time_rep_type::frac_sec_per_day()));
      }
    }
    static time_rep_type subtract_days(const time_rep_type& base,
                                       const date_duration_type& dd)
    {
      if(base.is_special() || dd.is_special()) {
        return(time_rep_type(base.get_rep() - dd.get_rep()));
      }
      else{
        return time_rep_type(base.time_count() - (dd.days() * time_rep_type::frac_sec_per_day()));
      }
    }
    static time_rep_type subtract_time_duration(const time_rep_type& base,
                                                const time_duration_type& td)
    {
      if(base.is_special() || td.is_special()) {
        return(time_rep_type(base.get_rep() - td.get_rep()));
      }
      else {
        return time_rep_type(base.time_count() - td.ticks());
      }
    }
    static time_rep_type add_time_duration(const time_rep_type& base,
                                           time_duration_type td)
    {
      if(base.is_special() || td.is_special()) {
        return(time_rep_type(base.get_rep() + td.get_rep()));
      }
      else {
        return time_rep_type(base.time_count() + td.ticks());
      }
    }
    static time_duration_type subtract_times(const time_rep_type& lhs,
                                             const time_rep_type& rhs)
    {
      if(lhs.is_special() || rhs.is_special()) {
        return(time_duration_type(
          impl_type::to_special((lhs.get_rep() - rhs.get_rep()).as_number())));
      }
      else {
        fractional_seconds_type fs = lhs.time_count() - rhs.time_count();
        return time_duration_type(0,0,0,fs);
      }
    }

  };


} }
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp" 2




namespace boost {
namespace posix_time {
# 32 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_system.hpp"
  typedef date_time::counted_time_rep<millisec_posix_time_system_config> int64_time_rep;
  typedef date_time::counted_time_system<int64_time_rep> posix_time_system;



} }
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/ptime.hpp" 2




namespace boost {

namespace posix_time {


  using date_time::special_values;
  using date_time::not_special;
  using date_time::neg_infin;
  using date_time::pos_infin;
  using date_time::not_a_date_time;
  using date_time::max_date_time;
  using date_time::min_date_time;




  class ptime : public date_time::base_time<ptime, posix_time_system>
  {
  public:
    typedef posix_time_system time_system_type;
    typedef time_system_type::time_rep_type time_rep_type;
    typedef time_system_type::time_duration_type time_duration_type;
    typedef ptime time_type;

    ptime(gregorian::date d,time_duration_type td) : date_time::base_time<time_type,time_system_type>(d,td)
    {}

    explicit ptime(gregorian::date d) : date_time::base_time<time_type,time_system_type>(d,time_duration_type(0,0,0))
    {}

    ptime(const time_rep_type& rhs):
      date_time::base_time<time_type,time_system_type>(rhs)
    {}

    ptime(const special_values sv) : date_time::base_time<time_type,time_system_type>(sv)
    {}


    ptime() : date_time::base_time<time_type,time_system_type>(gregorian::date(not_a_date_time), time_duration_type(not_a_date_time))
    {}


  };



} }
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/date_duration_operators.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/date_duration_operators.hpp"
namespace boost {
namespace posix_time {
# 29 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/date_duration_operators.hpp"
  inline
  ptime
  operator+(const ptime& t, const boost::gregorian::months& m)
  {
    return t + m.get_offset(t.date());
  }




  inline
  ptime
  operator+=(ptime& t, const boost::gregorian::months& m)
  {

    return t += m.get_offset(t.date());
  }




  inline
  ptime
  operator-(const ptime& t, const boost::gregorian::months& m)
  {

    return t + m.get_neg_offset(t.date());
  }




  inline
  ptime
  operator-=(ptime& t, const boost::gregorian::months& m)
  {
    return t += m.get_neg_offset(t.date());
  }






  inline
  ptime
  operator+(const ptime& t, const boost::gregorian::years& y)
  {
    return t + y.get_offset(t.date());
  }




  inline
  ptime
  operator+=(ptime& t, const boost::gregorian::years& y)
  {
    return t += y.get_offset(t.date());
  }




  inline
  ptime
  operator-(const ptime& t, const boost::gregorian::years& y)
  {

    return t + y.get_neg_offset(t.date());
  }




  inline
  ptime
  operator-=(ptime& t, const boost::gregorian::years& y)
  {

    return t += y.get_neg_offset(t.date());
  }

}}
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_duration.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_duration.hpp"
namespace boost {
namespace posix_time {




  class hours : public time_duration
  {
  public:
    explicit hours(long h) :
      time_duration(static_cast<hour_type>(h),0,0)
    {}
  };




  class minutes : public time_duration
  {
  public:
    explicit minutes(long m) :
      time_duration(0,static_cast<min_type>(m),0)
    {}
  };




  class seconds : public time_duration
  {
  public:
    explicit seconds(long s) :
      time_duration(0,0,static_cast<sec_type>(s))
    {}
  };





  typedef date_time::subsecond_duration<time_duration,1000> millisec;
  typedef date_time::subsecond_duration<time_duration,1000> milliseconds;




  typedef date_time::subsecond_duration<time_duration,1000000> microsec;
  typedef date_time::subsecond_duration<time_duration,1000000> microseconds;
# 79 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_duration.hpp"
} }
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/time_period.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/time_period.hpp"
namespace boost {
namespace posix_time {




  typedef date_time::period<ptime, time_duration> time_period;


} }
# 18 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_iterator.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/time_iterator.hpp"
namespace boost {
namespace date_time {



  template<class time_type>
  class time_itr {
  public:
    typedef typename time_type::time_duration_type time_duration_type;
    time_itr(time_type t, time_duration_type d) : current_(t), offset_(d) {}
    time_itr& operator++()
    {
      current_ = current_ + offset_;
      return *this;
    }
    time_itr& operator--()
    {
      current_ = current_ - offset_;
      return *this;
    }
    time_type operator*() {return current_;}
    time_type* operator->() {return &current_;}
    bool operator< (const time_type& t) {return current_ < t;}
    bool operator<= (const time_type& t) {return current_ <= t;}
    bool operator!= (const time_type& t) {return current_ != t;}
    bool operator== (const time_type& t) {return current_ == t;}
    bool operator> (const time_type& t) {return current_ > t;}
    bool operator>= (const time_type& t) {return current_ >= t;}

  private:
    time_type current_;
    time_duration_type offset_;
  };



} }
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
namespace boost {
  namespace date_time {

    enum time_is_dst_result {is_not_in_dst, is_in_dst,
                             ambiguous, invalid_time_label};



    template<class date_type_,
             class time_duration_type_>
    class dst_calculator
    {
    public:
      typedef time_duration_type_ time_duration_type;
      typedef date_type_ date_type;
# 47 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
      static time_is_dst_result
      process_local_dst_start_day(const time_duration_type& time_of_day,
                                  unsigned int dst_start_offset_minutes,
                                  long dst_length_minutes)
      {

        if (time_of_day < time_duration_type(0,dst_start_offset_minutes,0)) {
          return is_not_in_dst;
        }
        long offset = dst_start_offset_minutes + dst_length_minutes;
        if (time_of_day >= time_duration_type(0,offset,0)) {
          return is_in_dst;
        }
        return invalid_time_label;
      }
# 72 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
      static time_is_dst_result
      process_local_dst_end_day(const time_duration_type& time_of_day,
                                unsigned int dst_end_offset_minutes,
                                long dst_length_minutes)
      {

        int offset = dst_end_offset_minutes-dst_length_minutes;
        if (time_of_day < time_duration_type(0,offset,0)) {
          return is_in_dst;
        }
        if (time_of_day >= time_duration_type(0,dst_end_offset_minutes,0)) {
          return is_not_in_dst;
        }
        return ambiguous;
      }
# 100 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
      static time_is_dst_result
      local_is_dst(const date_type& current_day,
                   const time_duration_type& time_of_day,
                   const date_type& dst_start_day,
                   const time_duration_type& dst_start_offset,
                   const date_type& dst_end_day,
                   const time_duration_type& dst_end_offset,
                   const time_duration_type& dst_length_minutes)
      {
        unsigned int start_minutes = static_cast<unsigned>(
          dst_start_offset.hours() * 60 + dst_start_offset.minutes());
        unsigned int end_minutes = static_cast<unsigned>(
          dst_end_offset.hours() * 60 + dst_end_offset.minutes());
        long length_minutes = static_cast<long>(
          dst_length_minutes.hours() * 60 + dst_length_minutes.minutes());

        return local_is_dst(current_day, time_of_day,
                            dst_start_day, start_minutes,
                            dst_end_day, end_minutes,
                            length_minutes);
      }
# 136 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
      static time_is_dst_result
      local_is_dst(const date_type& current_day,
                   const time_duration_type& time_of_day,
                   const date_type& dst_start_day,
                   unsigned int dst_start_offset_minutes,
                   const date_type& dst_end_day,
                   unsigned int dst_end_offset_minutes,
                   long dst_length_minutes)
      {

        if (dst_start_day < dst_end_day) {
          if ((current_day > dst_start_day) && (current_day < dst_end_day)) {
            return is_in_dst;
          }
          if ((current_day < dst_start_day) || (current_day > dst_end_day)) {
            return is_not_in_dst;
          }
        }
        else {
          if ((current_day < dst_start_day) && (current_day > dst_end_day)) {
            return is_not_in_dst;
          }
          if ((current_day > dst_start_day) || (current_day < dst_end_day)) {
            return is_in_dst;
          }
        }

        if (current_day == dst_start_day) {
          return process_local_dst_start_day(time_of_day,
                                             dst_start_offset_minutes,
                                             dst_length_minutes);
        }

        if (current_day == dst_end_day) {
          return process_local_dst_end_day(time_of_day,
                                           dst_end_offset_minutes,
                                           dst_length_minutes);
        }

        return invalid_time_label;
      }

    };
# 208 "D:\\my_project\\boost_1_65_1\\boost/date_time/dst_rules.hpp"
    template<class date_type,
             class time_duration_type,
             class dst_traits>
    class dst_calc_engine
    {
    public:
      typedef typename date_type::year_type year_type;
      typedef typename date_type::calendar_type calendar_type;
      typedef dst_calculator<date_type, time_duration_type> dstcalc;






      static time_is_dst_result local_is_dst(const date_type& d,
                                             const time_duration_type& td)
      {

        year_type y = d.year();
        date_type dst_start = local_dst_start_day(y);
        date_type dst_end = local_dst_end_day(y);
        return dstcalc::local_is_dst(d,td,
                                     dst_start,
                                     dst_traits::dst_start_offset_minutes(),
                                     dst_end,
                                     dst_traits::dst_end_offset_minutes(),
                                     dst_traits::dst_shift_length_minutes());

      }

      static bool is_dst_boundary_day(date_type d)
      {
        year_type y = d.year();
        return ((d == local_dst_start_day(y)) ||
                (d == local_dst_end_day(y)));
      }


      static time_duration_type dst_offset()
      {
        return time_duration_type(0,dst_traits::dst_shift_length_minutes(),0);
      }

      static date_type local_dst_start_day(year_type year)
      {
        return dst_traits::local_dst_start_day(year);
      }

      static date_type local_dst_end_day(year_type year)
      {
        return dst_traits::local_dst_end_day(year);
      }


    };






    template<class date_type_,
             class time_duration_type_,
             unsigned int dst_start_offset_minutes=120,
             short dst_length_minutes=60>
    class us_dst_rules
    {
    public:
      typedef time_duration_type_ time_duration_type;
      typedef date_type_ date_type;
      typedef typename date_type::year_type year_type;
      typedef typename date_type::calendar_type calendar_type;
      typedef date_time::last_kday_of_month<date_type> lkday;
      typedef date_time::first_kday_of_month<date_type> fkday;
      typedef date_time::nth_kday_of_month<date_type> nkday;
      typedef dst_calculator<date_type, time_duration_type> dstcalc;






      static time_is_dst_result local_is_dst(const date_type& d,
                                             const time_duration_type& td)
      {

        year_type y = d.year();
        date_type dst_start = local_dst_start_day(y);
        date_type dst_end = local_dst_end_day(y);
        return dstcalc::local_is_dst(d,td,
                                     dst_start,dst_start_offset_minutes,
                                     dst_end, dst_start_offset_minutes,
                                     dst_length_minutes);

      }


      static bool is_dst_boundary_day(date_type d)
      {
        year_type y = d.year();
        return ((d == local_dst_start_day(y)) ||
                (d == local_dst_end_day(y)));
      }

      static date_type local_dst_start_day(year_type year)
      {
        if (year >= year_type(2007)) {

          nkday ssim(nkday::second, Sunday, gregorian::Mar);
          return ssim.get_date(year);
        } else {

          fkday fsia(Sunday, gregorian::Apr);
          return fsia.get_date(year);
        }
      }

      static date_type local_dst_end_day(year_type year)
      {
        if (year >= year_type(2007)) {

          fkday fsin(Sunday, gregorian::Nov);
          return fsin.get_date(year);
        } else {

          lkday lsio(Sunday, gregorian::Oct);
          return lsio.get_date(year);
        }
      }

      static time_duration_type dst_offset()
      {
        return time_duration_type(0,dst_length_minutes,0);
      }

     private:


    };


    template<class date_type_, class time_duration_type_>
    class null_dst_rules
    {
    public:
      typedef time_duration_type_ time_duration_type;
      typedef date_type_ date_type;





      static time_is_dst_result local_is_dst(const date_type&,
                                             const time_duration_type&)
      {
        return is_not_in_dst;
      }


      static time_is_dst_result utc_is_dst(const date_type&,
                                           const time_duration_type&)
      {
        return is_not_in_dst;
      }

      static bool is_dst_boundary_day(date_type )
      {
        return false;
      }

      static time_duration_type dst_offset()
      {
        return time_duration_type(0,0,0);
      }

    };


  } }
# 20 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time_types.hpp" 2


namespace boost {


namespace posix_time {




  typedef date_time::time_itr<ptime> time_iterator;



  typedef date_time::second_clock<ptime> second_clock;





  typedef date_time::microsec_clock<ptime> microsec_clock;



  typedef date_time::null_dst_rules<ptime::date_type, time_duration> no_dst;

  typedef date_time::us_dst_rules<ptime::date_type, time_duration> us_dst;


} }
# 11 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 2


namespace boost
{
    typedef boost::posix_time::ptime system_time;

    inline system_time get_system_time()
    {

        return boost::date_time::microsec_clock<system_time>::universal_time();



    }

    namespace detail
    {
        inline system_time get_system_time_sentinel()
        {
            return system_time(boost::posix_time::pos_infin);
        }

        inline unsigned long get_milliseconds_until(system_time const& target_time)
        {
            if(target_time.is_pos_infinity())
            {
                return ~(unsigned long)0;
            }
            system_time const now=get_system_time();
            if(target_time<=now)
            {
                return 0;
            }
            return static_cast<unsigned long>((target_time-now).total_milliseconds()+1);
        }

    }

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 53 "D:\\my_project\\boost_1_65_1\\boost/thread/thread_time.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/conversion.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/conversion.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/conversion.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/conversion.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/conversion.hpp"
namespace boost {

namespace gregorian {


  inline
  std::tm to_tm(const date& d)
  {
    if (d.is_special())
    {
        std::string s = "tm unable to handle ";
        switch (d.as_special())
        {
        case date_time::not_a_date_time:
            s += "not-a-date-time value"; break;
        case date_time::neg_infin:
            s += "-infinity date value"; break;
        case date_time::pos_infin:
            s += "+infinity date value"; break;
        default:
            s += "a special date value"; break;
        }
        boost::throw_exception(std::out_of_range(s));
    }

    std::tm datetm;
    std::memset(&datetm, 0, sizeof(datetm));
    boost::gregorian::date::ymd_type ymd = d.year_month_day();
    datetm.tm_year = ymd.year - 1900;
    datetm.tm_mon = ymd.month - 1;
    datetm.tm_mday = ymd.day;
    datetm.tm_wday = d.day_of_week();
    datetm.tm_yday = d.day_of_year() - 1;
    datetm.tm_isdst = -1;
    return datetm;
  }


  inline
  date date_from_tm(const std::tm& datetm)
  {
    return date(static_cast<unsigned short>(datetm.tm_year+1900),
                static_cast<unsigned short>(datetm.tm_mon+1),
                static_cast<unsigned short>(datetm.tm_mday));
  }

} }
# 19 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/conversion.hpp" 2


namespace boost {

namespace posix_time {


  inline
  ptime from_time_t(std::time_t t)
  {
    return ptime(gregorian::date(1970,1,1)) + seconds(static_cast<long>(t));
  }


  inline
  std::time_t to_time_t(ptime pt)
  {
    return (pt - ptime(gregorian::date(1970,1,1))).total_seconds();
  }


  inline
  std::tm to_tm(const boost::posix_time::ptime& t) {
    std::tm timetm = boost::gregorian::to_tm(t.date());
    boost::posix_time::time_duration td = t.time_of_day();
    timetm.tm_hour = static_cast<int>(td.hours());
    timetm.tm_min = static_cast<int>(td.minutes());
    timetm.tm_sec = static_cast<int>(td.seconds());
    timetm.tm_isdst = -1;
    return timetm;
  }

  inline
  std::tm to_tm(const boost::posix_time::time_duration& td) {
    std::tm timetm;
    std::memset(&timetm, 0, sizeof(timetm));
    timetm.tm_hour = static_cast<int>(date_time::absolute_value(td.hours()));
    timetm.tm_min = static_cast<int>(date_time::absolute_value(td.minutes()));
    timetm.tm_sec = static_cast<int>(date_time::absolute_value(td.seconds()));
    timetm.tm_isdst = -1;
    return timetm;
  }


  inline
  ptime ptime_from_tm(const std::tm& timetm) {
    boost::gregorian::date d = boost::gregorian::date_from_tm(timetm);
    return ptime(d, time_duration(timetm.tm_hour, timetm.tm_min, timetm.tm_sec));
  }
# 85 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/conversion.hpp"
  template< typename TimeT, typename FileTimeT >
  inline
  TimeT from_ftime(const FileTimeT& ft)
  {
    return boost::date_time::time_from_ftime<TimeT>(ft);
  }



} }
# 16 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp" 2


namespace boost {

enum xtime_clock_types
{
    TIME_UTC_=1







};

struct xtime
{



    typedef int_fast64_t xtime_sec_t;


    typedef int_fast32_t xtime_nsec_t;

    xtime_sec_t sec;
    xtime_nsec_t nsec;

    operator system_time() const
    {
        return boost::posix_time::from_time_t(0)+
            boost::posix_time::seconds(static_cast<long>(sec))+



        boost::posix_time::microseconds((nsec+500)/1000);

    }

};

inline xtime get_xtime(boost::system_time const& abs_time)
{
    xtime res;
    boost::posix_time::time_duration const time_since_epoch=abs_time-boost::posix_time::from_time_t(0);

    res.sec=static_cast<xtime::xtime_sec_t>(time_since_epoch.total_seconds());
    res.nsec=static_cast<xtime::xtime_nsec_t>(time_since_epoch.fractional_seconds()*(1000000000/time_since_epoch.ticks_per_second()));
    return res;
}

inline int xtime_get(struct xtime* xtp, int clock_type)
{
    if (clock_type == TIME_UTC_)
    {
        *xtp=get_xtime(get_system_time());
        return clock_type;
    }
    return 0;
}


inline int xtime_cmp(const xtime& xt1, const xtime& xt2)
{
    if (xt1.sec == xt2.sec)
        return (int)(xt1.nsec - xt2.nsec);
    else
        return (xt1.sec > xt2.sec) ? 1 : -1;
}

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 91 "D:\\my_project\\boost_1_65_1\\boost/thread/xtime.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 1
# 61 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/chrono/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/predef.h" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/chrono/config.hpp" 2
# 212 "D:\\my_project\\boost_1_65_1\\boost/chrono/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/auto_link.hpp" 1
# 212 "D:\\my_project\\boost_1_65_1\\boost/chrono/config.hpp" 2
# 61 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 1
# 34 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/detail/static_assert.hpp" 1
# 34 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/logical.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/logical.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/use_preprocessed.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/nested_type_wknd.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/compiler.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/or.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/or.hpp"
namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct or_impl
    : true_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct or_impl< false,T1,T2,T3,T4 >
    : or_impl<
          T1::type::value
        , T2, T3, T4
        , false_
        >
{
};

template<>
struct or_impl<
          false
        , false_, false_, false_, false_
        >
    : false_
{
};

}

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = false_, typename T4 = false_, typename T5 = false_
    >
struct or_

    : aux::or_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct or_< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : or_< T1 , T2 > { }; }; template< typename Tag > struct lambda< or_< na , na > , Tag > { typedef false_ is_le; typedef or_< na , na > result_; typedef or_< na , na > type; };





}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/or.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/logical.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/and.hpp" 1
# 42 "D:\\my_project\\boost_1_65_1\\boost/mpl/and.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/and.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/and.hpp"
namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct and_impl
    : false_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct and_impl< true,T1,T2,T3,T4 >
    : and_impl<
          T1::type::value
        , T2, T3, T4
        , true_
        >
{
};

template<>
struct and_impl<
          true
        , true_, true_, true_, true_
        >
    : true_
{
};

}

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = true_, typename T4 = true_, typename T5 = true_
    >
struct and_

    : aux::and_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct and_< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : and_< T1 , T2 > { }; }; template< typename Tag > struct lambda< and_< na , na > , Tag > { typedef false_ is_le; typedef and_< na , na > result_; typedef and_< na , na > type; };





}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 42 "D:\\my_project\\boost_1_65_1\\boost/mpl/and.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/logical.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/not.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/not.hpp"
namespace boost { namespace mpl {

namespace aux {

template< long C_ >
struct not_impl
    : bool_<!C_>
{
};

}


template<
      typename T = na
    >
struct not_
    : aux::not_impl<
          T::type::value
        >
{

};

template<> struct not_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : not_< T1 > { }; }; template< typename Tag > struct lambda< not_< na > , Tag > { typedef false_ is_le; typedef not_< na > result_; typedef not_< na > type; };

}}
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/logical.hpp" 2
# 40 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/config.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/ratio/config.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/ratio/config.hpp" 2
# 35 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/abs.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/abs.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c_fwd.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c_fwd.hpp"
namespace mpl_ {





template< typename T, T N > struct integral_c;


}
namespace boost { namespace mpl { using ::mpl_::integral_c; } }
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c.hpp" 2
# 32 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< typename T, T N >
struct integral_c
{
    static const T value = N;





    typedef integral_c type;

    typedef T value_type;
    typedef integral_c_tag tag;
# 72 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c< T, static_cast<T>((value + 1)) > next;
    typedef integral_c< T, static_cast<T>((value - 1)) > prior;






                    operator T() const { return static_cast<T>(this->value); }
};


template< typename T, T N >
T const integral_c< T, N >::value;


}
# 32 "D:\\my_project\\boost_1_65_1\\boost/mpl/integral_c.hpp" 2





namespace mpl_ {

template< bool C >
struct integral_c<bool, C>
{
    static const bool value = C;
    typedef integral_c_tag tag;
    typedef integral_c type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/abs.hpp" 2
# 32 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/abs.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct abs_impl;

template< typename T > struct abs_tag
{
    typedef typename T::tag type;
};

template<
      typename N = na
    >
struct abs
    : abs_impl<
          typename abs_tag<N>::type
        >::template apply<N>::type
{

};

template<> struct abs< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : abs< T1 > { }; }; template< typename Tag > struct lambda< abs< na > , Tag > { typedef false_ is_le; typedef abs< na > result_; typedef abs< na > type; };

template<
      typename T
    , T n1
    >
struct abs_c
    : abs<integral_c<T,n1> >
{
};
# 73 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/abs.hpp"
template<>
struct abs_impl<integral_c_tag>
{




    template< typename N > struct apply
        : integral_c< typename N::value_type, ((N::value < 0) ? (-N::value) : N::value ) >

    {
    };
};

}}
# 36 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/sign.hpp" 1
# 32 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/sign.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct sign_impl;

template< typename T > struct sign_tag
{
    typedef typename T::tag type;
};

template<
      typename N = na
    >
struct sign
    : sign_impl<
          typename sign_tag<N>::type
        >::template apply<N>::type
{

};

template<> struct sign< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : sign< T1 > { }; }; template< typename Tag > struct lambda< sign< na > , Tag > { typedef false_ is_le; typedef sign< na > result_; typedef sign< na > type; };

template<
      typename T
    , T n1
    >
struct sign_c
    : sign<integral_c<T,n1> >
{
};
# 73 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/sign.hpp"
template<>
struct sign_impl<integral_c_tag>
{




    template< typename N > struct apply
        : integral_c< typename N::value_type, (N::value == 0 ? 0 : (N::value < 0 ? -1 : 1)) >

    {
    };
};

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/largest_int.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/largest_int.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename T > struct integral_rank;

template<> struct integral_rank<bool> : int_<1> {};
template<> struct integral_rank<signed char> : int_<2> {};
template<> struct integral_rank<char> : int_<3> {};
template<> struct integral_rank<unsigned char> : int_<4> {};

template<> struct integral_rank<wchar_t> : int_<5> {};

template<> struct integral_rank<short> : int_<6> {};
template<> struct integral_rank<unsigned short> : int_<7> {};
template<> struct integral_rank<int> : int_<8> {};
template<> struct integral_rank<unsigned int> : int_<9> {};
template<> struct integral_rank<long> : int_<10> {};
template<> struct integral_rank<unsigned long> : int_<11> {};


template<> struct integral_rank<long_long_type> : int_<12> {};
template<> struct integral_rank<ulong_long_type>: int_<13> {};


template< typename T1, typename T2 > struct largest_int

    : if_c<
          ( integral_rank<T1>::value >= integral_rank<T2>::value )
        , T1
        , T2
        >
{






};

}}}
# 17 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp" 2





# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/dependent_nttp.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp" 2
# 36 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp"
namespace boost { namespace mpl {

template< typename Tag1, typename Tag2 > struct gcd_impl;

template< typename T > struct gcd_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct gcd
    : gcd_impl<
          typename gcd_tag<N1>::type
        , typename gcd_tag<N2>::type
        >::template apply<N1, N2>::type
{

};

template<> struct gcd< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : gcd< T1 , T2 > { }; }; template< typename Tag > struct lambda< gcd< na , na > , Tag > { typedef false_ is_le; typedef gcd< na , na > result_; typedef gcd< na , na > type; };

template<
      typename T
    , T n1
    , T n2
    >
struct gcd_c
    : gcd<integral_c<T,n1>,integral_c<T,n2> >
{
};

namespace aux {
# 93 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/gcd.hpp"
    template< typename T1, T1 n1, bool n1_is_0, typename T2, T2 n2, bool n2_is_0 >
    struct gcd_aux

        : gcd_aux<T2, n2, n2==0,
                    typename aux::largest_int<T1, T2>::type,

                    (n1 % n2), (n1 % n2)==0>
    {};

    template <typename T1, T1 n1, typename T2, T2 n2>
    struct gcd_aux<T1, n1, false, T2, n2, true> : integral_c<T1, n1>
    {};

    template <typename T1, T1 n1, typename T2, T2 n2, bool C>
    struct gcd_aux<T1, n1, true, T2, n2, C> : integral_c<T2, n2>
    {};

}

template<>
struct gcd_impl<integral_c_tag, integral_c_tag>
{
    template< typename N1, typename N2 > struct apply
        : abs<aux::gcd_aux< typename N1::value_type, N1::value, N1::value==0,
                        typename N2::value_type, N2::value, N2::value==0 > >
    {
    };
};

}}
# 38 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/lcm.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/lcm.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/lcm.hpp" 2
# 36 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/lcm.hpp"
namespace boost { namespace mpl {

template< typename Tag1, typename Tag2 > struct lcm_impl;

template< typename T > struct lcm_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct lcm
    : lcm_impl<
          typename lcm_tag<N1>::type
        , typename lcm_tag<N2>::type
        >::template apply<N1, N2>::type
{

};

template<> struct lcm< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : lcm< T1 , T2 > { }; }; template< typename Tag > struct lambda< lcm< na , na > , Tag > { typedef false_ is_le; typedef lcm< na , na > result_; typedef lcm< na , na > type; };

template<
      typename T
    , T n1
    , T n2
    >
struct lcm_c
    : lcm<integral_c<T,n1>,integral_c<T,n2> >
{
};


namespace aux {
# 96 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/mpl/lcm.hpp"
    template< typename T1, T1 n1, bool n1_is_0, typename T2, T2 n2, bool n2_is_0 >
    struct lcm_aux

        : abs<integral_c< typename aux::largest_int<T1, T2>::type,
            ( n1 / gcd<integral_c<T1,n1>, integral_c<T2,n2> >::value * n2 )
        > >
    {};

    template <typename T1, T1 n1, typename T2, T2 n2>
    struct lcm_aux<T1, n1, false, T2, n2, true> : integral_c<T2, 0>
    {};

    template <typename T1, T1 n1, typename T2, T2 n2, bool C>
    struct lcm_aux<T1, n1, true, T2, n2, C> : integral_c<T1, 0>
    {};

}

template<>
struct lcm_impl<integral_c_tag, integral_c_tag>
{
    template< typename N1, typename N2 > struct apply
        : abs<aux::lcm_aux< typename N1::value_type, N1::value, N1::value==0,
                        typename N2::value_type, N2::value, N2::value==0 > >
    {
    };
};

}}
# 39 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 43 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/integer_traits.hpp" 1
# 42 "D:\\my_project\\boost_1_65_1\\boost/integer_traits.hpp"
namespace boost {
template<class T>
class integer_traits : public std::numeric_limits<T>
{
public:
  static const bool is_integral = false;
};

namespace detail {
template<class T, T min_val, T max_val>
class integer_traits_base
{
public:
  static const bool is_integral = true;
  static const T const_min = min_val;
  static const T const_max = max_val;
};



template<class T, T min_val, T max_val>
const bool integer_traits_base<T, min_val, max_val>::is_integral;

template<class T, T min_val, T max_val>
const T integer_traits_base<T, min_val, max_val>::const_min;

template<class T, T min_val, T max_val>
const T integer_traits_base<T, min_val, max_val>::const_max;


}

template<>
class integer_traits<bool>
  : public std::numeric_limits<bool>,
    public detail::integer_traits_base<bool, false, true>
{ };

template<>
class integer_traits<char>
  : public std::numeric_limits<char>,
    public detail::integer_traits_base<char, (-128), 127>
{ };

template<>
class integer_traits<signed char>
  : public std::numeric_limits<signed char>,
    public detail::integer_traits_base<signed char, (-128), 127>
{ };

template<>
class integer_traits<unsigned char>
  : public std::numeric_limits<unsigned char>,
    public detail::integer_traits_base<unsigned char, 0, 0xff>
{ };


template<>
class integer_traits<wchar_t>
  : public std::numeric_limits<wchar_t>,



    public detail::integer_traits_base<wchar_t, 0x0000, 0xffff>
# 125 "D:\\my_project\\boost_1_65_1\\boost/integer_traits.hpp"
{ };


template<>
class integer_traits<short>
  : public std::numeric_limits<short>,
    public detail::integer_traits_base<short, (-32768), 32767>
{ };

template<>
class integer_traits<unsigned short>
  : public std::numeric_limits<unsigned short>,
    public detail::integer_traits_base<unsigned short, 0, 0xffff>
{ };

template<>
class integer_traits<int>
  : public std::numeric_limits<int>,
    public detail::integer_traits_base<int, (-2147483647 - 1), 2147483647>
{ };

template<>
class integer_traits<unsigned int>
  : public std::numeric_limits<unsigned int>,
    public detail::integer_traits_base<unsigned int, 0, 0xffffffff>
{ };

template<>
class integer_traits<long>
  : public std::numeric_limits<long>,
    public detail::integer_traits_base<long, (-2147483647L - 1), 2147483647L>
{ };

template<>
class integer_traits<unsigned long>
  : public std::numeric_limits<unsigned long>,
    public detail::integer_traits_base<unsigned long, 0, 0xffffffffUL>
{ };




template<>
class integer_traits< ::boost::long_long_type>
  : public std::numeric_limits< ::boost::long_long_type>,
    public detail::integer_traits_base< ::boost::long_long_type, (-9223372036854775807i64 - 1), 9223372036854775807i64>
{ };

template<>
class integer_traits< ::boost::ulong_long_type>
  : public std::numeric_limits< ::boost::ulong_long_type>,
    public detail::integer_traits_base< ::boost::ulong_long_type, 0, 0xffffffffffffffffui64>
{ };
# 251 "D:\\my_project\\boost_1_65_1\\boost/integer_traits.hpp"
}
# 46 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio_fwd.hpp" 1
# 41 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio_fwd.hpp"
namespace boost
{
# 51 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio_fwd.hpp"
template <boost::intmax_t N, boost::intmax_t D = 1> class ratio;


template <class R1, class R2> struct ratio_add;
template <class R1, class R2> struct ratio_subtract;
template <class R1, class R2> struct ratio_multiply;
template <class R1, class R2> struct ratio_divide;
# 68 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio_fwd.hpp"
template <class R1, class R2> struct ratio_equal;
template <class R1, class R2> struct ratio_not_equal;
template <class R1, class R2> struct ratio_less;
template <class R1, class R2> struct ratio_less_equal;
template <class R1, class R2> struct ratio_greater;
template <class R1, class R2> struct ratio_greater_equal;


typedef ratio<(1LL), (1000000000000000000LL)> atto;
typedef ratio<(1LL), (1000000000000000LL)> femto;
typedef ratio<(1LL), (1000000000000LL)> pico;
typedef ratio<(1LL), (1000000000LL)> nano;
typedef ratio<(1LL), (1000000LL)> micro;
typedef ratio<(1LL), (1000LL)> milli;
typedef ratio<(1LL), (100LL)> centi;
typedef ratio<(1LL), (10LL)> deci;
typedef ratio< (10LL), (1LL)> deca;
typedef ratio< (100LL), (1LL)> hecto;
typedef ratio< (1000LL), (1LL)> kilo;
typedef ratio< (1000000LL), (1LL)> mega;
typedef ratio< (1000000000LL), (1LL)> giga;
typedef ratio< (1000000000000LL), (1LL)> tera;
typedef ratio< (1000000000000000LL), (1LL)> peta;
typedef ratio<(1000000000000000000LL), (1LL)> exa;
# 106 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio_fwd.hpp"
}
# 47 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/overflow_helpers.hpp" 1
# 41 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/overflow_helpers.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 41 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/overflow_helpers.hpp" 2
# 58 "D:\\my_project\\boost_1_65_1\\boost/ratio/detail/overflow_helpers.hpp"
namespace boost
{





namespace ratio_detail
{

  template <boost::intmax_t X, boost::intmax_t Y, boost::intmax_t = mpl::sign_c<boost::intmax_t, Y>::value>
  class br_add;

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_add<X, Y, 1>
  {
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static char __boost_ratio_test_77[(X <= max - Y)?1:-1];
  public:
      static const boost::intmax_t value = X + Y;
  };

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_add<X, Y, 0>
  {
  public:
      static const boost::intmax_t value = X;
  };

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_add<X, Y, -1>
  {
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static char __boost_ratio_test_95[(min - Y <= X)?1:-1];
  public:
      static const boost::intmax_t value = X + Y;
  };

  template <boost::intmax_t X, boost::intmax_t Y, boost::intmax_t = mpl::sign_c<boost::intmax_t, Y>::value>
  class br_sub;

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_sub<X, Y, 1>
  {
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static char __boost_ratio_test_109[(min + Y <= X)?1:-1];
  public:
      static const boost::intmax_t value = X - Y;
  };

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_sub<X, Y, 0>
  {
  public:
      static const boost::intmax_t value = X;
  };

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_sub<X, Y, -1>
  {
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static char __boost_ratio_test_127[(X <= max + Y)?1:-1];
  public:
      static const boost::intmax_t value = X - Y;
  };

  template <boost::intmax_t X, boost::intmax_t Y>
  class br_mul
  {
      static const boost::intmax_t nan =
          boost::intmax_t((1ULL) << (sizeof(boost::intmax_t) * 8 - 1));
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static const boost::intmax_t a_x = mpl::abs_c<boost::intmax_t, X>::value;
      static const boost::intmax_t a_y = mpl::abs_c<boost::intmax_t, Y>::value;

      static char __boost_ratio_test_143[(X != nan)?1:-1];
      static char __boost_ratio_test_144[(Y != nan)?1:-1];
      static char __boost_ratio_test_145[(a_x <= max / a_y)?1:-1];
  public:
      static const boost::intmax_t value = X * Y;
  };

  template <boost::intmax_t Y>
  class br_mul<0, Y>
  {
  public:
      static const boost::intmax_t value = 0;
  };

  template <boost::intmax_t X>
  class br_mul<X, 0>
  {
  public:
      static const boost::intmax_t value = 0;
  };

  template <>
  class br_mul<0, 0>
  {
  public:
      static const boost::intmax_t value = 0;
  };


  template <boost::intmax_t X, boost::intmax_t Y>
  class br_div
  {
      static const boost::intmax_t nan = boost::intmax_t((1ULL) << (sizeof(boost::intmax_t) * 8 - 1));
      static const boost::intmax_t min = boost::integer_traits<boost::intmax_t>::const_min;
      static const boost::intmax_t max = boost::integer_traits<boost::intmax_t>::const_max;

      static char __boost_ratio_test_179[(X != nan)?1:-1];
      static char __boost_ratio_test_180[(Y != nan)?1:-1];
      static char __boost_ratio_test_181[(Y != 0)?1:-1];
  public:
      static const boost::intmax_t value = X / Y;
  };


  template <class R1, class R2> struct ratio_add;
  template <class R1, class R2> struct ratio_subtract;
  template <class R1, class R2> struct ratio_multiply;
  template <class R1, class R2> struct ratio_divide;

  template <class R1, class R2>
  struct ratio_add
  {



  private:
      static const boost::intmax_t gcd_n1_n2 = mpl::gcd_c<boost::intmax_t, R1::num, R2::num>::value;
      static const boost::intmax_t gcd_d1_d2 = mpl::gcd_c<boost::intmax_t, R1::den, R2::den>::value;
  public:

      typedef typename ratio_multiply
         <
             ratio<gcd_n1_n2, R1::den / gcd_d1_d2>,
             ratio
             <
                 boost::ratio_detail::br_add
                 <
                     boost::ratio_detail::br_mul<R1::num / gcd_n1_n2, R2::den / gcd_d1_d2>::value,
                     boost::ratio_detail::br_mul<R2::num / gcd_n1_n2, R1::den / gcd_d1_d2>::value
                 >::value,
                 R2::den
             >
         >::type type;
  };
  template <class R, boost::intmax_t D>
  struct ratio_add<R, ratio<0,D> >
  {
    typedef R type;
  };

  template <class R1, class R2>
  struct ratio_subtract
  {



  private:
      static const boost::intmax_t gcd_n1_n2 = mpl::gcd_c<boost::intmax_t, R1::num, R2::num>::value;
      static const boost::intmax_t gcd_d1_d2 = mpl::gcd_c<boost::intmax_t, R1::den, R2::den>::value;
  public:

      typedef typename ratio_multiply
         <
             ratio<gcd_n1_n2, R1::den / gcd_d1_d2>,
             ratio
             <
                 boost::ratio_detail::br_sub
                 <
                     boost::ratio_detail::br_mul<R1::num / gcd_n1_n2, R2::den / gcd_d1_d2>::value,
                     boost::ratio_detail::br_mul<R2::num / gcd_n1_n2, R1::den / gcd_d1_d2>::value
                 >::value,
                 R2::den
             >
         >::type type;
  };

  template <class R, boost::intmax_t D>
  struct ratio_subtract<R, ratio<0,D> >
  {
    typedef R type;
  };

  template <class R1, class R2>
  struct ratio_multiply
  {


  private:
     static const boost::intmax_t gcd_n1_d2 = mpl::gcd_c<boost::intmax_t, R1::num, R2::den>::value;
     static const boost::intmax_t gcd_d1_n2 = mpl::gcd_c<boost::intmax_t, R1::den, R2::num>::value;
  public:
      typedef typename ratio
         <
             boost::ratio_detail::br_mul<R1::num / gcd_n1_d2, R2::num / gcd_d1_n2>::value,
             boost::ratio_detail::br_mul<R2::den / gcd_n1_d2, R1::den / gcd_d1_n2>::value
         >::type type;
  };

  template <class R1, class R2>
  struct ratio_divide
  {


  private:
      static const boost::intmax_t gcd_n1_n2 = mpl::gcd_c<boost::intmax_t, R1::num, R2::num>::value;
      static const boost::intmax_t gcd_d1_d2 = mpl::gcd_c<boost::intmax_t, R1::den, R2::den>::value;
  public:
      typedef typename ratio
         <
             boost::ratio_detail::br_mul<R1::num / gcd_n1_n2, R2::den / gcd_d1_d2>::value,
             boost::ratio_detail::br_mul<R2::num / gcd_n1_n2, R1::den / gcd_d1_d2>::value
         >::type type;
  };
  template <class R1, class R2>
  struct is_evenly_divisible_by
  {
  private:
      static const boost::intmax_t gcd_n1_n2 = mpl::gcd_c<boost::intmax_t, R1::num, R2::num>::value;
      static const boost::intmax_t gcd_d1_d2 = mpl::gcd_c<boost::intmax_t, R1::den, R2::den>::value;
  public:
      typedef integral_constant<bool,
             ((R2::num / gcd_n1_n2 ==1) && (R1::den / gcd_d1_d2)==1)
      > type;
  };

  template <class T>
  struct is_ratio : public boost::false_type
  {};
  template <boost::intmax_t N, boost::intmax_t D>
  struct is_ratio<ratio<N, D> > : public boost::true_type
  {};

  template <class R1, class R2,
            boost::intmax_t Q1 = R1::num / R1::den, boost::intmax_t M1 = R1::num % R1::den,
            boost::intmax_t Q2 = R2::num / R2::den, boost::intmax_t M2 = R2::num % R2::den>
  struct ratio_less1
  {
    static const bool value = Q1 < Q2;
  };

  template <class R1, class R2, boost::intmax_t Q>
  struct ratio_less1<R1, R2, Q, 0, Q, 0>
  {
    static const bool value = false;
  };

  template <class R1, class R2, boost::intmax_t Q, boost::intmax_t M2>
  struct ratio_less1<R1, R2, Q, 0, Q, M2>
  {
    static const bool value = true;
  };

  template <class R1, class R2, boost::intmax_t Q, boost::intmax_t M1>
  struct ratio_less1<R1, R2, Q, M1, Q, 0>
  {
    static const bool value = false;
  };

  template <class R1, class R2, boost::intmax_t Q, boost::intmax_t M1, boost::intmax_t M2>
  struct ratio_less1<R1, R2, Q, M1, Q, M2>
  {
    static const bool value = ratio_less1<ratio<R2::den, M2>, ratio<R1::den, M1>
                                            >::value;
  };

  template <
      class R1,
      class R2,
      boost::intmax_t S1 = mpl::sign_c<boost::intmax_t, R1::num>::value,
    boost::intmax_t S2 = mpl::sign_c<boost::intmax_t, R2::num>::value
>
  struct ratio_less
  {
      static const bool value = S1 < S2;
  };

  template <class R1, class R2>
  struct ratio_less<R1, R2, 1LL, 1LL>
  {
      static const bool value = ratio_less1<R1, R2>::value;
  };

  template <class R1, class R2>
  struct ratio_less<R1, R2, -1LL, -1LL>
  {
      static const bool value = ratio_less1<ratio<-R2::num, R2::den>,
                                            ratio<-R1::num, R1::den> >::value;
  };


}

}
# 48 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp" 2
# 66 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
namespace boost
{
# 76 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
template <boost::intmax_t N, boost::intmax_t D>
class ratio
{
    static const boost::intmax_t ABS_N = mpl::abs_c<boost::intmax_t, N>::value;
    static const boost::intmax_t ABS_D = mpl::abs_c<boost::intmax_t, D>::value;
    static char __boost_ratio_test_81[(ABS_N >= 0)?1:-1];
    static char __boost_ratio_test_82[(ABS_D > 0)?1:-1];
    static char __boost_ratio_test_83[(D != 0)?1:-1];
    static const boost::intmax_t SIGN_N = mpl::sign_c<boost::intmax_t,N>::value
      * mpl::sign_c<boost::intmax_t,D>::value;
    static const boost::intmax_t GCD = mpl::gcd_c<boost::intmax_t, ABS_N, ABS_D>::value;
public:
    static const boost::intmax_t num = SIGN_N * ABS_N / GCD;
    static const boost::intmax_t den = ABS_D / GCD;
# 119 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
    typedef ratio<num, den> type;
};


template <boost::intmax_t N, boost::intmax_t D>
const boost::intmax_t ratio<N, D>::num;
template <boost::intmax_t N, boost::intmax_t D>
const boost::intmax_t ratio<N, D>::den;
# 135 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
template <class R1, class R2>
struct ratio_add
: boost::ratio_detail::ratio_add<R1, R2>::type
{
};

template <class R1, class R2>
struct ratio_subtract
: boost::ratio_detail::ratio_subtract<R1, R2>::type
{
};

template <class R1, class R2>
struct ratio_multiply
: boost::ratio_detail::ratio_multiply<R1, R2>::type
{
};

template <class R1, class R2>
struct ratio_divide
: boost::ratio_detail::ratio_divide<R1, R2>::type
{
};
# 167 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
template <class R1, class R2>
struct ratio_equal
    : public boost::integral_constant<bool,
                               (R1::num == R2::num && R1::den == R2::den)>
{};

template <class R1, class R2>
struct ratio_not_equal
    : public boost::integral_constant<bool, !ratio_equal<R1, R2>::value>
{};



template <class R1, class R2>
struct ratio_less
    : boost::integral_constant<bool, boost::ratio_detail::ratio_less<R1, R2>::value>
{};

template <class R1, class R2>
struct ratio_less_equal
    : boost::integral_constant<bool, !ratio_less<R2, R1>::value>
{};

template <class R1, class R2>
struct ratio_greater
    : boost::integral_constant<bool, ratio_less<R2, R1>::value>
{};

template <class R1, class R2>
struct ratio_greater_equal
    : boost::integral_constant<bool, !ratio_less<R1, R2>::value>
{};

template <class R1, class R2>
struct ratio_gcd :
    ratio<mpl::gcd_c<boost::intmax_t, R1::num, R2::num>::value,
        mpl::lcm_c<boost::intmax_t, R1::den, R2::den>::value>::type
{
};
# 290 "D:\\my_project\\boost_1_65_1\\boost/ratio/ratio.hpp"
}
# 41 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/decay.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/decay.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_bounds.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_bounds.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_extent.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_extent.hpp"
namespace boost {

template <class T> struct remove_extent{ typedef T type; };


template <typename T, std::size_t N> struct remove_extent<T[N]> { typedef T type; };
template <typename T, std::size_t N> struct remove_extent<T const[N]> { typedef T const type; };
template <typename T, std::size_t N> struct remove_extent<T volatile [N]> { typedef T volatile type; };
template <typename T, std::size_t N> struct remove_extent<T const volatile [N]> { typedef T const volatile type; };

template <typename T> struct remove_extent<T[]> { typedef T type; };
template <typename T> struct remove_extent<T const[]> { typedef T const type; };
template <typename T> struct remove_extent<T volatile[]> { typedef T volatile type; };
template <typename T> struct remove_extent<T const volatile[]> { typedef T const volatile type; };
# 39 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_extent.hpp"
}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_bounds.hpp" 2


namespace boost
{

template <class T> struct remove_bounds : public remove_extent<T> {};
# 26 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_bounds.hpp"
}
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/decay.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_pointer.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_pointer.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_reference.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_reference.hpp"
namespace boost {


namespace detail{




template <class T>
struct remove_rvalue_ref
{
   typedef T type;
};
# 36 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_reference.hpp"
}

template <class T> struct remove_reference{ typedef typename boost::detail::remove_rvalue_ref<T>::type type; };
template <class T> struct remove_reference<T&>{ typedef T type; };
# 57 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_reference.hpp"
}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_pointer.hpp" 2


namespace boost {
# 50 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_pointer.hpp"
template <typename T>
struct add_pointer
{
    typedef typename remove_reference<T>::type no_ref_type;
    typedef no_ref_type* type;
};
# 65 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_pointer.hpp"
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/decay.hpp" 2




namespace boost
{

   namespace detail
   {

      template <class T, bool Array, bool Function> struct decay_imp { typedef typename remove_cv<T>::type type; };
      template <class T> struct decay_imp<T, true, false> { typedef typename remove_bounds<T>::type* type; };
      template <class T> struct decay_imp<T, false, true> { typedef T* type; };

   }

    template< class T >
    struct decay
    {
    private:
        typedef typename remove_reference<T>::type Ty;
    public:
       typedef typename boost::detail::decay_imp<Ty, boost::is_array<Ty>::value, boost::is_function<Ty>::value>::type type;
    };







}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/declval.hpp" 1
# 37 "D:\\my_project\\boost_1_65_1\\boost/type_traits/declval.hpp"
namespace boost {

    template <typename T>
    typename add_rvalue_reference<T>::type declval() ;

}
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_arithmetic_type.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_arithmetic_type.hpp"
namespace boost
{

namespace type_traits_detail
{

template<int I> struct arithmetic_type;





template<> struct arithmetic_type<1>
{
    typedef bool type;
    typedef char (&result_type) [1];
};

template<> struct arithmetic_type<2>
{
    typedef char type;
    typedef char (&result_type) [2];
};



template<> struct arithmetic_type<3>
{
    typedef wchar_t type;
    typedef char (&result_type) [3];
};






template<> struct arithmetic_type<4>
{
    typedef signed char type;
    typedef char (&result_type) [4];
};

template<> struct arithmetic_type<5>
{
    typedef short type;
    typedef char (&result_type) [5];
};

template<> struct arithmetic_type<6>
{
    typedef int type;
    typedef char (&result_type) [6];
};

template<> struct arithmetic_type<7>
{
    typedef long type;
    typedef char (&result_type) [7];
};

template<> struct arithmetic_type<8>
{
    typedef boost::long_long_type type;
    typedef char (&result_type) [8];
};





template<> struct arithmetic_type<9>
{
    typedef unsigned char type;
    typedef char (&result_type) [9];
};

template<> struct arithmetic_type<10>
{
    typedef unsigned short type;
    typedef char (&result_type) [10];
};

template<> struct arithmetic_type<11>
{
    typedef unsigned int type;
    typedef char (&result_type) [11];
};

template<> struct arithmetic_type<12>
{
    typedef unsigned long type;
    typedef char (&result_type) [12];
};

template<> struct arithmetic_type<13>
{
    typedef boost::ulong_long_type type;
    typedef char (&result_type) [13];
};



template<> struct arithmetic_type<14>
{
    typedef float type;
    typedef char (&result_type) [14];
};

template<> struct arithmetic_type<15>
{
    typedef double type;
    typedef char (&result_type) [15];
};

template<> struct arithmetic_type<16>
{
    typedef long double type;
    typedef char (&result_type) [16];
};
# 171 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_arithmetic_type.hpp"
template<class T, class U> class common_arithmetic_type
{
private:

    static arithmetic_type<1>::result_type select( arithmetic_type<1>::type );
    static arithmetic_type<2>::result_type select( arithmetic_type<2>::type );

    static arithmetic_type<3>::result_type select( arithmetic_type<3>::type );

    static arithmetic_type<4>::result_type select( arithmetic_type<4>::type );
    static arithmetic_type<5>::result_type select( arithmetic_type<5>::type );
    static arithmetic_type<6>::result_type select( arithmetic_type<6>::type );
    static arithmetic_type<7>::result_type select( arithmetic_type<7>::type );
    static arithmetic_type<8>::result_type select( arithmetic_type<8>::type );
    static arithmetic_type<9>::result_type select( arithmetic_type<9>::type );
    static arithmetic_type<10>::result_type select( arithmetic_type<10>::type );
    static arithmetic_type<11>::result_type select( arithmetic_type<11>::type );
    static arithmetic_type<12>::result_type select( arithmetic_type<12>::type );
    static arithmetic_type<13>::result_type select( arithmetic_type<13>::type );
    static arithmetic_type<14>::result_type select( arithmetic_type<14>::type );
    static arithmetic_type<15>::result_type select( arithmetic_type<15>::type );
    static arithmetic_type<16>::result_type select( arithmetic_type<16>::type );
# 207 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_arithmetic_type.hpp"
    static bool cond();

public:

    typedef typename arithmetic_type< sizeof(select( cond()? T(): U() )) >::type type;
};

}

}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_pointer_type.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_pointer_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_const.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_const.hpp"
namespace boost {
# 36 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_const.hpp"
   template <class T>
   struct is_const : public false_type {};
   template <class T> struct is_const<T const> : public true_type{};
   template <class T, std::size_t N> struct is_const<T const[N]> : public true_type{};
   template <class T> struct is_const<T const[]> : public true_type{};



}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_volatile.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_volatile.hpp"
namespace boost {
# 36 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_volatile.hpp"
   template <class T>
   struct is_volatile : public false_type {};
   template <class T> struct is_volatile<T volatile> : public true_type{};
   template <class T, std::size_t N> struct is_volatile<T volatile[N]> : public true_type{};
   template <class T> struct is_volatile<T volatile[]> : public true_type{};



}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_const.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_const.hpp"
namespace boost {
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_const.hpp"
   template <class T> struct add_const
   {
      typedef T const type;
   };





   template <class T> struct add_const<T&>
   {
      typedef T& type;
   };







}
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_volatile.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_volatile.hpp"
namespace boost {
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/add_volatile.hpp"
template <class T> struct add_volatile{ typedef T volatile type; };





template <class T> struct add_volatile<T&>{ typedef T& type; };







}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/conditional.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/conditional.hpp"
namespace boost {

template <bool b, class T, class U> struct conditional { typedef T type; };
template <class T, class U> struct conditional<false, T, U> { typedef U type; };







}
# 16 "D:\\my_project\\boost_1_65_1\\boost/type_traits/copy_cv.hpp" 2


namespace boost
{

template<class T, class U> struct copy_cv
{
private:

    typedef typename boost::conditional<boost::is_const<U>::value, typename boost::add_const<T>::type, T>::type CT;

public:

    typedef typename boost::conditional<boost::is_volatile<U>::value, typename boost::add_volatile<CT>::type, CT>::type type;
};







}
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_pointer_type.hpp" 2








namespace boost
{

namespace type_traits_detail
{

template<class T, class U> struct composite_pointer_type;



template<class T> struct composite_pointer_type<T*, T*>
{
    typedef T* type;
};
# 77 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_pointer_type.hpp"
namespace detail
{

template<class T, class U> struct has_common_pointee
{
private:

    typedef typename boost::remove_cv<T>::type T2;
    typedef typename boost::remove_cv<U>::type U2;

public:

    static const bool value = (boost::is_same<T2, U2>::value) || boost::is_void<T2>::value || boost::is_void<U2>::value || (boost::is_base_of<T2, U2>::value) || (boost::is_base_of<U2, T2>::value);





};

template<class T, class U> struct common_pointee
{
private:

    typedef typename boost::remove_cv<T>::type T2;
    typedef typename boost::remove_cv<U>::type U2;

public:

    typedef typename boost::conditional<

        boost::is_same<T2, U2>::value || boost::is_void<T2>::value || boost::is_base_of<T2, U2>::value,
        typename boost::copy_cv<T, U>::type,
        typename boost::copy_cv<U, T>::type

    >::type type;
};

template<class T, class U> struct composite_pointer_impl
{
private:

    typedef typename boost::remove_cv<T>::type T2;
    typedef typename boost::remove_cv<U>::type U2;

public:

    typedef typename boost::copy_cv<typename boost::copy_cv<typename composite_pointer_type<T2, U2>::type const, T>::type, U>::type type;
};




template<class T, class U, bool = has_common_pointee<T, U>::value >
struct composite_pointer_type_dispatch
   : common_pointee<T, U>
{};

template<class T, class U>
struct composite_pointer_type_dispatch<T, U, false>
   : composite_pointer_impl<T, U>
{};


}


template<class T, class U> struct composite_pointer_type<T*, U*>
{
    typedef typename detail::composite_pointer_type_dispatch<T, U>::type* type;
};

}

}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_member_pointer_type.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_member_pointer_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_pointer.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_pointer.hpp"
namespace boost {
# 67 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_pointer.hpp"
template <class T> struct remove_pointer{ typedef T type; };
template <class T> struct remove_pointer<T*>{ typedef T type; };
template <class T> struct remove_pointer<T*const>{ typedef T type; };
template <class T> struct remove_pointer<T*volatile>{ typedef T type; };
template <class T> struct remove_pointer<T*const volatile>{ typedef T type; };
# 81 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_pointer.hpp"
}
# 13 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_member_pointer_type.hpp" 2






namespace boost
{

namespace type_traits_detail
{

template<class T, class U> struct composite_member_pointer_type;
# 69 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/composite_member_pointer_type.hpp"
template<class C1, class C2> struct common_member_class;

template<class C> struct common_member_class<C, C>
{
    typedef C type;
};

template<class C1, class C2> struct common_member_class
{
    typedef typename boost::conditional<

        boost::is_base_of<C1, C2>::value,
        C2,
        typename boost::conditional<boost::is_base_of<C2, C1>::value, C1, void>::type

    >::type type;
};



template<class CT, class CB>
struct common_member_class_pointer_to_member
{
    typedef CT CB::* type;
};

template<class C1, class T1, class C2, class T2> struct composite_member_pointer_type<T1 C1::*, T2 C2::*>
{
private:

    typedef typename composite_pointer_type<T1*, T2*>::type CPT;
    typedef typename boost::remove_pointer<CPT>::type CT;

    typedef typename common_member_class<C1, C2>::type CB;

public:

    typedef typename common_member_class_pointer_to_member<CT, CB>::type type;
};

}

}
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/type_identity.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/type_traits/type_identity.hpp"
namespace boost
{

template<class T> struct type_identity
{
    typedef T type;
};
# 27 "D:\\my_project\\boost_1_65_1\\boost/type_traits/type_identity.hpp"
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pointer.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pointer.hpp"
namespace boost {




template <class T> struct is_pointer : public false_type{};
template <class T> struct is_pointer<T*> : public true_type{};
template <class T> struct is_pointer<T*const> : public true_type{};
template <class T> struct is_pointer<T*const volatile> : public true_type{};
template <class T> struct is_pointer<T*volatile> : public true_type{};
# 45 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pointer.hpp"
}
# 19 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_pointer.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_pointer.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_function_pointer.hpp" 1
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_function_pointer.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp" 1
# 36 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
namespace boost {
namespace type_traits {

no_type is_mem_fun_pointer_tester(...);





template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const volatile);



template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const volatile);



template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const volatile);



template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const volatile);



template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);
# 1719 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
}
}
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_function_pointer.hpp" 2



namespace boost {
# 44 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_function_pointer.hpp"
namespace detail {



template <bool>
struct is_mem_fun_pointer_select
{
   template <class T> struct result_ : public false_type{};
};

template <>
struct is_mem_fun_pointer_select<false>
{
    template <typename T> struct result_
    {




        static T* make_t;
        typedef result_<T> self_type;

        static const bool value = ( 1 == sizeof(::boost::type_traits::is_mem_fun_pointer_tester(self_type::make_t)) );






    };
};

template <typename T>
struct is_member_function_pointer_impl
    : public is_mem_fun_pointer_select<
      ::boost::is_reference<T>::value || ::boost::is_array<T>::value>::template result_<T>{};

template <typename T>
struct is_member_function_pointer_impl<T&> : public false_type{};
# 103 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_function_pointer.hpp"
template<> struct is_member_function_pointer_impl<void> : public false_type{};

template<> struct is_member_function_pointer_impl<void const> : public false_type{};
template<> struct is_member_function_pointer_impl<void const volatile> : public false_type{};
template<> struct is_member_function_pointer_impl<void volatile> : public false_type{};


}

template <class T>
struct is_member_function_pointer
   : public integral_constant<bool, ::boost::detail::is_member_function_pointer_impl<T>::value>{};



}
# 25 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_member_pointer.hpp" 2


namespace boost {




template <class T> struct is_member_pointer : public integral_constant<bool, ::boost::is_member_function_pointer<T>::value>{};
template <class T, class U> struct is_member_pointer<U T::* > : public true_type{};


template <class T, class U> struct is_member_pointer<U T::*const> : public true_type{};
template <class T, class U> struct is_member_pointer<U T::*const volatile> : public true_type{};
template <class T, class U> struct is_member_pointer<U T::*volatile> : public true_type{};




}
# 20 "D:\\my_project\\boost_1_65_1\\boost/type_traits/detail/common_type_impl.hpp" 2



namespace boost
{

namespace type_traits_detail
{



template<class T, class U> struct common_type_impl;



template<class T> struct common_type_impl<T, T>
{
    typedef T type;
};



template<class T, class U> struct ct_class
{
    static const bool ct = boost::is_class<T>::value || boost::is_union<T>::value;
    static const bool cu = boost::is_class<U>::value || boost::is_union<U>::value;

    static const bool value = ct || cu;
};

template<class T, class U> struct common_type_impl3;

template<class T, class U> struct common_type_class: public boost::conditional<

    boost::is_convertible<T, U>::value && !boost::is_convertible<U, T>::value,
    boost::type_identity<U>,

    typename boost::conditional<

        boost::is_convertible<U, T>::value && !boost::is_convertible<T, U>::value,
        boost::type_identity<T>,

        common_type_impl3<T, U>
    >::type
>::type
{
};

template<class T, class U> struct common_type_impl: public boost::conditional<
    ct_class<T, U>::value,
    common_type_class<T, U>,
    common_type_impl3<T, U> >::type
{
};



template<class T, class U> struct common_type_impl4;

template<class T, class U> struct common_type_impl3: public boost::conditional<
    boost::is_pointer<T>::value || boost::is_pointer<U>::value,
    composite_pointer_type<T, U>,
    common_type_impl4<T, U> >::type
{
};



template<class T, class U> struct common_type_impl5;

template<class T, class U> struct common_type_impl4: public boost::conditional<
    boost::is_member_pointer<T>::value || boost::is_member_pointer<U>::value,
    composite_member_pointer_type<T, U>,
    common_type_impl5<T, U> >::type
{
};



template<class T, class U> struct common_type_impl5: public common_arithmetic_type<T, U>
{
};

}

}
# 18 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp" 2







namespace boost
{
# 63 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp"
template<
    class T1 = void, class T2 = void, class T3 = void,
    class T4 = void, class T5 = void, class T6 = void,
    class T7 = void, class T8 = void, class T9 = void
>
struct common_type: common_type<typename common_type<T1, T2>::type, T3, T4, T5, T6, T7, T8, T9>
{
};





template<class T> struct common_type<T>: boost::decay<T>
{
};



namespace type_traits_detail
{
# 129 "D:\\my_project\\boost_1_65_1\\boost/type_traits/common_type.hpp"
template<class T1, class T2, class T1d = typename boost::decay<T1>::type, class T2d = typename boost::decay<T2>::type> struct common_type_decay_helper: boost::common_type<T1d, T2d>
{
};

template<class T1, class T2> struct common_type_decay_helper<T1, T2, T1, T2>: common_type_impl<T1, T2>
{
};

}

template<class T1, class T2> struct common_type<T1, T2>: type_traits_detail::common_type_decay_helper<T1, T2>
{
};

}
# 42 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_unsigned.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_unsigned.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp" 1
# 32 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp"
namespace boost {




namespace detail {



template <typename T>
struct is_class_or_union
{
   static const bool value = ::boost::is_class<T>::value || ::boost::is_union<T>::value;
};
# 71 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp"
struct int_convertible
{
    int_convertible(int);
};



template <bool is_typename_arithmetic_or_reference = true>
struct is_enum_helper
{
    template <typename T> struct type
    {
        static const bool value = false;
    };
};

template <>
struct is_enum_helper<false>
{
    template <typename T> struct type
    {
       static const bool value = ::boost::is_convertible<typename boost::add_reference<T>::type, ::boost::detail::int_convertible>::value;
    };
};

template <typename T> struct is_enum_impl
{
# 126 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp"
   static const bool selector = ::boost::is_arithmetic<T>::value || ::boost::is_reference<T>::value || is_class_or_union<T>::value || is_array<T>::value;
# 139 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp"
    typedef ::boost::detail::is_enum_helper<selector> se_t;


    typedef typename se_t::template type<T> helper;
    static const bool value = helper::value;
};

}

template <class T> struct is_enum : public integral_constant<bool, ::boost::detail::is_enum_impl<T>::value> {};
# 164 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_enum.hpp"
}
# 14 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_unsigned.hpp" 2





namespace boost {







namespace detail{

template <class T>
struct is_unsigned_values
{





   typedef typename remove_cv<T>::type no_cv_t;
   static const no_cv_t minus_one = (static_cast<no_cv_t>(-1));
   static const no_cv_t zero = (static_cast<no_cv_t>(0));
};

template <class T>
struct is_ununsigned_helper
{
   static const bool value = (::boost::detail::is_unsigned_values<T>::minus_one > ::boost::detail::is_unsigned_values<T>::zero);
};

template <bool integral_type>
struct is_unsigned_select_helper
{
   template <class T>
   struct rebind
   {
      typedef is_ununsigned_helper<T> type;
   };
};

template <>
struct is_unsigned_select_helper<false>
{
   template <class T>
   struct rebind
   {
      typedef false_type type;
   };
};

template <class T>
struct is_unsigned
{
   typedef ::boost::detail::is_unsigned_select_helper< ::boost::is_integral<T>::value || ::boost::is_enum<T>::value > selector;
   typedef typename selector::template rebind<T> binder;
   typedef typename binder::type type;
   static const bool value = type::value;
};

}

template <class T> struct is_unsigned : public integral_constant<bool, boost::detail::is_unsigned<T>::value> {};
# 91 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_unsigned.hpp"
template <> struct is_unsigned<unsigned char> : public true_type{};
template <> struct is_unsigned<const unsigned char> : public true_type{};
template <> struct is_unsigned<volatile unsigned char> : public true_type{};
template <> struct is_unsigned<const volatile unsigned char> : public true_type{};
template <> struct is_unsigned<unsigned short> : public true_type{};
template <> struct is_unsigned<const unsigned short> : public true_type{};
template <> struct is_unsigned<volatile unsigned short> : public true_type{};
template <> struct is_unsigned<const volatile unsigned short> : public true_type{};
template <> struct is_unsigned<unsigned int> : public true_type{};
template <> struct is_unsigned<const unsigned int> : public true_type{};
template <> struct is_unsigned<volatile unsigned int> : public true_type{};
template <> struct is_unsigned<const volatile unsigned int> : public true_type{};
template <> struct is_unsigned<unsigned long> : public true_type{};
template <> struct is_unsigned<const unsigned long> : public true_type{};
template <> struct is_unsigned<volatile unsigned long> : public true_type{};
template <> struct is_unsigned<const volatile unsigned long> : public true_type{};

template <> struct is_unsigned<signed char> : public false_type{};
template <> struct is_unsigned<const signed char> : public false_type{};
template <> struct is_unsigned<volatile signed char> : public false_type{};
template <> struct is_unsigned<const volatile signed char> : public false_type{};
template <> struct is_unsigned< short> : public false_type{};
template <> struct is_unsigned<const short> : public false_type{};
template <> struct is_unsigned<volatile short> : public false_type{};
template <> struct is_unsigned<const volatile short> : public false_type{};
template <> struct is_unsigned< int> : public false_type{};
template <> struct is_unsigned<const int> : public false_type{};
template <> struct is_unsigned<volatile int> : public false_type{};
template <> struct is_unsigned<const volatile int> : public false_type{};
template <> struct is_unsigned< long> : public false_type{};
template <> struct is_unsigned<const long> : public false_type{};
template <> struct is_unsigned<volatile long> : public false_type{};
template <> struct is_unsigned<const volatile long> : public false_type{};

template <> struct is_unsigned< ::boost::ulong_long_type> : public true_type{};
template <> struct is_unsigned<const ::boost::ulong_long_type> : public true_type{};
template <> struct is_unsigned<volatile ::boost::ulong_long_type> : public true_type{};
template <> struct is_unsigned<const volatile ::boost::ulong_long_type> : public true_type{};

template <> struct is_unsigned< ::boost::long_long_type> : public false_type{};
template <> struct is_unsigned<const ::boost::long_long_type> : public false_type{};
template <> struct is_unsigned<volatile ::boost::long_long_type> : public false_type{};
template <> struct is_unsigned<const volatile ::boost::long_long_type> : public false_type{};
# 142 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_unsigned.hpp"
template <> struct is_unsigned<char> : public false_type{};
template <> struct is_unsigned<const char> : public false_type{};
template <> struct is_unsigned<volatile char> : public false_type{};
template <> struct is_unsigned<const volatile char> : public false_type{};




template <> struct is_unsigned<wchar_t> : public true_type{};
template <> struct is_unsigned<const wchar_t> : public true_type{};
template <> struct is_unsigned<volatile wchar_t> : public true_type{};
template <> struct is_unsigned<const volatile wchar_t> : public true_type{};







}
# 46 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/detail/is_evenly_divisible_by.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/chrono/detail/is_evenly_divisible_by.hpp"
namespace boost {
namespace chrono {
namespace chrono_detail {




  template <class R1, class R2>
  struct is_evenly_divisible_by : public boost::ratio_detail::is_evenly_divisible_by<R1, R2>
  {};

}
}
}
# 47 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/cstdint.hpp" 1
# 49 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2
# 63 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 63 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2
# 73 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
namespace boost {
namespace chrono {

    template <class Rep, class Period = ratio<1> >
    class duration;

    namespace detail
    {
    template <class T>
      struct is_duration
        : boost::false_type {};

    template <class Rep, class Period>
      struct is_duration<duration<Rep, Period> >
        : boost::true_type {};

    template <class Duration, class Rep, bool = is_duration<Rep>::value>
    struct duration_divide_result
    {
    };

    template <class Duration, class Rep2,
        bool = (
                    ((boost::is_convertible<typename Duration::rep,
                        typename common_type<typename Duration::rep, Rep2>::type>::value))
                && ((boost::is_convertible<Rep2,
                        typename common_type<typename Duration::rep, Rep2>::type>::value))
                )
        >
    struct duration_divide_imp
    {
    };

    template <class Rep1, class Period, class Rep2>
    struct duration_divide_imp<duration<Rep1, Period>, Rep2, true>
    {
        typedef duration<typename common_type<Rep1, Rep2>::type, Period> type;
    };

    template <class Rep1, class Period, class Rep2>
    struct duration_divide_result<duration<Rep1, Period>, Rep2, false>
        : duration_divide_imp<duration<Rep1, Period>, Rep2>
    {
    };


    template <class Rep, class Duration, bool = is_duration<Rep>::value>
    struct duration_divide_result2
    {
    };

    template <class Rep, class Duration,
        bool = (
                    ((boost::is_convertible<typename Duration::rep,
                        typename common_type<typename Duration::rep, Rep>::type>::value))
                && ((boost::is_convertible<Rep,
                        typename common_type<typename Duration::rep, Rep>::type>::value))
                )
        >
    struct duration_divide_imp2
    {
    };

    template <class Rep1, class Rep2, class Period >
    struct duration_divide_imp2<Rep1, duration<Rep2, Period>, true>
    {

        typedef double type;
    };

    template <class Rep1, class Rep2, class Period >
    struct duration_divide_result2<Rep1, duration<Rep2, Period>, false>
        : duration_divide_imp2<Rep1, duration<Rep2, Period> >
    {
    };


    template <class Duration, class Rep, bool = is_duration<Rep>::value>
    struct duration_modulo_result
    {
    };

    template <class Duration, class Rep2,
        bool = (



    boost::is_convertible<Rep2,
                        typename common_type<typename Duration::rep, Rep2>::type>::value
                )
        >
    struct duration_modulo_imp
    {
    };

    template <class Rep1, class Period, class Rep2>
    struct duration_modulo_imp<duration<Rep1, Period>, Rep2, true>
    {
        typedef duration<typename common_type<Rep1, Rep2>::type, Period> type;
    };

    template <class Rep1, class Period, class Rep2>
    struct duration_modulo_result<duration<Rep1, Period>, Rep2, false>
        : duration_modulo_imp<duration<Rep1, Period>, Rep2>
    {
    };

}
}




template <class Rep1, class Period1, class Rep2, class Period2>
struct common_type<chrono::duration<Rep1, Period1>,
                     chrono::duration<Rep2, Period2> >;


namespace chrono {


    template <class Rep> struct treat_as_floating_point;
    template <class Rep> struct duration_values;


    typedef duration<boost::int_least64_t, nano> nanoseconds;
    typedef duration<boost::int_least64_t, micro> microseconds;
    typedef duration<boost::int_least64_t, milli> milliseconds;
    typedef duration<boost::int_least64_t> seconds;
    typedef duration<boost::int_least32_t, ratio< 60> > minutes;
    typedef duration<boost::int_least32_t, ratio<3600> > hours;





namespace detail
{
# 223 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
    template <class FromDuration, class ToDuration,
              class Period,
              bool PeriodNumEq1,
              bool PeriodDenEq1>
    struct duration_cast_aux;





    template <class FromDuration, class ToDuration, class Period>
    struct duration_cast_aux<FromDuration, ToDuration, Period, true, true>
    {
                        ToDuration operator()(const FromDuration& fd) const
        {
            return ToDuration(static_cast<typename ToDuration::rep>(fd.count()));
        }
    };







    template <class FromDuration, class ToDuration, class Period>
    struct duration_cast_aux<FromDuration, ToDuration, Period, true, false>
    {
                        ToDuration operator()(const FromDuration& fd) const
        {
            typedef typename common_type<
                typename ToDuration::rep,
                typename FromDuration::rep,
                boost::intmax_t>::type C;
            return ToDuration(static_cast<typename ToDuration::rep>(
                              static_cast<C>(fd.count()) / static_cast<C>(Period::den)));
        }
    };






    template <class FromDuration, class ToDuration, class Period>
    struct duration_cast_aux<FromDuration, ToDuration, Period, false, true>
    {
                        ToDuration operator()(const FromDuration& fd) const
        {
            typedef typename common_type<
              typename ToDuration::rep,
              typename FromDuration::rep,
              boost::intmax_t>::type C;
            return ToDuration(static_cast<typename ToDuration::rep>(
                              static_cast<C>(fd.count()) * static_cast<C>(Period::num)));
        }
    };







    template <class FromDuration, class ToDuration, class Period>
    struct duration_cast_aux<FromDuration, ToDuration, Period, false, false>
    {
                        ToDuration operator()(const FromDuration& fd) const
        {
            typedef typename common_type<
              typename ToDuration::rep,
              typename FromDuration::rep,
              boost::intmax_t>::type C;
            return ToDuration(static_cast<typename ToDuration::rep>(
               static_cast<C>(fd.count()) * static_cast<C>(Period::num)
                 / static_cast<C>(Period::den)));
        }
    };

    template <class FromDuration, class ToDuration>
    struct duration_cast {
        typedef typename ratio_divide<typename FromDuration::period,
              typename ToDuration::period>::type Period;
        typedef duration_cast_aux<
            FromDuration,
            ToDuration,
            Period,
            Period::num == 1,
            Period::den == 1
        > Aux;
                        ToDuration operator()(const FromDuration& fd) const
        {
            return Aux()(fd);
        }
    };

}
# 333 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
    template <class Rep>
    struct treat_as_floating_point : boost::is_floating_point<Rep> {};





namespace detail {
    template <class T, bool = is_arithmetic<T>::value>
    struct chrono_numeric_limits {
        static T lowest() throw() {return (std::numeric_limits<T>::min) ();}
    };

    template <class T>
    struct chrono_numeric_limits<T,true> {
        static T lowest() throw() {return (std::numeric_limits<T>::min) ();}
    };

    template <>
    struct chrono_numeric_limits<float,true> {
        static float lowest() throw()
        {
            return -(std::numeric_limits<float>::max) ();
        }
    };

    template <>
    struct chrono_numeric_limits<double,true> {
        static double lowest() throw()
        {
            return -(std::numeric_limits<double>::max) ();
        }
    };

    template <>
    struct chrono_numeric_limits<long double,true> {
        static long double lowest() throw()
        {
            return -(std::numeric_limits<long double>::max)();
        }
    };

    template <class T>
    struct numeric_limits : chrono_numeric_limits<typename remove_cv<T>::type>
    {};

}
template <class Rep>
struct duration_values
{
    static Rep zero() {return Rep(0);}
    static Rep max ()
    {
        return (std::numeric_limits<Rep>::max)();
    }

    static Rep min ()
    {
        return detail::numeric_limits<Rep>::lowest();
    }
};

}





template <class Rep1, class Period1, class Rep2, class Period2>
struct common_type<chrono::duration<Rep1, Period1>,
                   chrono::duration<Rep2, Period2> >
{
  typedef chrono::duration<typename common_type<Rep1, Rep2>::type,
                      typename boost::ratio_gcd<Period1, Period2>::type> type;
};
# 417 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
namespace chrono {

    template <class Rep, class Period>
    class duration
    {

    static char boost_chrono_test_424[(!boost::chrono::detail::is_duration<Rep>::value)?1:-1];

    static char boost_chrono_test_426[(boost::ratio_detail::is_ratio<typename Period::type>::value)?1:-1];

    static char boost_chrono_test_428[(Period::num>0)?1:-1];

    public:
        typedef Rep rep;
        typedef Period period;
    private:
        rep rep_;
    public:





                        duration() {}



        template <class Rep2>
                             __forceinline
        explicit duration(const Rep2& r
        , typename boost::enable_if <
                    mpl::and_ <
                        boost::is_convertible<Rep2, rep>,
                        mpl::or_ <
                            treat_as_floating_point<rep>,
                            mpl::and_ <
                                mpl::not_ < treat_as_floating_point<rep> >,
                                mpl::not_ < treat_as_floating_point<Rep2> >
                            >
                        >
                    >
                >::type* = 0
            ) : rep_(r) { }

        duration& operator=(const duration& rhs)
        {
            if (&rhs != this) rep_= rhs.rep_;
            return *this;
        }




        template <class Rep2, class Period2>
        __forceinline
        duration(const duration<Rep2, Period2>& d
        , typename boost::enable_if <
                    mpl::or_ <
                        treat_as_floating_point<rep>,
                        mpl::and_ <
                            chrono_detail::is_evenly_divisible_by<Period2, period>,
                            mpl::not_ < treat_as_floating_point<Rep2> >
                        >
                    >
                >::type* = 0
        )
            : rep_(chrono::detail::duration_cast<duration<Rep2, Period2>, duration>()(d).count()) {}




        rep count() const {return rep_;}




        duration operator+() const {return duration(rep_);;}

        duration operator-() const {return duration(-rep_);}
        duration& operator++() {++rep_; return *this;}
        duration operator++(int) {return duration(rep_++);}
        duration& operator--() {--rep_; return *this;}
        duration operator--(int) {return duration(rep_--);}

        duration& operator+=(const duration& d)
        {
            rep_ += d.count(); return *this;
        }
        duration& operator-=(const duration& d)
        {
            rep_ -= d.count(); return *this;
        }

        duration& operator*=(const rep& rhs) {rep_ *= rhs; return *this;}
        duration& operator/=(const rep& rhs) {rep_ /= rhs; return *this;}
        duration& operator%=(const rep& rhs) {rep_ %= rhs; return *this;}
        duration& operator%=(const duration& rhs)
        {
            rep_ %= rhs.count(); return *this;
        }


        static duration zero()
        {
            return duration(duration_values<rep>::zero());
        }
        static duration min ()
        {
            return duration((duration_values<rep>::min)());
        }
        static duration max ()
        {
            return duration((duration_values<rep>::max)());
        }
    };







    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2> >::type
    operator+(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
      typedef typename common_type<duration<Rep1, Period1>,
        duration<Rep2, Period2> >::type common_duration;
      return common_duration(common_duration(lhs).count()+common_duration(rhs).count());
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2> >::type
    operator-(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
      typedef typename common_type<duration<Rep1, Period1>,
            duration<Rep2, Period2> >::type common_duration;
      return common_duration(common_duration(lhs).count()-common_duration(rhs).count());
    }



    template <class Rep1, class Period, class Rep2>
    inline
    typename boost::enable_if <
        mpl::and_ <
        boost::is_convertible<Rep1, typename common_type<Rep1, Rep2>::type>,
        boost::is_convertible<Rep2, typename common_type<Rep1, Rep2>::type>
        >,
        duration<typename common_type<Rep1, Rep2>::type, Period>
    >::type
    operator*(const duration<Rep1, Period>& d, const Rep2& s)
    {
      typedef typename common_type<Rep1, Rep2>::type common_rep;
      typedef duration<common_rep, Period> common_duration;
      return common_duration(common_duration(d).count()*static_cast<common_rep>(s));
    }

    template <class Rep1, class Period, class Rep2>
    inline
    typename boost::enable_if <
        mpl::and_ <
        boost::is_convertible<Rep1, typename common_type<Rep1, Rep2>::type>,
        boost::is_convertible<Rep2, typename common_type<Rep1, Rep2>::type>
        >,
        duration<typename common_type<Rep1, Rep2>::type, Period>
    >::type
    operator*(const Rep1& s, const duration<Rep2, Period>& d)
    {
        return d * s;
    }



    template <class Rep1, class Period, class Rep2>
    inline
    typename boost::disable_if <boost::chrono::detail::is_duration<Rep2>,
      typename boost::chrono::detail::duration_divide_result<
        duration<Rep1, Period>, Rep2>::type
    >::type
    operator/(const duration<Rep1, Period>& d, const Rep2& s)
    {
      typedef typename common_type<Rep1, Rep2>::type common_rep;
      typedef duration<common_rep, Period> common_duration;
      return common_duration(common_duration(d).count()/static_cast<common_rep>(s));
    }

    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    typename common_type<Rep1, Rep2>::type
    operator/(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs)
    {
        typedef typename common_type<duration<Rep1, Period1>,
                                   duration<Rep2, Period2> >::type common_duration;
        return common_duration(lhs).count() / common_duration(rhs).count();
    }
# 636 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp"
    template <class Rep1, class Period, class Rep2>
    inline
    typename boost::disable_if <boost::chrono::detail::is_duration<Rep2>,
      typename boost::chrono::detail::duration_modulo_result<
        duration<Rep1, Period>, Rep2>::type
    >::type
    operator%(const duration<Rep1, Period>& d, const Rep2& s)
    {
      typedef typename common_type<Rep1, Rep2>::type common_rep;
      typedef duration<common_rep, Period> common_duration;
      return common_duration(common_duration(d).count()%static_cast<common_rep>(s));
    }

    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    typename common_type<duration<Rep1, Period1>, duration<Rep2, Period2> >::type
    operator%(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs) {
        typedef typename common_type<duration<Rep1, Period1>,
                                 duration<Rep2, Period2> >::type common_duration;

      return common_duration(common_duration(lhs).count()%common_duration(rhs).count());
    }






namespace detail
{
    template <class LhsDuration, class RhsDuration>
    struct duration_eq
    {
                      bool operator()(const LhsDuration& lhs, const RhsDuration& rhs) const
        {
            typedef typename common_type<LhsDuration, RhsDuration>::type common_duration;
            return common_duration(lhs).count() == common_duration(rhs).count();
        }
    };

    template <class LhsDuration>
    struct duration_eq<LhsDuration, LhsDuration>
    {
                      bool operator()(const LhsDuration& lhs, const LhsDuration& rhs) const
        {
            return lhs.count() == rhs.count();
        }
    };

    template <class LhsDuration, class RhsDuration>
    struct duration_lt
    {
                      bool operator()(const LhsDuration& lhs, const RhsDuration& rhs) const
        {
            typedef typename common_type<LhsDuration, RhsDuration>::type common_duration;
            return common_duration(lhs).count() < common_duration(rhs).count();
        }
    };

    template <class LhsDuration>
    struct duration_lt<LhsDuration, LhsDuration>
    {
                      bool operator()(const LhsDuration& lhs, const LhsDuration& rhs) const
        {
            return lhs.count() < rhs.count();
        }
    };

}



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator==(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return boost::chrono::detail::duration_eq<
            duration<Rep1, Period1>, duration<Rep2, Period2> >()(lhs, rhs);
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator!=(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return !(lhs == rhs);
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator< (const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return boost::chrono::detail::duration_lt<
          duration<Rep1, Period1>, duration<Rep2, Period2> >()(lhs, rhs);
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator> (const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return rhs < lhs;
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator<=(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return !(rhs < lhs);
    }



    template <class Rep1, class Period1, class Rep2, class Period2>
    inline
    bool
    operator>=(const duration<Rep1, Period1>& lhs,
          const duration<Rep2, Period2>& rhs)
    {
        return !(lhs < rhs);
    }






    template <class ToDuration, class Rep, class Period>
    inline
    typename boost::enable_if <
      boost::chrono::detail::is_duration<ToDuration>, ToDuration>::type
    duration_cast(const duration<Rep, Period>& fd)
    {
        return boost::chrono::detail::duration_cast<
          duration<Rep, Period>, ToDuration>()(fd);
    }

}
}




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 795 "D:\\my_project\\boost_1_65_1\\boost/chrono/duration.hpp" 2
# 62 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp" 1
# 37 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 37 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp" 2
# 47 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp"
namespace boost {
namespace chrono {

  template <class Clock, class Duration = typename Clock::duration>
    class time_point;


}




template <class Clock, class Duration1, class Duration2>
  struct common_type<chrono::time_point<Clock, Duration1>,
                     chrono::time_point<Clock, Duration2> >;







template <class Clock, class Duration1, class Duration2>
struct common_type<chrono::time_point<Clock, Duration1>,
                   chrono::time_point<Clock, Duration2> >
{
  typedef chrono::time_point<Clock,
    typename common_type<Duration1, Duration2>::type> type;
};



namespace chrono {


    template <class Clock, class Duration1, class Rep2, class Period2>
    inline
    time_point<Clock,
        typename common_type<Duration1, duration<Rep2, Period2> >::type>
    operator+(
            const time_point<Clock, Duration1>& lhs,
            const duration<Rep2, Period2>& rhs);
    template <class Rep1, class Period1, class Clock, class Duration2>
    inline
    time_point<Clock,
        typename common_type<duration<Rep1, Period1>, Duration2>::type>
    operator+(
            const duration<Rep1, Period1>& lhs,
            const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Rep2, class Period2>
    inline
    time_point<Clock,
        typename common_type<Duration1, duration<Rep2, Period2> >::type>
    operator-(
            const time_point<Clock, Duration1>& lhs,
            const duration<Rep2, Period2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    typename common_type<Duration1, Duration2>::type
    operator-(
            const time_point<Clock, Duration1>& lhs,
            const time_point<Clock,
            Duration2>& rhs);


    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator==(
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator!=(
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator< (
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator<=(
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator> (
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);
    template <class Clock, class Duration1, class Duration2>
    inline
    bool operator>=(
          const time_point<Clock, Duration1>& lhs,
          const time_point<Clock, Duration2>& rhs);


    template <class ToDuration, class Clock, class Duration>
    inline
    time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);







    template <class Clock, class Duration>
    class time_point
    {
        static char boost_chrono_test_158[(boost::chrono::detail::is_duration<Duration>::value)?1:-1];

    public:
        typedef Clock clock;
        typedef Duration duration;
        typedef typename duration::rep rep;
        typedef typename duration::period period;
        typedef Duration difference_type;

    private:
        duration d_;

    public:
        __forceinline
        time_point() : d_(duration::zero())
        {}
        __forceinline
        explicit time_point(const duration& d)
            : d_(d)
        {}


        template <class Duration2>
        __forceinline
        time_point(const time_point<clock, Duration2>& t
                , typename boost::enable_if
                <
                    boost::is_convertible<Duration2, duration>
                >::type* = 0
        )
            : d_(t.time_since_epoch())
        {
        }



        duration time_since_epoch() const
        {
            return d_;
        }
# 215 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp"
        time_point& operator+=(const duration& d) {d_ += d; return *this;}
        time_point& operator-=(const duration& d) {d_ -= d; return *this;}



        static time_point
        min ()
        {
            return time_point((duration::min)());
        }
        static time_point
        max ()
        {
            return time_point((duration::max)());
        }
    };







    template <class Clock, class Duration1, class Rep2, class Period2>
    inline
    time_point<Clock,
        typename common_type<Duration1, duration<Rep2, Period2> >::type>
    operator+(const time_point<Clock, Duration1>& lhs,
            const duration<Rep2, Period2>& rhs)
    {
      typedef typename common_type<Duration1, duration<Rep2, Period2> >::type CDuration;
      typedef time_point<
          Clock,
          CDuration
      > TimeResult;
        return TimeResult(lhs.time_since_epoch() + CDuration(rhs));
    }



    template <class Rep1, class Period1, class Clock, class Duration2>
    inline
    time_point<Clock,
        typename common_type<duration<Rep1, Period1>, Duration2>::type>
    operator+(const duration<Rep1, Period1>& lhs,
            const time_point<Clock, Duration2>& rhs)
    {
        return rhs + lhs;
    }



    template <class Clock, class Duration1, class Rep2, class Period2>
    inline
    time_point<Clock,
        typename common_type<Duration1, duration<Rep2, Period2> >::type>
    operator-(const time_point<Clock, Duration1>& lhs,
            const duration<Rep2, Period2>& rhs)
    {
        return lhs + (-rhs);
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    typename common_type<Duration1, Duration2>::type
    operator-(const time_point<Clock, Duration1>& lhs,
            const time_point<Clock, Duration2>& rhs)
    {
        return lhs.time_since_epoch() - rhs.time_since_epoch();
    }







    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator==(const time_point<Clock, Duration1>& lhs,
             const time_point<Clock, Duration2>& rhs)
    {
        return lhs.time_since_epoch() == rhs.time_since_epoch();
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator!=(const time_point<Clock, Duration1>& lhs,
             const time_point<Clock, Duration2>& rhs)
    {
        return !(lhs == rhs);
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator<(const time_point<Clock, Duration1>& lhs,
            const time_point<Clock, Duration2>& rhs)
    {
        return lhs.time_since_epoch() < rhs.time_since_epoch();
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator>(const time_point<Clock, Duration1>& lhs,
            const time_point<Clock, Duration2>& rhs)
    {
        return rhs < lhs;
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator<=(const time_point<Clock, Duration1>& lhs,
             const time_point<Clock, Duration2>& rhs)
    {
        return !(rhs < lhs);
    }



    template <class Clock, class Duration1, class Duration2>
    inline
    bool
    operator>=(const time_point<Clock, Duration1>& lhs,
             const time_point<Clock, Duration2>& rhs)
    {
        return !(lhs < rhs);
    }





    template <class ToDuration, class Clock, class Duration>
    inline
    time_point<Clock, ToDuration>
    time_point_cast(const time_point<Clock, Duration>& t)
    {
        return time_point<Clock, ToDuration>(
                duration_cast<ToDuration>(t.time_since_epoch()));
    }

}
}




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 376 "D:\\my_project\\boost_1_65_1\\boost/chrono/time_point.hpp" 2
# 63 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/detail/system.hpp" 1
# 64 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/clock_string.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/chrono/clock_string.hpp"
namespace boost
{
  namespace chrono
  {

    template<class Clock, class CharT>
    struct clock_string;

  }

}
# 65 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2
# 84 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 84 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2
# 95 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
namespace boost {
namespace chrono {


  class system_clock;

  class steady_clock;



  typedef steady_clock high_resolution_clock;
# 127 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
  class system_clock
  {
  public:
      typedef boost::chrono::duration<boost::int_least64_t, ratio<(1LL), (10000000LL)> > duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock> time_point;
      static const bool is_steady = false;

      static time_point now() ;

      static time_point now(system::error_code & ec);


      static std::time_t to_time_t(const time_point& t) ;
      static time_point from_time_t(std::time_t t) ;
  };
# 153 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
  class steady_clock
  {
  public:
      typedef nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock> time_point;
      static const bool is_steady = true;

      static time_point now() ;

      static time_point now(system::error_code & ec);

  };
# 176 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp"
  template<class CharT>
  struct clock_string<system_clock, CharT>
  {
    static std::basic_string<CharT> name()
    {
      static const CharT u[] =
      { 's', 'y', 's', 't', 'e', 'm', '_', 'c', 'l', 'o', 'c', 'k' };
      static const std::basic_string<CharT> str(u, u + sizeof(u)
          / sizeof(u[0]));
      return str;
    }
    static std::basic_string<CharT> since()
    {
      static const CharT
          u[] =
              { ' ', 's', 'i', 'n', 'c', 'e', ' ', 'J', 'a', 'n', ' ', '1', ',', ' ', '1', '9', '7', '0' };
      static const std::basic_string<CharT> str(u, u + sizeof(u)
          / sizeof(u[0]));
      return str;
    }
  };



  template<class CharT>
  struct clock_string<steady_clock, CharT>
  {
    static std::basic_string<CharT> name()
    {
      static const CharT
          u[] =
              { 's', 't', 'e', 'a', 'd', 'y', '_', 'c', 'l', 'o', 'c', 'k' };
      static const std::basic_string<CharT> str(u, u + sizeof(u)
          / sizeof(u[0]));
      return str;
    }
    static std::basic_string<CharT> since()
    {
      const CharT u[] =
      { ' ', 's', 'i', 'n', 'c', 'e', ' ', 'b', 'o', 'o', 't' };
      const std::basic_string<CharT> str(u, u + sizeof(u) / sizeof(u[0]));
      return str;
    }
  };



}
}




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 228 "D:\\my_project\\boost_1_65_1\\boost/chrono/system_clocks.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/chrono/ceil.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/chrono/ceil.hpp"
namespace boost
{
  namespace chrono
  {




    template <class To, class Rep, class Period>
    To ceil(const duration<Rep, Period>& d)
    {
        To t = duration_cast<To>(d);
        if (t < d)
            ++t;
        return t;
    }

  }
}
# 23 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2


namespace boost
{
    namespace detail
    {
        struct basic_timed_mutex
        {
            static const unsigned char lock_flag_bit=31;
            static const unsigned char event_set_flag_bit=30;
            static const long lock_flag_value=1<<lock_flag_bit;
            static const long event_set_flag_value=1<<event_set_flag_bit;
            long active_count;
            void* event;

            void initialize()
            {
                active_count=0;
                event=0;
            }

            void destroy()
            {




                void* const old_event=((void*)::boost::detail::InterlockedExchange((long volatile*)(&event),(long)(0)));



                if(old_event)
                {
                    win32::CloseHandle(old_event);
                }
            }


            bool try_lock()
            {
                return !win32::interlocked_bit_test_and_set(&active_count,lock_flag_bit);
            }

            void lock()
            {
                if(try_lock())
                {
                    return;
                }
                long old_count=active_count;
                mark_waiting_and_try_lock(old_count);

                if(old_count&lock_flag_value)
                {
                    bool lock_acquired=false;
                    void* const sem=get_event();

                    do
                    {
                        unsigned const retval(win32::WaitForSingleObjectEx(sem, ::boost::detail::win32::infinite,0));
                        (void)( (!!(0 == retval || ::boost::detail::win32::wait_abandoned == retval)) || (_wassert(L"0 == retval || ::boost::detail::win32::wait_abandoned == retval", L"D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp", (unsigned)(85)), 0) );


                        clear_waiting_and_try_lock(old_count);
                        lock_acquired=!(old_count&lock_flag_value);
                    }
                    while(!lock_acquired);
                }
            }
            void mark_waiting_and_try_lock(long& old_count)
            {
                for(;;)
                {
                    bool const was_locked=(old_count&lock_flag_value) ? true : false;
                    long const new_count=was_locked?(old_count+1):(old_count|lock_flag_value);
                    long const current=::boost::detail::InterlockedCompareExchange(&active_count,new_count,old_count);
                    if(current==old_count)
                    {
                        if(was_locked)
                            old_count=new_count;
                        break;
                    }
                    old_count=current;
                }
            }

            void clear_waiting_and_try_lock(long& old_count)
            {
                old_count&=~lock_flag_value;
                old_count|=event_set_flag_value;
                for(;;)
                {
                    long const new_count=((old_count&lock_flag_value)?old_count:((old_count-1)|lock_flag_value))&~event_set_flag_value;
                    long const current=::boost::detail::InterlockedCompareExchange(&active_count,new_count,old_count);
                    if(current==old_count)
                    {
                        break;
                    }
                    old_count=current;
                }
            }



            bool timed_lock(::boost::system_time const& wait_until)
            {
                if(try_lock())
                {
                    return true;
                }
                long old_count=active_count;
                mark_waiting_and_try_lock(old_count);

                if(old_count&lock_flag_value)
                {
                    bool lock_acquired=false;
                    void* const sem=get_event();

                    do
                    {
                        if(win32::WaitForSingleObjectEx(sem,::boost::detail::get_milliseconds_until(wait_until),0)!=0)
                        {
                            ::boost::detail::InterlockedDecrement(&active_count);
                            return false;
                        }
                        clear_waiting_and_try_lock(old_count);
                        lock_acquired=!(old_count&lock_flag_value);
                    }
                    while(!lock_acquired);
                }
                return true;
            }

            template<typename Duration>
            bool timed_lock(Duration const& timeout)
            {
                return timed_lock(get_system_time()+timeout);
            }

            bool timed_lock(boost::xtime const& timeout)
            {
                return timed_lock(system_time(timeout));
            }


            template <class Rep, class Period>
            bool try_lock_for(const chrono::duration<Rep, Period>& rel_time)
            {
              return try_lock_until(chrono::steady_clock::now() + rel_time);
            }
            template <class Clock, class Duration>
            bool try_lock_until(const chrono::time_point<Clock, Duration>& t)
            {
              using namespace chrono;
              system_clock::time_point s_now = system_clock::now();
              typename Clock::time_point c_now = Clock::now();
              return try_lock_until(s_now + ceil<system_clock::duration>(t - c_now));
            }
            template <class Duration>
            bool try_lock_until(const chrono::time_point<chrono::system_clock, Duration>& t)
            {
              using namespace chrono;
              typedef time_point<chrono::system_clock, chrono::system_clock::duration> sys_tmpt;
              return try_lock_until(sys_tmpt(chrono::ceil<chrono::system_clock::duration>(t.time_since_epoch())));
            }
            bool try_lock_until(const chrono::time_point<chrono::system_clock, chrono::system_clock::duration>& tp)
            {
              if(try_lock())
              {
                  return true;
              }
              long old_count=active_count;
              mark_waiting_and_try_lock(old_count);

              if(old_count&lock_flag_value)
              {
                  bool lock_acquired=false;
                  void* const sem=get_event();

                  do
                  {
                      chrono::time_point<chrono::system_clock, chrono::system_clock::duration> now = chrono::system_clock::now();
                      if (tp<=now) {
                        ::boost::detail::InterlockedDecrement(&active_count);
                        return false;
                      }
                      chrono::milliseconds rel_time= chrono::ceil<chrono::milliseconds>(tp-now);

                      if(win32::WaitForSingleObjectEx(sem,static_cast<unsigned long>(rel_time.count()),0)!=0)
                      {
                          ::boost::detail::InterlockedDecrement(&active_count);
                          return false;
                      }
                      clear_waiting_and_try_lock(old_count);
                      lock_acquired=!(old_count&lock_flag_value);
                  }
                  while(!lock_acquired);
              }
              return true;
            }


            void unlock()
            {
                long const offset=lock_flag_value;
                long const old_count=::boost::detail::InterlockedExchangeAdd(&active_count,lock_flag_value);
                if(!(old_count&event_set_flag_value) && (old_count>offset))
                {
                    if(!win32::interlocked_bit_test_and_set(&active_count,event_set_flag_bit))
                    {
                        win32::SetEvent(get_event());
                    }
                }
            }

        private:
            void* get_event()
            {
                void* current_event=::boost::detail::interlocked_read_acquire(&event);

                if(!current_event)
                {
                    void* const new_event=win32::create_anonymous_event(win32::auto_reset_event,win32::event_initially_reset);





                    void* const old_event=((void*)::boost::detail::InterlockedCompareExchange((long volatile*)(&event),(long)(new_event),(long)(0)));



                    if(old_event!=0)
                    {
                        win32::CloseHandle(new_event);
                        return old_event;
                    }
                    else
                    {
                        return new_event;
                    }
                }
                return current_event;
            }

        };

    }
}




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 277 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/basic_timed_mutex.hpp" 2
# 9 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/mutex.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/delete.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/workaround.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp" 2
# 58 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils_core.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils_core.hpp"
namespace boost {
namespace move_detail {




template<bool C, typename T1, typename T2>
struct if_c
{
   typedef T1 type;
};

template<typename T1, typename T2>
struct if_c<false,T1,T2>
{
   typedef T2 type;
};




template<typename T1, typename T2, typename T3>
struct if_ : if_c<0 != T1::value, T2, T3>
{};




template <bool B, class T = void>
struct enable_if_c
{
   typedef T type;
};

template <class T>
struct enable_if_c<false, T> {};




template <class Cond, class T = void>
struct enable_if : enable_if_c<Cond::value, T> {};




template <bool B, class T = void>
struct disable_if_c
   : enable_if_c<!B, T>
{};




template <class Cond, class T = void>
struct disable_if : enable_if_c<!Cond::value, T> {};




template<class T, T v>
struct integral_constant
{
   static const T value = v;
   typedef T value_type;
   typedef integral_constant<T, v> type;

     operator T() const { return value; }
   T operator()() const { return value; }
};

typedef integral_constant<bool, true > true_type;
typedef integral_constant<bool, false > false_type;





template<class T, class U>
struct is_same
{
   static const bool value = false;
};

template<class T>
struct is_same<T, T>
{
   static const bool value = true;
};




template <class T, class U, class R = void>
struct enable_if_same : enable_if<is_same<T, U>, R> {};




template <class T, class U, class R = void>
struct disable_if_same : disable_if<is_same<T, U>, R> {};

}
}
# 22 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp" 2





namespace boost {


template <class T> class rv;

namespace move_detail {




template<class T, class U>
struct is_different
{
   static const bool value = !is_same<T, U>::value;
};




template<class F, class Param>
struct apply
{
   typedef typename F::template apply<Param>::type type;
};





template< bool C_ >
struct bool_ : integral_constant<bool, C_>
{
     operator bool() const { return C_; }
   bool operator()() const { return C_; }
};

typedef bool_<true> true_;
typedef bool_<false> false_;




struct nat{};




typedef char yes_type;

struct no_type
{
   char _[2];
};




template <class T> struct natify{};




template<class T>
struct remove_reference
{
   typedef T type;
};

template<class T>
struct remove_reference<T&>
{
   typedef T type;
};
# 111 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
template<class T>
struct remove_reference< rv<T> >
{
   typedef T type;
};

template<class T>
struct remove_reference< rv<T> &>
{
   typedef T type;
};

template<class T>
struct remove_reference< const rv<T> &>
{
   typedef T type;
};







template< class T > struct remove_pointer { typedef T type; };
template< class T > struct remove_pointer<T*> { typedef T type; };
template< class T > struct remove_pointer<T* const> { typedef T type; };
template< class T > struct remove_pointer<T* volatile> { typedef T type; };
template< class T > struct remove_pointer<T* const volatile> { typedef T type; };




template< class T >
struct add_pointer
{
   typedef typename remove_reference<T>::type* type;
};




template<class T>
struct add_const
{
   typedef const T type;
};

template<class T>
struct add_const<T&>
{
   typedef const T& type;
};
# 178 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
template<class T>
struct add_lvalue_reference
{ typedef T& type; };

template<class T> struct add_lvalue_reference<T&> { typedef T& type; };
template<> struct add_lvalue_reference<void> { typedef void type; };
template<> struct add_lvalue_reference<const void> { typedef const void type; };
template<> struct add_lvalue_reference<volatile void> { typedef volatile void type; };
template<> struct add_lvalue_reference<const volatile void>{ typedef const volatile void type; };

template<class T>
struct add_const_lvalue_reference
{
   typedef typename remove_reference<T>::type t_unreferenced;
   typedef typename add_const<t_unreferenced>::type t_unreferenced_const;
   typedef typename add_lvalue_reference
      <t_unreferenced_const>::type type;
};




template<class T>
struct is_lvalue_reference
{
    static const bool value = false;
};

template<class T>
struct is_lvalue_reference<T&>
{
    static const bool value = true;
};





template <class T>
struct identity
{
   typedef T type;
   typedef typename add_const_lvalue_reference<T>::type reference;
   reference operator()(reference t)
   { return t; }
};




template<class T>
struct is_class_or_union
{
   struct twochar { char dummy[2]; };
   template <class U>
   static char is_class_or_union_tester(void(U::*)(void));
   template <class U>
   static twochar is_class_or_union_tester(...);
   static const bool value = sizeof(is_class_or_union_tester<T>(0)) == sizeof(char);
};




template<class T>
struct addr_impl_ref
{
   T & v_;
   __forceinline addr_impl_ref( T & v ): v_( v ) {}
   __forceinline operator T& () const { return v_; }

   private:
   addr_impl_ref & operator=(const addr_impl_ref &);
};

template<class T>
struct addressof_impl
{
   __forceinline static T * f( T & v, long )
   {
      return reinterpret_cast<T*>(
         &const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
   }

   __forceinline static T * f( T * v, int )
   { return v; }
};

template<class T>
__forceinline T * addressof( T & v )
{
   return ::boost::move_detail::addressof_impl<T>::f
      ( ::boost::move_detail::addr_impl_ref<T>( v ), 0 );
}




template <class T>
struct has_pointer_type
{
   struct two { char c[2]; };
   template <class U> static two test(...);
   template <class U> static char test(typename U::pointer* = 0);
   static const bool value = sizeof(test<T>(0)) == 1;
};
# 292 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
template <class T, class U>
struct is_convertible
{
   static const bool value = __is_convertible_to(T, U);
};
# 315 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
template <class T, class U, bool IsSame = is_same<T, U>::value>
struct is_same_or_convertible
   : is_convertible<T, U>
{};

template <class T, class U>
struct is_same_or_convertible<T, U, true>
{
   static const bool value = true;
};

template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c
    : if_c<C,F1,F2>::type
{};

template<
      typename C
    , typename T1
    , typename T2
    >
struct eval_if
    : if_<C,T1,T2>::type
{};






template<class T, class U, class R = void>
struct enable_if_convertible
   : enable_if< is_convertible<T, U>, R>
{};

template<class T, class U, class R = void>
struct disable_if_convertible
   : disable_if< is_convertible<T, U>, R>
{};

template<class T, class U, class R = void>
struct enable_if_same_or_convertible
   : enable_if< is_same_or_convertible<T, U>, R>
{};

template<class T, class U, class R = void>
struct disable_if_same_or_convertible
   : disable_if< is_same_or_convertible<T, U>, R>
{};






template<bool, class B = true_, class C = true_, class D = true_>
struct and_impl
   : and_impl<B::value, C, D>
{};

template<>
struct and_impl<true, true_, true_, true_>
{
   static const bool value = true;
};

template<class B, class C, class D>
struct and_impl<false, B, C, D>
{
   static const bool value = false;
};

template<class A, class B, class C = true_, class D = true_>
struct and_
   : and_impl<A::value, B, C, D>
{};






template<bool, class B = false_, class C = false_, class D = false_>
struct or_impl
   : or_impl<B::value, C, D>
{};

template<>
struct or_impl<false, false_, false_, false_>
{
   static const bool value = false;
};

template<class B, class C, class D>
struct or_impl<true, B, C, D>
{
   static const bool value = true;
};

template<class A, class B, class C = false_, class D = false_>
struct or_
   : or_impl<A::value, B, C, D>
{};






template<class T>
struct not_
{
   static const bool value = !T::value;
};







template<class R, class A, class B, class C = true_, class D = true_>
struct enable_if_and
   : enable_if_c< and_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = true_, class D = true_>
struct disable_if_and
   : disable_if_c< and_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = false_, class D = false_>
struct enable_if_or
   : enable_if_c< or_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = false_, class D = false_>
struct disable_if_or
   : disable_if_c< or_<A, B, C, D>::value, R>
{};






template<class T>
struct has_move_emulation_enabled_impl
   : is_convertible< T, ::boost::rv<T>& >
{};

template<class T>
struct has_move_emulation_enabled_impl<T&>
{ static const bool value = false; };

template<class T>
struct has_move_emulation_enabled_impl< ::boost::rv<T> >
{ static const bool value = false; };







template <class T>
struct is_rv_impl
{ static const bool value = false; };

template <class T>
struct is_rv_impl< rv<T> >
{ static const bool value = true; };

template <class T>
struct is_rv_impl< const rv<T> >
{ static const bool value = true; };



template< class T >
struct is_rvalue_reference
{ static const bool value = false; };
# 510 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
template< class T >
struct is_rvalue_reference< boost::rv<T>& >
{ static const bool value = true; };

template< class T >
struct is_rvalue_reference< const boost::rv<T>& >
{ static const bool value = true; };
# 528 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
namespace detail_add_rvalue_reference
{
   template< class T
            , bool emulation = has_move_emulation_enabled_impl<T>::value
            , bool rv = is_rv_impl<T>::value >
   struct add_rvalue_reference_impl { typedef T type; };

   template< class T, bool emulation>
   struct add_rvalue_reference_impl< T, emulation, true > { typedef T & type; };

   template< class T, bool rv >
   struct add_rvalue_reference_impl< T, true, rv > { typedef ::boost::rv<T>& type; };
}

template< class T >
struct add_rvalue_reference
   : detail_add_rvalue_reference::add_rvalue_reference_impl<T>
{ };

template< class T >
struct add_rvalue_reference<T &>
{ typedef T & type; };



template< class T > struct remove_rvalue_reference { typedef T type; };




   template< class T > struct remove_rvalue_reference< rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< volatile rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const volatile rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< volatile rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const volatile rv<T>& >{ typedef T type; };
# 580 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp"
}
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 583 "D:\\my_project\\boost_1_65_1\\boost/move/detail/meta_utils.hpp" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 33 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp" 2
# 313 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
namespace boost {
namespace move_detail {




template<class T>
struct is_reference
{ static const bool value = false; };

template<class T>
struct is_reference<T&>
{ static const bool value = true; };
# 336 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template<class T>
struct is_pointer
{ static const bool value = false; };

template<class T>
struct is_pointer<T*>
{ static const bool value = true; };




template<class T>
struct is_const
{ static const bool value = false; };

template<class T>
struct is_const<const T>
{ static const bool value = true; };




template <typename T> struct unvoid_ref : add_lvalue_reference<T>{};
template <> struct unvoid_ref<void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<const void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<volatile void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<const volatile void> { typedef unvoid_ref & type; };

template <typename T>
struct add_reference : add_lvalue_reference<T>
{};




template <class T>
struct add_const_reference
{ typedef const T &type; };

template <class T>
struct add_const_reference<T&>
{ typedef T& type; };




template<class T, bool Add>
struct add_const_if_c
   : if_c<Add, typename add_const<T>::type, T>
{};




template<class T>
struct remove_const
{ typedef T type; };

template<class T>
struct remove_const< const T>
{ typedef T type; };




template<typename T> struct remove_cv { typedef T type; };
template<typename T> struct remove_cv<const T> { typedef T type; };
template<typename T> struct remove_cv<const volatile T> { typedef T type; };
template<typename T> struct remove_cv<volatile T> { typedef T type; };




template <class T>
struct make_unsigned_impl { typedef T type; };
template <> struct make_unsigned_impl<signed char> { typedef unsigned char type; };
template <> struct make_unsigned_impl<signed short> { typedef unsigned short type; };
template <> struct make_unsigned_impl<signed int> { typedef unsigned int type; };
template <> struct make_unsigned_impl<signed long> { typedef unsigned long type; };

template <> struct make_unsigned_impl< ::boost::long_long_type > { typedef ::boost::ulong_long_type type; };


template <class T>
struct make_unsigned
   : make_unsigned_impl<typename remove_cv<T>::type>
{};




template<class T> struct is_floating_point_cv { static const bool value = false; };
template<> struct is_floating_point_cv<float> { static const bool value = true; };
template<> struct is_floating_point_cv<double> { static const bool value = true; };
template<> struct is_floating_point_cv<long double> { static const bool value = true; };

template<class T>
struct is_floating_point
   : is_floating_point_cv<typename remove_cv<T>::type>
{};




template<class T> struct is_integral_cv { static const bool value = false; };
template<> struct is_integral_cv< bool>{ static const bool value = true; };
template<> struct is_integral_cv< char>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned char>{ static const bool value = true; };
template<> struct is_integral_cv< signed char>{ static const bool value = true; };







template<> struct is_integral_cv< wchar_t>{ static const bool value = true; };

template<> struct is_integral_cv< short>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned short>{ static const bool value = true; };
template<> struct is_integral_cv< int>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned int>{ static const bool value = true; };
template<> struct is_integral_cv< long>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned long>{ static const bool value = true; };

template<> struct is_integral_cv< ::boost:: long_long_type>{ static const bool value = true; };
template<> struct is_integral_cv< ::boost::ulong_long_type>{ static const bool value = true; };


template<class T>
struct is_integral
   : public is_integral_cv<typename remove_cv<T>::type>
{};




template <class T>
struct remove_all_extents
{ typedef T type;};

template <class T>
struct remove_all_extents<T[]>
{ typedef typename remove_all_extents<T>::type type; };

template <class T, std::size_t N>
struct remove_all_extents<T[N]>
{ typedef typename remove_all_extents<T>::type type;};




template<class T>
struct is_scalar
{ static const bool value = is_integral<T>::value || is_floating_point<T>::value; };




template<class T>
struct is_void_cv
{ static const bool value = false; };

template<>
struct is_void_cv<void>
{ static const bool value = true; };

template<class T>
struct is_void
   : is_void_cv<typename remove_cv<T>::type>
{};




template<class T>
struct is_array
{ static const bool value = false; };

template<class T>
struct is_array<T[]>
{ static const bool value = true; };

template<class T, std::size_t N>
struct is_array<T[N]>
{ static const bool value = true; };




template <class T> struct is_member_pointer_cv { static const bool value = false; };
template <class T, class U>struct is_member_pointer_cv<T U::*> { static const bool value = true; };

template <class T>
struct is_member_pointer
    : is_member_pointer_cv<typename remove_cv<T>::type>
{};




template <class T>
struct is_nullptr_t_cv
{ static const bool value = false; };
# 552 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_nullptr_t
   : is_nullptr_t_cv<typename remove_cv<T>::type>
{};
# 564 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_reference_convertible_to_pointer
{
   struct twochar { char dummy[2]; };
   template <class U> static char test(U*);
   template <class U> static twochar test(...);
   static T& source();
   static const bool value = sizeof(char) == sizeof(test<T>(source()));
};





template < class T
         , bool Filter = is_class_or_union<T>::value ||
                         is_void<T>::value ||
                         is_reference<T>::value ||
                         is_nullptr_t<T>::value >
struct is_function_impl
{ static const bool value = is_reference_convertible_to_pointer<T>::value; };

template <class T>
struct is_function_impl<T, true>
{ static const bool value = false; };

template <class T>
struct is_function
   : is_function_impl<T>
{};




template<class T>
struct is_union_noextents_cv
{ static const bool value = false; };

template<class T>
struct is_union
   : is_union_noextents_cv<typename remove_cv<typename remove_all_extents<T>::type>::type>
{};




template <class T>
struct is_class
{
   static const bool value = is_class_or_union<T>::value && ! is_union<T>::value;
};





template <class T>
struct is_arithmetic
{
   static const bool value = is_floating_point<T>::value ||
                             is_integral<T>::value;
};




template <class T>
struct is_member_function_pointer_cv
{
   static const bool value = false;
};

template <class T, class C>
struct is_member_function_pointer_cv<T C::*>
   : is_function<T>
{};

template <class T>
struct is_member_function_pointer
    : is_member_function_pointer_cv<typename remove_cv<T>::type>
{};






template <class T>
struct is_enum_nonintrinsic
{
   static const bool value = !is_arithmetic<T>::value &&
                              !is_reference<T>::value &&
                              !is_class_or_union<T>::value &&
                              !is_array<T>::value &&
                              !is_void<T>::value &&
                              !is_nullptr_t<T>::value &&
                              !is_member_pointer<T>::value &&
                              !is_pointer<T>::value &&
                              !is_function<T>::value;
};


template <class T>
struct is_enum
{ static const bool value = ::boost::move_detail::is_enum_nonintrinsic<T>::value; };




template<class T>
struct is_pod_noextents_cv
{ static const bool value = (::boost::move_detail::is_scalar<T>::value || ::boost::move_detail::is_void<T>::value); };

template<class T>
struct is_pod
   : is_pod_noextents_cv<typename remove_cv<typename remove_all_extents<T>::type>::type>
{};






template <typename T>
struct empty_helper_t1 : public T
{
   empty_helper_t1();
   int i[256];
   private:

   empty_helper_t1(const empty_helper_t1&);
   empty_helper_t1& operator=(const empty_helper_t1&);
};

struct empty_helper_t2 { int i[256]; };

template <typename T, bool IsClass = is_class<T>::value >
struct is_empty_nonintrinsic
{
   static const bool value = false;
};

template <typename T>
struct is_empty_nonintrinsic<T, true>
{
   static const bool value = sizeof(empty_helper_t1<T>) == sizeof(empty_helper_t2);
};


template <class T>
struct is_empty
{ static const bool value = ::boost::move_detail::is_empty_nonintrinsic<T>::value; };


template<class T>
struct has_boost_move_no_copy_constructor_or_assign_type
{
   template <class U>
   static yes_type test(typename U::boost_move_no_copy_constructor_or_assign*);

   template <class U>
   static no_type test(...);

   static const bool value = sizeof(test<T>(0)) == sizeof(yes_type);
};
# 739 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template<class T>
struct is_copy_constructible
{
# 761 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
   static const bool value = !has_boost_move_no_copy_constructor_or_assign_type<T>::value;

};
# 775 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_copy_assignable
{
# 796 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
   static const bool value = !has_boost_move_no_copy_constructor_or_assign_type<T>::value;

};




template<class T>
struct is_trivially_destructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_default_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_copy_constructible
{


   static const bool value = ::boost::move_detail::is_pod<T>::value;
};




template<class T>
struct is_trivially_move_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_copy_assignable
{


   static const bool value = ::boost::move_detail::is_pod<T>::value;
};




template<class T>
struct is_trivially_move_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_default_constructible
   : is_pod<T>
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_copy_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_move_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_copy_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_move_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_swappable
{
   static const bool value = is_empty<T>::value || is_pod<T>::value;
};




template <typename T>
struct alignment_of_hack
{
   T t1;
   char c;
   T t2;
   alignment_of_hack();
};

template <unsigned A, unsigned S>
struct alignment_logic
{ static const std::size_t value = A < S ? A : S; };

template< typename T >
struct alignment_of_impl







   : alignment_logic< sizeof(alignment_of_hack<T>) - 2*sizeof(T), sizeof(T)>
{};




template< typename T >
struct alignment_of
   : alignment_of_impl<T>
{};

class alignment_dummy;
typedef void (*function_ptr)();
typedef int (alignment_dummy::*member_ptr);
typedef int (alignment_dummy::*member_function_ptr)();
struct alignment_struct
{ long double dummy[4]; };





union max_align
{
   char char_;
   short short_;
   int int_;
   long long_;

   ::boost::long_long_type long_long_;

   float float_;
   double double_;
   void * void_ptr_;
   long double long_double_[4];
   alignment_dummy *unknown_class_ptr_;
   function_ptr function_ptr_;
   member_function_ptr member_function_ptr_;
   alignment_struct alignment_struct_;
};

typedef union max_align max_align_t;







template<std::size_t Len, std::size_t Align>
struct aligned_storage_impl;
# 982 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template<std::size_t Len>struct __declspec(align(0x1)) aligned_storage_impl<Len, 0x1>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x1> type;};
template<std::size_t Len>struct __declspec(align(0x2)) aligned_storage_impl<Len, 0x2>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x2> type;};
template<std::size_t Len>struct __declspec(align(0x4)) aligned_storage_impl<Len, 0x4>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x4> type;};
template<std::size_t Len>struct __declspec(align(0x8)) aligned_storage_impl<Len, 0x8>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x8> type;};
template<std::size_t Len>struct __declspec(align(0x10)) aligned_storage_impl<Len, 0x10>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x10> type;};
template<std::size_t Len>struct __declspec(align(0x20)) aligned_storage_impl<Len, 0x20>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x20> type;};
template<std::size_t Len>struct __declspec(align(0x40)) aligned_storage_impl<Len, 0x40>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x40> type;};
template<std::size_t Len>struct __declspec(align(0x80)) aligned_storage_impl<Len, 0x80>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x80> type;};
template<std::size_t Len>struct __declspec(align(0x100)) aligned_storage_impl<Len, 0x100>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x100> type;};
template<std::size_t Len>struct __declspec(align(0x200)) aligned_storage_impl<Len, 0x200>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x200> type;};
template<std::size_t Len>struct __declspec(align(0x400)) aligned_storage_impl<Len, 0x400>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x400> type;};
template<std::size_t Len>struct __declspec(align(0x800)) aligned_storage_impl<Len, 0x800>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x800> type;};
template<std::size_t Len>struct __declspec(align(0x1000)) aligned_storage_impl<Len, 0x1000>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x1000> type;};
# 1049 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp"
template<std::size_t Len, std::size_t Align = alignment_of<max_align_t>::value>
struct aligned_storage
{

   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(Align > 0) >)> boost_static_assert_typedef_1053 ;


   typedef typename aligned_storage_impl<Len ? Len : 1, Align>::type type;
   static const std::size_t value = alignment_of<type>::value;
   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(value >= Align) >)> boost_static_assert_typedef_1058 ;
   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((value % Align) == 0) >)> boost_static_assert_typedef_1059 ;



   private:
   aligned_storage();
};

}
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 1070 "D:\\my_project\\boost_1_65_1\\boost/move/detail/type_traits.hpp" 2
# 58 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp" 2
# 77 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
   namespace boost {






   template <class T>
   class rv
      : public ::boost::move_detail::if_c
         < ::boost::move_detail::is_class<T>::value
         , T
         , ::boost::move_detail::nat
         >::type
   {
      rv();
      ~rv() throw();
      rv(rv const&);
      void operator=(rv const&);
   } ;
# 105 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
   namespace move_detail {

   template <class T>
   struct is_rv


      : integral_constant<bool, ::boost::move_detail::is_rv_impl<T>::value >
   {};

   template <class T>
   struct is_not_rv
   {
      static const bool value = !is_rv<T>::value;
   };

   }






   template<class T>
   struct has_move_emulation_enabled
      : ::boost::move_detail::has_move_emulation_enabled_impl<T>
   {};

   template<class T>
   struct has_move_emulation_disabled
   {
      static const bool value = !::boost::move_detail::has_move_emulation_enabled_impl<T>::value;
   };

   }
# 196 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
   namespace boost {
   namespace move_detail {

   template <class Ret, class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < ::boost::move_detail::is_lvalue_reference<Ret>::value ||
        !::boost::has_move_emulation_enabled<T>::value
      , T&>::type
         move_return(T& x)
   {
      return x;
   }

   template <class Ret, class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < !::boost::move_detail::is_lvalue_reference<Ret>::value &&
         ::boost::has_move_emulation_enabled<T>::value
      , ::boost::rv<T>&>::type
         move_return(T& x)
   {
      return *static_cast< ::boost::rv<T>*>(::boost::move_detail::addressof(x));
   }

   template <class Ret, class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < !::boost::move_detail::is_lvalue_reference<Ret>::value &&
         ::boost::has_move_emulation_enabled<T>::value
      , ::boost::rv<T>&>::type
         move_return(::boost::rv<T>& x)
   {
      return x;
   }

   }
   }
# 282 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
   namespace boost{
   namespace move_detail{

   template< class T>
   struct forward_type
   { typedef const T &type; };

   template< class T>
   struct forward_type< boost::rv<T> >
   { typedef T type; };

   }}
# 500 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 500 "D:\\my_project\\boost_1_65_1\\boost/move/core.hpp" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp" 2






   namespace boost {

   template<class T>
   struct enable_move_utility_emulation
   {
      static const bool value = true;
   };







   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , has_move_emulation_disabled<T>
      >::type
         move(T& x)
   {
      return x;
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , has_move_emulation_enabled<T>
      >::type
         move(T& x)
   {
      return *static_cast< ::boost::rv<T>*>(::boost::move_detail::addressof(x));
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , has_move_emulation_enabled<T>
      >::type
         move(rv<T>& x)
   {
      return x;
   }







   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_rv<T>
      >::type
         forward(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return const_cast<T&>(x);
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < const T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      >::type
         forward(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return x;
   }







   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_rv<T>
      >::type
         move_if_not_lvalue_reference(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return const_cast<T&>(x);
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < typename ::boost::move_detail::add_lvalue_reference<T>::type
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      , ::boost::move_detail::or_
         < ::boost::move_detail::is_lvalue_reference<T>
         , has_move_emulation_disabled<T>
         >
      >::type
         move_if_not_lvalue_reference(typename ::boost::move_detail::remove_reference<T>::type &x)
   {
      return x;
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      , ::boost::move_detail::and_
         < ::boost::move_detail::not_< ::boost::move_detail::is_lvalue_reference<T> >
         , has_move_emulation_enabled<T>
         >
      >::type
         move_if_not_lvalue_reference(typename ::boost::move_detail::remove_reference<T>::type &x)
   {
      return move(x);
   }

   }
# 304 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp"
namespace boost{
namespace move_detail{

template <typename T>
typename boost::move_detail::add_rvalue_reference<T>::type declval();

}
}





# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 316 "D:\\my_project\\boost_1_65_1\\boost/move/utility_core.hpp" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/move/traits.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/move/traits.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_begin.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/move/traits.hpp" 2








namespace boost {
# 44 "D:\\my_project\\boost_1_65_1\\boost/move/traits.hpp"
template <class T>
struct has_trivial_destructor_after_move
   : ::boost::move_detail::is_trivially_destructible<T>
{};





template <class T>
struct has_nothrow_move
{
   static const bool value = boost::move_detail::is_nothrow_move_constructible<T>::value &&
                             boost::move_detail::is_nothrow_move_assignable<T>::value;
};

namespace move_detail {

template <class T>
struct is_nothrow_move_constructible_or_uncopyable
{


   static const bool value = is_nothrow_move_constructible<T>::value ||
                             has_nothrow_move<T>::value ||
                            !is_copy_constructible<T>::value;
};

}
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 75 "D:\\my_project\\boost_1_65_1\\boost/move/traits.hpp" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 2




   namespace boost {







   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && !has_move_emulation_enabled<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(T& x)
   {
      return x;
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && ::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value, rv<T>&>::type
         move_if_noexcept(T& x)
   {
      return *static_cast<rv<T>* >(::boost::move_detail::addressof(x));
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && ::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , rv<T>&
      >::type
         move_if_noexcept(rv<T>& x)
   {
      return x;
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && !::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(T& x)
   {
      return x;
   }

   template <class T>
   __forceinline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && !::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(rv<T>& x)
   {
      return x;
   }

   }
# 148 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/move/detail/config_end.hpp" 1
# 148 "D:\\my_project\\boost_1_65_1\\boost/move/utility.hpp" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 29 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp" 2




namespace boost
{

    namespace detail
    {
      template <typename T>
      struct enable_move_utility_emulation_dummy_specialization;
        template<typename T>
        struct thread_move_t
        {
            T& t;
            explicit thread_move_t(T& t_):
                t(t_)
            {}

            T& operator*() const
            {
                return t;
            }

            T* operator->() const
            {
                return &t;
            }
        private:
            void operator=(thread_move_t&);
        };
    }




    template<typename T>
    typename enable_if<boost::is_convertible<T&,boost::detail::thread_move_t<T> >, boost::detail::thread_move_t<T> >::type move(T& t)
    {
        return boost::detail::thread_move_t<T>(t);
    }


    template<typename T>
    boost::detail::thread_move_t<T> move(boost::detail::thread_move_t<T> t)
    {
        return t;
    }


}
# 190 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
namespace boost
{
namespace detail
{
  template <typename T>
  boost::detail::thread_move_t< typename ::boost::remove_cv<typename ::boost::remove_reference<T>::type>::type >
  make_rv_ref(T v)
  {
    return (boost::detail::thread_move_t< typename ::boost::remove_cv<typename ::boost::remove_reference<T>::type>::type >)(v);
  }
# 212 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
}
}
# 283 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
namespace boost
{
  namespace thread_detail
  {
# 296 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
    template <class T>
    struct is_rv
       : ::boost::integral_constant<bool, false>
    {};

    template <class T>
    struct is_rv< ::boost::detail::thread_move_t<T> >
       : ::boost::integral_constant<bool, true>
    {};

    template <class T>
    struct is_rv< const ::boost::detail::thread_move_t<T> >
       : ::boost::integral_constant<bool, true>
    {};
# 318 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
  template <class Tp>
  struct remove_reference
  {
    typedef Tp type;
  };
  template <class Tp>
  struct remove_reference<Tp&>
  {
    typedef Tp type;
  };
  template <class Tp>
  struct remove_reference< rv<Tp> > {
    typedef Tp type;
  };

  template <class Tp>
  struct decay
  {
  private:
    typedef typename boost::move_detail::remove_rvalue_reference<Tp>::type Up0;
    typedef typename boost::remove_reference<Up0>::type Up;
  public:
      typedef typename conditional
                       <
                           is_array<Up>::value,
                           typename remove_extent<Up>::type*,
                           typename conditional
                           <
                                is_function<Up>::value,
                                typename add_pointer<Up>::type,
                                typename remove_cv<Up>::type
                           >::type
                       >::type type;
  };
# 362 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp"
  template <class T>
  typename decay<T>::type
  decay_copy(const T & t)
  {
      return boost::forward<T>(t);
  }

  }
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 372 "D:\\my_project\\boost_1_65_1\\boost/thread/detail/move.hpp" 2
# 11 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_options.hpp" 1
# 10 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_options.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 10 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_options.hpp" 2


namespace boost
{
  struct defer_lock_t
  {
  };
  struct try_to_lock_t
  {
  };
  struct adopt_lock_t
  {
  };

  const defer_lock_t defer_lock = {};
  const try_to_lock_t try_to_lock = {};
  const adopt_lock_t adopt_lock = {};

}

# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 29 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_options.hpp" 2
# 13 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp" 2




namespace boost
{
  namespace sync
  {
# 34 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp"
    namespace detail
    {
# 70 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp"
      template<typename T, bool=boost::is_class<T>::value> struct has_member_called_lock { static const bool value=false; }; template<typename T> struct has_member_called_lock<T,true> { typedef char true_type; struct false_type { true_type dummy[2]; }; struct fallback { int lock; }; struct derived: T, fallback { derived(); }; template<int fallback::*> struct tester; template<typename U> static false_type has_member(tester<&U::lock>*); template<typename U> static true_type has_member(...); static const bool value=sizeof(has_member<derived>(0))==sizeof(true_type); }
; template<typename T, bool=boost::is_class<T>::value> struct has_member_called_unlock { static const bool value=false; }; template<typename T> struct has_member_called_unlock<T,true> { typedef char true_type; struct false_type { true_type dummy[2]; }; struct fallback { int unlock; }; struct derived: T, fallback { derived(); }; template<int fallback::*> struct tester; template<typename U> static false_type has_member(tester<&U::unlock>*); template<typename U> static true_type has_member(...); static const bool value=sizeof(has_member<derived>(0))==sizeof(true_type); };
      template<typename T, bool=boost::is_class<T>::value> struct has_member_called_try_lock { static const bool value=false; }; template<typename T> struct has_member_called_try_lock<T,true> { typedef char true_type; struct false_type { true_type dummy[2]; }; struct fallback { int try_lock; }; struct derived: T, fallback { derived(); }; template<int fallback::*> struct tester; template<typename U> static false_type has_member(tester<&U::try_lock>*); template<typename U> static true_type has_member(...); static const bool value=sizeof(has_member<derived>(0))==sizeof(true_type); };

      template<typename T,bool=has_member_called_lock<T>::value >
      struct has_member_lock
      {
        static const bool value=false;
      };

      template<typename T>
      struct has_member_lock<T,true>
      {
        typedef char true_type;
        struct false_type
        {
          true_type dummy[2];
        };

        template<typename U,typename V>
        static true_type has_member(V (U::*)());
        template<typename U>
        static false_type has_member(U);

        static const bool value=sizeof(has_member_lock<T>::has_member(&T::lock))==sizeof(true_type);

      };

      template<typename T,bool=has_member_called_unlock<T>::value >
      struct has_member_unlock
      {
        static const bool value=false;
      };

      template<typename T>
      struct has_member_unlock<T,true>
      {
        typedef char true_type;
        struct false_type
        {
          true_type dummy[2];
        };

        template<typename U,typename V>
        static true_type has_member(V (U::*)());
        template<typename U>
        static false_type has_member(U);

        static const bool value=sizeof(has_member_unlock<T>::has_member(&T::unlock))==sizeof(true_type);

      };

      template<typename T,bool=has_member_called_try_lock<T>::value >
      struct has_member_try_lock
      {
        static const bool value=false;
      };

      template<typename T>
      struct has_member_try_lock<T,true>
      {
        typedef char true_type;
        struct false_type
        {
          true_type dummy[2];
        };

        template<typename U>
        static true_type has_member(bool (U::*)());
        template<typename U>
        static false_type has_member(U);

        static const bool value=sizeof(has_member_try_lock<T>::has_member(&T::try_lock))==sizeof(true_type);

      };

    }

    template<typename T>
    struct is_basic_lockable
    {
      static const bool value = detail::has_member_lock<T>::value && detail::has_member_unlock<T>::value;

    };
    template<typename T>
    struct is_lockable
    {
      static const bool value = is_basic_lockable<T>::value && detail::has_member_try_lock<T>::value;


    };
# 175 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp"
    template<typename T>
    struct is_recursive_mutex_sur_parole
    {
      static const bool value = false;
    };
    template<typename T>
    struct is_recursive_mutex_sur_parolle : is_recursive_mutex_sur_parole<T>
    {
    };

    template<typename T>
    struct is_recursive_basic_lockable
    {
      static const bool value = is_basic_lockable<T>::value && is_recursive_mutex_sur_parolle<T>::value;

    };
    template<typename T>
    struct is_recursive_lockable
    {
      static const bool value = is_lockable<T>::value && is_recursive_mutex_sur_parolle<T>::value;

    };
  }
  template<typename T>
  struct is_mutex_type
  {
    static const bool value = sync::is_lockable<T>::value;
  };

}

# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 205 "D:\\my_project\\boost_1_65_1\\boost/thread/lockable_traits.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2







# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2


namespace boost
{
  struct xtime;

  template <typename Mutex>
  class shared_lock;

  template <typename Mutex>
  class upgrade_lock;

  template <typename Mutex>
  class unique_lock;

  namespace detail
  {
    template <typename Mutex>
    class try_lock_wrapper;
  }
# 98 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
  template <typename Mutex>
  class unique_lock
  {
  private:
    Mutex* m;
    bool is_locked;

  private:
    explicit unique_lock(upgrade_lock<Mutex>&);
    unique_lock& operator=(upgrade_lock<Mutex>& other);
  public:
    typedef Mutex mutex_type;
    private: unique_lock(unique_lock&); public: private: unique_lock& operator=(unique_lock&); public: operator ::boost::detail::thread_move_t<unique_lock>() { return move(); } ::boost::detail::thread_move_t<unique_lock> move() { ::boost::detail::thread_move_t<unique_lock> x(*this); return x; } typedef int boost_move_no_copy_constructor_or_assign;






    unique_lock() :
    m(0),is_locked(false)
    {}

    explicit unique_lock(Mutex& m_) :
      m(&m_), is_locked(false)
    {
      lock();
    }
    unique_lock(Mutex& m_, adopt_lock_t) :
      m(&m_), is_locked(true)
    {



    }
    unique_lock(Mutex& m_, defer_lock_t):
    m(&m_),is_locked(false)
    {}
    unique_lock(Mutex& m_, try_to_lock_t) :
      m(&m_), is_locked(false)
    {
      try_lock();
    }

    template<typename TimeDuration>
    unique_lock(Mutex& m_,TimeDuration const& target_time):
    m(&m_),is_locked(false)
    {
      timed_lock(target_time);
    }
    unique_lock(Mutex& m_,system_time const& target_time):
    m(&m_),is_locked(false)
    {
      timed_lock(target_time);
    }


    template <class Clock, class Duration>
    unique_lock(Mutex& mtx, const chrono::time_point<Clock, Duration>& t)
    : m(&mtx), is_locked(mtx.try_lock_until(t))
    {
    }
    template <class Rep, class Period>
    unique_lock(Mutex& mtx, const chrono::duration<Rep, Period>& d)
    : m(&mtx), is_locked(mtx.try_lock_for(d))
    {
    }


    unique_lock(boost::detail::thread_move_t< unique_lock > other) :
    m((*other).m),is_locked((*other).is_locked)
    {
      (*other).is_locked=false;
      (*other).m=0;
    }

                                          unique_lock(boost::detail::thread_move_t< upgrade_lock<Mutex> > other);



    unique_lock& operator=(boost::detail::thread_move_t< upgrade_lock<Mutex> > other)
    {
      unique_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }



    unique_lock& operator=(boost::detail::thread_move_t< unique_lock > other)
    {
      unique_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }
# 204 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
    unique_lock(boost::detail::thread_move_t< upgrade_lock<mutex_type> > ul, try_to_lock_t)
    : m(0),is_locked(false)
    {
      if ((*ul).owns_lock())
      {
        if ((*ul).mutex()->try_unlock_upgrade_and_lock())
        {
          m = (*ul).release();
          is_locked = true;
        }
      }
      else
      {
        m = (*ul).release();
      }
    }


    template <class Clock, class Duration>
    unique_lock(boost::detail::thread_move_t< upgrade_lock<mutex_type> > ul,
        const chrono::time_point<Clock, Duration>& abs_time)
    : m(0),is_locked(false)
    {
      if ((*ul).owns_lock())
      {
        if ((*ul).mutex()->try_unlock_upgrade_and_lock_until(abs_time))
        {
          m = (*ul).release();
          is_locked = true;
        }
      }
      else
      {
        m = (*ul).release();
      }
    }

    template <class Rep, class Period>
    unique_lock(boost::detail::thread_move_t< upgrade_lock<mutex_type> > ul,
        const chrono::duration<Rep, Period>& rel_time)
    : m(0),is_locked(false)
    {
      if ((*ul).owns_lock())
      {
        if ((*ul).mutex()->try_unlock_upgrade_and_lock_for(rel_time))
        {
          m = (*ul).release();
          is_locked = true;
        }
      }
      else
      {
        m = (*ul).release();
      }
    }
# 321 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
    void swap(unique_lock& other)
    {
      std::swap(m,other.m);
      std::swap(is_locked,other.is_locked);
    }

    ~unique_lock()
    {
      if (owns_lock())
      {
        m->unlock();
      }
    }
    void lock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if (owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      m->lock();
      is_locked = true;
    }
    bool try_lock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if (owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked = m->try_lock();
      return is_locked;
    }

    template<typename TimeDuration>
    bool timed_lock(TimeDuration const& relative_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked=m->timed_lock(relative_time);
      return is_locked;
    }

    bool timed_lock(::boost::system_time const& absolute_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked=m->timed_lock(absolute_time);
      return is_locked;
    }
    bool timed_lock(::boost::xtime const& absolute_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked=m->timed_lock(absolute_time);
      return is_locked;
    }



    template <class Rep, class Period>
    bool try_lock_for(const chrono::duration<Rep, Period>& rel_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked=m->try_lock_for(rel_time);
      return is_locked;
    }
    template <class Clock, class Duration>
    bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost unique_lock owns already the mutex"));
      }
      is_locked=m->try_lock_until(abs_time);
      return is_locked;
    }


    void unlock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock has no mutex"));
      }
      if (!owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost unique_lock doesn't own the mutex"));
      }
      m->unlock();
      is_locked = false;
    }


    typedef void (unique_lock::*bool_type)();
    operator bool_type() const
    {
      return is_locked?&unique_lock::lock:0;
    }
    bool operator!() const
    {
      return !owns_lock();
    }






    bool owns_lock() const
    {
      return is_locked;
    }

    Mutex* mutex() const
    {
      return m;
    }

    Mutex* release()
    {
      Mutex* const res=m;
      m=0;
      is_locked=false;
      return res;
    }

    friend class shared_lock<Mutex> ;
    friend class upgrade_lock<Mutex> ;
  };

  template<typename Mutex>
  void swap(unique_lock<Mutex>& lhs, unique_lock<Mutex>& rhs)

  {
    lhs.swap(rhs);
  }

  template <typename Mutex> struct enable_move_utility_emulation< unique_lock<Mutex> > { static const bool value = false; };

  template<typename Mutex>
  class shared_lock
  {
  protected:
    Mutex* m;
    bool is_locked;

  public:
    typedef Mutex mutex_type;
    private: shared_lock(shared_lock&); public: private: shared_lock& operator=(shared_lock&); public: operator ::boost::detail::thread_move_t<shared_lock>() { return move(); } ::boost::detail::thread_move_t<shared_lock> move() { ::boost::detail::thread_move_t<shared_lock> x(*this); return x; } typedef int boost_move_no_copy_constructor_or_assign;

    shared_lock() :
    m(0),is_locked(false)
    {}

    explicit shared_lock(Mutex& m_):
    m(&m_),is_locked(false)
    {
      lock();
    }
    shared_lock(Mutex& m_,adopt_lock_t):
    m(&m_),is_locked(true)
    {



    }
    shared_lock(Mutex& m_,defer_lock_t) :
    m(&m_),is_locked(false)
    {}
    shared_lock(Mutex& m_,try_to_lock_t):
    m(&m_),is_locked(false)
    {
      try_lock();
    }

    shared_lock(Mutex& m_,system_time const& target_time):
    m(&m_),is_locked(false)
    {
      timed_lock(target_time);
    }


    template <class Clock, class Duration>
    shared_lock(Mutex& mtx, const chrono::time_point<Clock, Duration>& t)
    : m(&mtx), is_locked(mtx.try_lock_shared_until(t))
    {
    }
    template <class Rep, class Period>
    shared_lock(Mutex& mtx, const chrono::duration<Rep, Period>& d)
    : m(&mtx), is_locked(mtx.try_lock_shared_for(d))
    {
    }


    shared_lock(boost::detail::thread_move_t< shared_lock<Mutex> > other) :
    m((*other).m),is_locked((*other).is_locked)
    {
      (*other).is_locked=false;
      (*other).m=0;
    }

                                          shared_lock(boost::detail::thread_move_t< unique_lock<Mutex> > other):
    m((*other).m),is_locked((*other).is_locked)
    {
      if(is_locked)
      {
        m->unlock_and_lock_shared();
      }
      (*other).is_locked=false;
      (*other).m=0;
    }

                                          shared_lock(boost::detail::thread_move_t< upgrade_lock<Mutex> > other):
    m((*other).m),is_locked((*other).is_locked)
    {
      if(is_locked)
      {
        m->unlock_upgrade_and_lock_shared();
      }
      (*other).is_locked=false;
      (*other).m=0;
    }


    shared_lock& operator=(boost::detail::thread_move_t< shared_lock<Mutex> > other)
    {
      shared_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }

    shared_lock& operator=(boost::detail::thread_move_t< unique_lock<Mutex> > other)
    {
      shared_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }

    shared_lock& operator=(boost::detail::thread_move_t< upgrade_lock<Mutex> > other)
    {
      shared_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }


    void swap(shared_lock& other)
    {
      std::swap(m,other.m);
      std::swap(is_locked,other.is_locked);
    }

    Mutex* mutex() const
    {
      return m;
    }

    Mutex* release()
    {
      Mutex* const res=m;
      m=0;
      is_locked=false;
      return res;
    }

    ~shared_lock()
    {
      if(owns_lock())
      {
        m->unlock_shared();
      }
    }
    void lock()
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      m->lock_shared();
      is_locked=true;
    }
    bool try_lock()
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      is_locked=m->try_lock_shared();
      return is_locked;
    }

    bool timed_lock(boost::system_time const& target_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      is_locked=m->timed_lock_shared(target_time);
      return is_locked;
    }
    template<typename Duration>
    bool timed_lock(Duration const& target_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      is_locked=m->timed_lock_shared(target_time);
      return is_locked;
    }


    template <class Rep, class Period>
    bool try_lock_for(const chrono::duration<Rep, Period>& rel_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      is_locked=m->try_lock_shared_for(rel_time);
      return is_locked;
    }
    template <class Clock, class Duration>
    bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost shared_lock owns already the mutex"));
      }
      is_locked=m->try_lock_shared_until(abs_time);
      return is_locked;
    }

    void unlock()
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock has no mutex"));
      }
      if(!owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost shared_lock doesn't own the mutex"));
      }
      m->unlock_shared();
      is_locked=false;
    }


    typedef void (shared_lock<Mutex>::*bool_type)();
    operator bool_type() const
    {
      return is_locked?&shared_lock::lock:0;
    }
    bool operator!() const
    {
      return !owns_lock();
    }






    bool owns_lock() const
    {
      return is_locked;
    }

  };

  template <typename Mutex> struct enable_move_utility_emulation< shared_lock<Mutex> > { static const bool value = false; };

  template<typename Mutex>
  void swap(shared_lock<Mutex>& lhs,shared_lock<Mutex>& rhs)
  {
    lhs.swap(rhs);
  }

  template <typename Mutex>
  class upgrade_lock
  {
  protected:
    Mutex* m;
    bool is_locked;

  public:
    typedef Mutex mutex_type;
    private: upgrade_lock(upgrade_lock&); public: private: upgrade_lock& operator=(upgrade_lock&); public: operator ::boost::detail::thread_move_t<upgrade_lock>() { return move(); } ::boost::detail::thread_move_t<upgrade_lock> move() { ::boost::detail::thread_move_t<upgrade_lock> x(*this); return x; } typedef int boost_move_no_copy_constructor_or_assign;

    upgrade_lock():
    m(0),is_locked(false)
    {}

    explicit upgrade_lock(Mutex& m_) :
      m(&m_), is_locked(false)
    {
      lock();
    }
    upgrade_lock(Mutex& m_, adopt_lock_t) :
      m(&m_), is_locked(true)
    {



    }
    upgrade_lock(Mutex& m_, defer_lock_t):
    m(&m_),is_locked(false)
    {}
    upgrade_lock(Mutex& m_, try_to_lock_t) :
      m(&m_), is_locked(false)
    {
      try_lock();
    }


    template <class Clock, class Duration>
    upgrade_lock(Mutex& mtx, const chrono::time_point<Clock, Duration>& t)
    : m(&mtx), is_locked(mtx.try_lock_upgrade_until(t))
    {
    }
    template <class Rep, class Period>
    upgrade_lock(Mutex& mtx, const chrono::duration<Rep, Period>& d)
    : m(&mtx), is_locked(mtx.try_lock_upgrade_for(d))
    {
    }


    upgrade_lock(boost::detail::thread_move_t< upgrade_lock<Mutex> > other) :
    m((*other).m),is_locked((*other).is_locked)
    {
      (*other).is_locked=false;
      (*other).m=0;
    }

                                          upgrade_lock(boost::detail::thread_move_t< unique_lock<Mutex> > other):
    m((*other).m),is_locked((*other).is_locked)
    {
      if(is_locked)
      {
        m->unlock_and_lock_upgrade();
      }
      (*other).is_locked=false;
      (*other).m=0;
    }


    upgrade_lock& operator=(boost::detail::thread_move_t< upgrade_lock<Mutex> > other)
    {
      upgrade_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }


    upgrade_lock& operator=(boost::detail::thread_move_t< unique_lock<Mutex> > other)
    {
      upgrade_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }
# 908 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
    void swap(upgrade_lock& other)
    {
      std::swap(m,other.m);
      std::swap(is_locked,other.is_locked);
    }
    Mutex* mutex() const
    {
      return m;
    }

    Mutex* release()
    {
      Mutex* const res=m;
      m=0;
      is_locked=false;
      return res;
    }
    ~upgrade_lock()
    {
      if (owns_lock())
      {
        m->unlock_upgrade();
      }
    }
    void lock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock has no mutex"));
      }
      if (owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost upgrade_lock owns already the mutex"));
      }
      m->lock_upgrade();
      is_locked = true;
    }
    bool try_lock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock has no mutex"));
      }
      if (owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost upgrade_lock owns already the mutex"));
      }
      is_locked = m->try_lock_upgrade();
      return is_locked;
    }
    void unlock()
    {
      if (m == 0)
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock has no mutex"));
      }
      if (!owns_lock())
      {
        boost::throw_exception(
            boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock doesn't own the mutex"));
      }
      m->unlock_upgrade();
      is_locked = false;
    }

    template <class Rep, class Period>
    bool try_lock_for(const chrono::duration<Rep, Period>& rel_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost upgrade_lock owns already the mutex"));
      }
      is_locked=m->try_lock_upgrade_for(rel_time);
      return is_locked;
    }
    template <class Clock, class Duration>
    bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time)
    {
      if(m==0)
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::operation_not_permitted), "boost upgrade_lock has no mutex"));
      }
      if(owns_lock())
      {
        boost::throw_exception(boost::lock_error(static_cast<int>(system::errc::resource_deadlock_would_occur), "boost upgrade_lock owns already the mutex"));
      }
      is_locked=m->try_lock_upgrade_until(abs_time);
      return is_locked;
    }


    typedef void (upgrade_lock::*bool_type)();
    operator bool_type() const
    {
      return is_locked?&upgrade_lock::lock:0;
    }
    bool operator!() const
    {
      return !owns_lock();
    }






    bool owns_lock() const
    {
      return is_locked;
    }
    friend class shared_lock<Mutex> ;
    friend class unique_lock<Mutex> ;
  };

  template<typename Mutex>
  void swap(upgrade_lock<Mutex>& lhs, upgrade_lock<Mutex>& rhs)

  {
    lhs.swap(rhs);
  }

  template <typename Mutex> struct enable_move_utility_emulation< upgrade_lock<Mutex> > { static const bool value = false; };

  template<typename Mutex>
  unique_lock<Mutex>::unique_lock(boost::detail::thread_move_t< upgrade_lock<Mutex> > other):
  m((*other).m),is_locked((*other).is_locked)
  {
    if(is_locked)
    {
      m->unlock_upgrade_and_lock();
    }
    (*other).release();
  }

  template <class Mutex>
  class upgrade_to_unique_lock
  {
  private:
    upgrade_lock<Mutex>* source;
    unique_lock<Mutex> exclusive;

  public:
    typedef Mutex mutex_type;
    private: upgrade_to_unique_lock(upgrade_to_unique_lock&); public: private: upgrade_to_unique_lock& operator=(upgrade_to_unique_lock&); public: operator ::boost::detail::thread_move_t<upgrade_to_unique_lock>() { return move(); } ::boost::detail::thread_move_t<upgrade_to_unique_lock> move() { ::boost::detail::thread_move_t<upgrade_to_unique_lock> x(*this); return x; } typedef int boost_move_no_copy_constructor_or_assign;

    explicit upgrade_to_unique_lock(upgrade_lock<Mutex>& m_) :
      source(&m_), exclusive(::boost::move(*source))
    {
    }
    ~upgrade_to_unique_lock()
    {
      if (source)
      {
        *source = upgrade_lock<Mutex> (::boost::move(exclusive)).move();
      }
    }

    upgrade_to_unique_lock(boost::detail::thread_move_t< upgrade_to_unique_lock<Mutex> > other) :
    source((*other).source),exclusive(::boost::move((*other).exclusive))
    {
      (*other).source=0;
    }


    upgrade_to_unique_lock& operator=(boost::detail::thread_move_t< upgrade_to_unique_lock<Mutex> > other)
    {
      upgrade_to_unique_lock temp(::boost::move(other));
      swap(temp);
      return *this;
    }

    void swap(upgrade_to_unique_lock& other)
    {
      std::swap(source,other.source);
      exclusive.swap(other.exclusive);
    }


    typedef void (upgrade_to_unique_lock::*bool_type)(upgrade_to_unique_lock&);
    operator bool_type() const
    {
      return exclusive.owns_lock()?&upgrade_to_unique_lock::swap:0;
    }
    bool operator!() const
    {
      return !owns_lock();
    }







    bool owns_lock() const
    {
      return exclusive.owns_lock();
    }
    Mutex* mutex() const
    {
      return exclusive.mutex();
    }
  };

template <typename Mutex> struct enable_move_utility_emulation< upgrade_to_unique_lock<Mutex> > { static const bool value = false; };

namespace detail
{
  template<typename Mutex>
  class try_lock_wrapper:
private unique_lock<Mutex>
  {
    typedef unique_lock<Mutex> base;
  public:
    private: try_lock_wrapper(try_lock_wrapper&); public: private: try_lock_wrapper& operator=(try_lock_wrapper&); public: operator ::boost::detail::thread_move_t<try_lock_wrapper>() { return move(); } ::boost::detail::thread_move_t<try_lock_wrapper> move() { ::boost::detail::thread_move_t<try_lock_wrapper> x(*this); return x; } typedef int boost_move_no_copy_constructor_or_assign;

    try_lock_wrapper()
    {}

    explicit try_lock_wrapper(Mutex& m):
    base(m,try_to_lock)
    {}

    try_lock_wrapper(Mutex& m_,adopt_lock_t):
    base(m_,adopt_lock)
    {



    }
    try_lock_wrapper(Mutex& m_,defer_lock_t):
    base(m_,defer_lock)
    {}
    try_lock_wrapper(Mutex& m_,try_to_lock_t):
    base(m_,try_to_lock)
    {}
# 1164 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp"
    try_lock_wrapper(boost::detail::thread_move_t< try_lock_wrapper > other):
    base(boost::detail::thread_move_t< base >(*other))
    {}

    try_lock_wrapper& operator=(boost::detail::thread_move_t< try_lock_wrapper<Mutex> > other)
    {
      try_lock_wrapper temp(::boost::move(other));
      swap(temp);
      return *this;
    }
    void swap(try_lock_wrapper& other)
    {
      base::swap(other);
    }
    void lock()
    {
      base::lock();
    }
    bool try_lock()
    {
      return base::try_lock();
    }
    void unlock()
    {
      base::unlock();
    }
    bool owns_lock() const
    {
      return base::owns_lock();
    }
    Mutex* mutex() const
    {
      return base::mutex();
    }
    Mutex* release()
    {
      return base::release();
    }


    typedef typename base::bool_type bool_type;
    operator bool_type() const
    {
      return base::operator bool_type();
    }
    bool operator!() const
    {
      return !this->owns_lock();
    }






  };

  template<typename Mutex>
  void swap(try_lock_wrapper<Mutex>& lhs,try_lock_wrapper<Mutex>& rhs)
  {
    lhs.swap(rhs);
  }
}
}

# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 1228 "D:\\my_project\\boost_1_65_1\\boost/thread/lock_types.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/mutex.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_prefix.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/mutex.hpp" 2


namespace boost
{
    namespace detail
    {
        typedef ::boost::detail::basic_timed_mutex underlying_mutex;
    }

    class mutex:
        public ::boost::detail::underlying_mutex
    {
    public:
        private: mutex(mutex&); public: private: mutex& operator=(mutex&); public:
        mutex()
        {
            initialize();
        }
        ~mutex()
        {
            destroy();
        }


        typedef unique_lock<mutex> scoped_lock;
        typedef detail::try_lock_wrapper<mutex> scoped_try_lock;

    };

    typedef mutex try_mutex;

    class timed_mutex:
        public ::boost::detail::basic_timed_mutex
    {
    public:
        private: timed_mutex(timed_mutex&); public: private: timed_mutex& operator=(timed_mutex&); public:
        timed_mutex()
        {
            initialize();
        }

        ~timed_mutex()
        {
            destroy();
        }


        typedef unique_lock<timed_mutex> scoped_timed_lock;
        typedef detail::try_lock_wrapper<timed_mutex> scoped_try_lock;
        typedef scoped_timed_lock scoped_lock;

    };
}


# 1 "D:\\my_project\\boost_1_65_1\\boost/config/abi_suffix.hpp" 1
# 70 "D:\\my_project\\boost_1_65_1\\boost/thread/win32/mutex.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp"
namespace boost
{
  namespace sync
  {
# 50 "D:\\my_project\\boost_1_65_1\\boost/thread/mutex.hpp"
  }
}
# 6 "d:\\my_project\\testsln\\testsln\\testsln.cpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/posix_time.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/time_formatters.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/posix_time/time_formatters.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/formatters.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/formatters.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_formatting.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_formatting.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/iso_format.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/iso_format.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/parse_format_base.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/parse_format_base.hpp"
namespace boost {
namespace date_time {


  enum month_format_spec {month_as_integer, month_as_short_string,
                          month_as_long_string};




  enum ymd_order_spec {ymd_order_iso,
                       ymd_order_dmy,
                       ymd_order_us};


} }
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/iso_format.hpp" 2


namespace boost {
namespace date_time {


template<class charT>
class iso_format_base {
public:

  static month_format_spec month_format()
  {
    return month_as_integer;
  }


  static const charT* not_a_date()
  {
    return "not-a-date-time";
  }

  static const charT* pos_infinity()
  {
    return "+infinity";
  }

  static const charT* neg_infinity()
  {
    return "-infinity";
  }


  static charT year_sep_char()
  {
    return 'Y';
  }

  static charT month_sep_char()
  {
    return '-';
  }

  static charT day_sep_char()
  {
    return '-';
  }

  static charT hour_sep_char()
  {
    return ':';
  }

  static charT minute_sep_char()
  {
    return ':';
  }

  static charT second_sep_char()
  {
    return ':';
  }

  static charT period_start_char()
  {
    return 'P';
  }

  static charT time_start_char()
  {
    return 'T';
  }


  static charT week_start_char()
  {
    return 'W';
  }


  static charT period_sep_char()
  {
    return '/';
  }

  static charT time_sep_char()
  {
    return ':';
  }

  static charT fractional_time_sep_char()
  {
    return ',';
  }

  static bool is_component_sep(charT sep)
  {
    switch(sep) {
    case 'H':
    case 'M':
    case 'S':
    case 'W':
    case 'T':
    case 'Y':
    case 'D':return true;
    default:
      return false;
    }
  }

  static bool is_fractional_time_sep(charT sep)
  {
    switch(sep) {
    case ',':
    case '.': return true;
    default: return false;
    }
  }
  static bool is_timezone_sep(charT sep)
  {
    switch(sep) {
    case '+':
    case '-': return true;
    default: return false;
    }
  }
  static charT element_sep_char()
  {
    return '-';
  }

};




template<>
class iso_format_base<wchar_t> {
public:

  static month_format_spec month_format()
  {
    return month_as_integer;
  }


  static const wchar_t* not_a_date()
  {
    return L"not-a-date-time";
  }

  static const wchar_t* pos_infinity()
  {
    return L"+infinity";
  }

  static const wchar_t* neg_infinity()
  {
    return L"-infinity";
  }


  static wchar_t year_sep_char()
  {
    return 'Y';
  }

  static wchar_t month_sep_char()
  {
    return '-';
  }

  static wchar_t day_sep_char()
  {
    return '-';
  }

  static wchar_t hour_sep_char()
  {
    return ':';
  }

  static wchar_t minute_sep_char()
  {
    return ':';
  }

  static wchar_t second_sep_char()
  {
    return ':';
  }

  static wchar_t period_start_char()
  {
    return 'P';
  }

  static wchar_t time_start_char()
  {
    return 'T';
  }


  static wchar_t week_start_char()
  {
    return 'W';
  }


  static wchar_t period_sep_char()
  {
    return '/';
  }

  static wchar_t time_sep_char()
  {
    return ':';
  }

  static wchar_t fractional_time_sep_char()
  {
    return ',';
  }

  static bool is_component_sep(wchar_t sep)
  {
    switch(sep) {
    case 'H':
    case 'M':
    case 'S':
    case 'W':
    case 'T':
    case 'Y':
    case 'D':return true;
    default:
      return false;
    }
  }

  static bool is_fractional_time_sep(wchar_t sep)
  {
    switch(sep) {
    case ',':
    case '.': return true;
    default: return false;
    }
  }
  static bool is_timezone_sep(wchar_t sep)
  {
    switch(sep) {
    case '+':
    case '-': return true;
    default: return false;
    }
  }
  static wchar_t element_sep_char()
  {
    return '-';
  }

};




template<class charT>
class iso_format : public iso_format_base<charT> {
public:

  static bool has_date_sep_chars()
  {
    return false;
  }
};


template<class charT>
class iso_extended_format : public iso_format_base<charT> {
public:

  static bool has_date_sep_chars()
  {
    return true;
  }

};

} }
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_formatting.hpp" 2




# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iomanip" 1 3
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iomanip" 3
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocmon" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

struct money_base
 : public locale::facet
 {
 enum
  {
  symbol = '$', sign = '+', space = ' ', value = 'v', none = 'x'};
 typedef int part;

 struct pattern
  {
  char field[4];
  };

 money_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }
 };


template<class _Elem>
 class _Mpunct
  : public money_base
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type curr_symbol() const
  {
  return (do_curr_symbol());
  }

 string_type positive_sign() const
  {
  return (do_positive_sign());
  }

 string_type negative_sign() const
  {
  return (do_negative_sign());
  }

 int frac_digits() const
  {
  return (do_frac_digits());
  }

 pattern pos_format() const
  {
  return (do_pos_format());
  }

 pattern neg_format() const
  {
  return (do_neg_format());
  }

 explicit _Mpunct(size_t _Refs, bool _Intl)
  : money_base(_Refs), _International(_Intl)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 _Mpunct(const _Locinfo& _Lobj, size_t _Refs, bool _Intl,
  bool _Isdef = false)
  : money_base(_Refs), _International(_Intl)
  {
  _Init(_Lobj, _Isdef);
  }

protected:
 _Mpunct(const char *_Locname, size_t _Refs,
  bool _Intl, bool _Isdef = false)
  : money_base(_Refs), _International(_Intl)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 virtual ~_Mpunct() noexcept
  {
  _Tidy();
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr)
  {
  _Currencysign = _Maklocstr(_International ? _Ptr->int_curr_symbol : _Ptr->currency_symbol, (_Elem2 *)0, _Cvt);

  _Plussign = _Maklocstr(4 < (unsigned int)_Ptr->p_sign_posn ? "" : _Ptr->positive_sign, (_Elem2 *)0, _Cvt);

  _Minussign = _Maklocstr(4 < (unsigned int)_Ptr->n_sign_posn ? "-" : _Ptr->negative_sign, (_Elem2 *)0, _Cvt);

  _Decimalpoint = _Maklocchr(_Ptr->mon_decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->mon_thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr)
  {
  _Currencysign = (const _Elem *)_Maklocwcs(_International
   ? _Ptr->_W_int_curr_symbol : _Ptr->_W_currency_symbol);
  _Plussign = (const _Elem *)_Maklocwcs(
   4 < (unsigned int)_Ptr->p_sign_posn
    ? L"" : _Ptr->_W_positive_sign);
  _Minussign = (const _Elem *)_Maklocwcs(
   4 < (unsigned int)_Ptr->n_sign_posn
    ? L"-" : _Ptr->_W_negative_sign);
  _Decimalpoint = (_Elem)_Ptr->_W_mon_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_mon_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  _Cvt = _Lobj._Getcvt();
  const lconv *_Ptr = _Lobj._Getlconv();

  _Grouping = 0;
  _Currencysign = 0;
  _Plussign = 0;
  _Minussign = 0;

  try {
  _Grouping = _Maklocstr(_Ptr->mon_grouping, (char *)0, _Cvt);
  _Getvals((_Elem)0, _Ptr);
  } catch (...) {
  _Tidy();
  throw;
  }

  _Fracdigits = _International ? _Ptr->int_frac_digits
   : _Ptr->frac_digits;
  if (_Fracdigits < 0 || 127 <= _Fracdigits)
   _Fracdigits = 0;

  _Makpat(_Plusformat, _Ptr->p_sep_by_space,
   _Ptr->p_cs_precedes, _Ptr->p_sign_posn);
  _Makpat(_Minusformat, _Ptr->n_sep_by_space,
   _Ptr->n_cs_precedes, _Ptr->n_sign_posn);

  if (_Isdef)
   {
   :: memcpy(&_Plusformat, "$+xv", 4);
   :: memcpy(&_Minusformat, "$+xv", 4);
   }
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Decimalpoint);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_curr_symbol() const
  {
  return (string_type(_Currencysign));
  }

 virtual string_type do_positive_sign() const
  {
  return (string_type(_Plussign));
  }

 virtual string_type do_negative_sign() const
  {
  return (string_type(_Minussign));
  }

 virtual int do_frac_digits() const
  {
  return (_Fracdigits);
  }

 virtual pattern do_pos_format() const
  {
  return (_Plusformat);
  }

 virtual pattern do_neg_format() const
  {
  return (_Minusformat);
  }

private:
 void _Makpat(pattern& _Pattern, unsigned int _Sepbyspace,
  unsigned int _Symbolprecedes, unsigned int _Signposition)
  {
  const char *_Ptr = _International || 2 < _Sepbyspace
   || 1 < _Symbolprecedes || 4 < _Signposition
    ? "$+xv"
    : &(
    "+v$x" "+v$x" "v$+x" "v+$x" "v$+x"
    "+$vx" "+$vx" "$v+x" "+$vx" "$+vx"
    "+v $" "+v $" "v $+" "v +$" "v $+"
    "+$ v" "+$ v" "$ v+" "+$ v" "$+ v"
    "+xv$" "+ v$" "v$ +" "v+ $" "v$ +"
    "+x$v" "+ $v" "$v +" "+ $v" "$ +v")
     [_Signposition * 4
     + _Symbolprecedes * 20
     + _Sepbyspace * 40];

  ::memcpy_s((_Pattern.field), (sizeof (_Pattern.field)), (_Ptr), (4));
  }

 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Currencysign);
  :: free((void *)_Plussign);
  :: free((void *)_Minussign);
  }

 const char *_Grouping;
 _Elem _Decimalpoint;
 _Elem _Kseparator;
 const _Elem *_Currencysign;
 const _Elem *_Plussign;
 const _Elem *_Minussign;
 int _Fracdigits;
 pattern _Plusformat;
 pattern _Minusformat;
 bool _International;

 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem,
 bool _Intl = false>
 class moneypunct
  : public _Mpunct<_Elem>
 {
public:
          __declspec(dllimport) static const bool intl;
                         __declspec(dllimport) static locale::id id;

 explicit moneypunct(size_t _Refs = 0)
  : _Mpunct<_Elem>(_Refs, _Intl)
  {
  }

 moneypunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : _Mpunct<_Elem>(_Lobj, _Refs, _Intl, _Isdef)
  {
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new moneypunct<_Elem, _Intl>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (3);
  }

protected:
 moneypunct(const char *_Locname, size_t _Refs = 0)
  : _Mpunct<_Elem>(_Locname, _Refs, _Intl)
  {
  }

 virtual ~moneypunct() noexcept
  {
  }
 };


template<class _Elem,
 bool _Intl>
          const bool moneypunct<_Elem, _Intl>::intl = _Intl;


template<class _Elem,
 bool _Intl>
                         locale::id moneypunct<_Elem, _Intl>::id;


template<class _Elem,
 bool _Intl = false>
 class moneypunct_byname
  : public moneypunct<_Elem, _Intl>
 {
public:
 explicit moneypunct_byname(const char *_Locname, size_t _Refs = 0)
  : moneypunct<_Elem, _Intl>(_Locname, _Refs)
  {
  }

 explicit moneypunct_byname(const string& _Str, size_t _Refs = 0)
  : moneypunct<_Elem, _Intl>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~moneypunct_byname() noexcept
  {
  }
 };


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class money_get
  : public locale::facet
 {
 typedef moneypunct<_Elem, false> _Mypunct0;
 typedef moneypunct<_Elem, true> _Mypunct1;

public:
 typedef _Elem char_type;
 typedef _InIt iter_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _InIt get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   string_type& _Val) const
  {
  return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
  }

                         __declspec(dllimport) static locale::id id;

 explicit money_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 money_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new money_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (3);
  }

protected:
 virtual ~money_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Elem _Atoms[sizeof ("0123456789-")];
  string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Str.size() == 0)
   _State |= ios_base::failbit;
  else
   {
   const char *_Eb = _Str.c_str();
   char *_Ep;
   int _Errno = 0;
   const long double _Ans =
    _Stodx_v2(_Eb, &_Ep, 0, &_Errno);

   if (_Ep == _Eb || _Errno != 0)
    _State |= ios_base::failbit;
   else
    _Val = _Ans;
   }
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   string_type& _Val) const
  {
  _Elem _Atoms[sizeof ("0123456789-")];
  string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);
  size_t _Len = _Str.size();

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Len == 0)
   _State |= ios_base::failbit;
  else
   {
   size_t _Idx = 0;
   _Val.resize(_Len);
   if (_Str[0] == '-')
    _Val[_Idx++] = _Atoms[10];
   for (; _Idx < _Len; ++_Idx)
    _Val[_Idx] = _Atoms[_Str[_Idx] - '0'];
   }
  return (_First);
  }

private:
 string _Getmfld(_InIt& _First, _InIt& _Last,
  bool _Intl, ios_base& _Iosbase, _Elem *_Atoms) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocmon", 463);
  const _Mpunct<_Elem> *_Ppunct_fac;
  if (_Intl)
   _Ppunct_fac =
    &use_facet< _Mypunct1 >(_Iosbase.getloc());
  else
   _Ppunct_fac =
    &use_facet< _Mypunct0 >(_Iosbase.getloc());

  bool _Bad = false, _Neg = false;
  string_type _Sign;
  const money_base::pattern _Pattern = _Ppunct_fac->neg_format();
  string _Val;
  size_t _Idx;
  static const char _Src[] = {"0123456789-"};
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  for (size_t _Off = 0; !_Bad && _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
    {
   case money_base::symbol:
    {
    string_type _Symbol = _Ppunct_fac->curr_symbol();
    typename string_type::const_iterator _Source;

    if (!(_Iosbase.flags() & ios_base::showbase)
     && _First != _Last && *_First != *_Symbol.c_str())
     _Symbol.erase();
    else if (_Off == 3 && _Sign.size() <= 1
     && (_First == _Last || *_First != *_Symbol.c_str()))
     _Symbol.erase();

    for (_Source = _Symbol.begin();
     _First != _Last && _Source != _Symbol.end()
      && *_First == *_Source; ++_Source, (void)++_First)
     ;

    if (_Source != _Symbol.end())
     _Bad = true;
    break;
    }

   case money_base::sign:
    if (_First == _Last)
     ;
    else if (0 < (_Ppunct_fac->positive_sign()).size()
     && _Ppunct_fac->positive_sign()[0] == *_First)
     {
     ++_First;
     _Sign = _Ppunct_fac->positive_sign();
     }
    else if (0 < (_Ppunct_fac->negative_sign()).size()
     && _Ppunct_fac->negative_sign()[0] == *_First)
     {
     ++_First;
     _Sign = _Ppunct_fac->negative_sign();
     _Neg = true;
     }
    else if (0 == (_Ppunct_fac->positive_sign()).size())
     ;
    else if (0 == (_Ppunct_fac->negative_sign()).size())
     _Neg = true;
    break;

   case money_base::value:
    {
    int _Fracdigseen = 0;
    int _Fracdigits = _Ppunct_fac->frac_digits();
    const string _Grouping = _Ppunct_fac->grouping();
    const _Elem _Kseparator = _Grouping.size() == 0
     ? (_Elem)0 : _Ppunct_fac->thousands_sep();

    if (_Kseparator == (_Elem)0
     || 127 <= (unsigned char)*_Grouping.c_str())
     for (; _First != _Last
      && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
      ++_First)
     _Val += _Src[_Idx];
    else
     {
     string _Groups((size_t)1, '\0');
     size_t _Group = 0;

     for (; _First != _Last; ++_First)
      if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
       {
       _Val += _Src[_Idx];
       if (_Groups[_Group] != 127)
        ++_Groups[_Group];
       }
      else if (_Groups[_Group] == '\0'
       || *_First != _Kseparator)
       break;
      else
       {
       _Groups.append((size_t)1, '\0');
       ++_Group;
       }

     if (_Group == 0)
      ;
     else if ('\0' < _Groups[_Group])
      ++_Group;
     else
      _Bad = true;

     for (const char *_Pg = _Grouping.c_str();
      !_Bad && 0 < _Group; )
      if (*_Pg == 127)
       break;
      else if ((0 < --_Group && *_Pg != _Groups[_Group])
       || (0 == _Group && *_Pg < _Groups[_Group]))
       _Bad = true;
      else if ('\0' < _Pg[1])
       ++_Pg;
     if (_Bad)
      break;
     }

    const _Elem _Point = _Ppunct_fac->decimal_point();
    if (_First != _Last
     && _Point != (_Elem)0
     && *_First == _Point)
     {
     while (++_First != _Last
      && _Fracdigseen < _Fracdigits
      && (_Idx = _Find_elem(_Atoms, *_First)) < 10)
      _Val += _Src[_Idx], ++_Fracdigseen;

     if (_Fracdigseen < _Fracdigits)
      _Bad = true;
     }

    if (_Val.size() == 0)
     _Bad = true;
    else
     for (; _Fracdigseen < _Fracdigits; ++_Fracdigseen)
      _Val += '0';
    break;
    }

   case money_base::space:
   case money_base::none:
    {
    if (_Off == 3)
     break;

    bool _Seen = false;

    for (; _First != _Last
     && _Ctype_fac.is(ctype_base::space, *_First); ++_First)
     _Seen = true;
    if (_Pattern.field[_Off] == money_base::space && !_Seen)
     _Bad = true;
    }
    }

  if (!_Bad && 1 < _Sign.size())
   {
   typename string_type::const_iterator _Source;

   for (_Source = _Sign.begin(); ++_Source != _Sign.end()
    && _First != _Last && *_First == *_Source; ++_First)
    ;
   if (_Source != _Sign.end())
    _Bad = true;
   }

  if (_Bad)
   _Val.erase();
  else if (_Neg)
   _Val.insert((size_t)0, (size_t)1, '-');
  return (_Val);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id money_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class money_put
  : public locale::facet
 {
 typedef moneypunct<_Elem, false> _Mypunct0;
 typedef moneypunct<_Elem, true> _Mypunct1;

public:
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _OutIt put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   long double _Val) const
  {
  return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   const string_type& _Val) const
  {
  return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
  }

                         __declspec(dllimport) static locale::id id;

 explicit money_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 money_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new money_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (3);
  }

protected:
 virtual ~money_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual _OutIt do_put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   long double _Val) const
  {
  bool _Negative = false;
  if (_Val < 0)
   _Negative = true, _Val = -_Val;

  size_t _Exp;
  for (_Exp = 0; 1e35 <= _Val && _Exp < 5000; _Exp += 10)
   _Val /= 1e10;

  char _Buf[40];

  int _Count = :: sprintf_s(_Buf, sizeof (_Buf), "%.0Lf",
   _Val);

  if (_Count < 0)
   return (_Dest);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  const _Elem _E0 = _Ctype_fac.widen('0');

  string_type _Val2(_Count, (_Elem)0);
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Val2[0]);
  _Val2.append(_Exp, _E0);
  return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
   _Negative, _Val2, _E0));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   const string_type& _Val) const
  {
  static const char _Src[] = {"0123456789-"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  bool _Negative = false;
  size_t _Idx0 = 0;
  if (!_Val.empty() && _Val[0] == _Atoms[10])
   _Negative = true, ++_Idx0;

  size_t _Size = _Val.size();
  size_t _Idx = _Idx0;
  for (; _Idx < _Size && _Find_elem(_Atoms, _Val[_Idx]) < 10; ++_Idx)
   ;
  string_type _Val2(&_Val[_Idx0], (size_t)(_Idx - _Idx0));
  if (_Val2.empty())
   _Val2.append((size_t)1, _Atoms[0]);

  return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
   _Negative, _Val2, _Atoms[0]));
  }

private:
 _OutIt _Putmfld(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   bool _Neg, string_type _Val, _Elem _E0) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocmon", 772);
  const _Mpunct<_Elem> *_Ppunct_fac;
  if (_Intl)
   _Ppunct_fac =
    &use_facet< _Mypunct1 >(_Iosbase.getloc());
  else
   _Ppunct_fac =
    &use_facet< _Mypunct0 >(_Iosbase.getloc());

  const string _Grouping = _Ppunct_fac->grouping();
  int _Ifracdigits = _Ppunct_fac->frac_digits();
  unsigned int _Fracdigits = _Ifracdigits < 0 ? -_Ifracdigits
   : _Ifracdigits;

  if (_Val.size() <= _Fracdigits)
   _Val.insert((size_t)0, _Fracdigits - _Val.size() + 1, _E0);
  else if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   const _Elem _Kseparator = _Ppunct_fac->thousands_sep();
   const char *_Pg = _Grouping.c_str();
   size_t _Off = _Val.size() - _Fracdigits;

   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off)
    {
    _Val.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  money_base::pattern _Pattern;
  string_type _Sign;
  if (_Neg)
   {
   _Pattern = _Ppunct_fac->neg_format();
   _Sign = _Ppunct_fac->negative_sign();
   }
  else
   {
   _Pattern = _Ppunct_fac->pos_format();
   _Sign = _Ppunct_fac->positive_sign();
   }

  string_type _Symbol;
  if (_Iosbase.flags() & ios_base::showbase)
   _Symbol = _Ppunct_fac->curr_symbol();

  bool _Intern = false;
  size_t _Fillcount, _Off;
  for (_Fillcount = 0, _Off = 0; _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
   {
   case money_base::symbol:
    _Fillcount += _Symbol.size();
    break;

   case money_base::sign:
    _Fillcount += _Sign.size();
    break;

   case money_base::value:
    _Fillcount += _Val.size() + (0 < _Fracdigits ? 1 : 0)
     + (_Val.size() <= _Fracdigits
      ? _Fracdigits - _Val.size() + 1 : 0);
    break;

   case money_base::space:
    ++_Fillcount;


   case money_base::none:
    if (_Off != 3)
     _Intern = true;
    break;
   }

  _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Fillcount
    ? 0 : (size_t)_Iosbase.width() - _Fillcount;

  ios_base::fmtflags _Afl =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Afl != ios_base::left
   && (_Afl != ios_base::internal || !_Intern))
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }

  for (_Off = 0; _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
    {
   case money_base::symbol:
    _Dest = _Put(_Dest, _Symbol.begin(), _Symbol.size());
    break;

   case money_base::sign:
    if (0 < _Sign.size())
     _Dest = _Put(_Dest, _Sign.begin(), 1);
    break;

   case money_base::value:
    if (_Fracdigits == 0)
     _Dest = _Put(_Dest, _Val.begin(),
      _Val.size());
    else if (_Val.size() <= _Fracdigits)
     {
     *_Dest++ = _E0;
     *_Dest++ = _Ppunct_fac->decimal_point();
     _Dest = _Rep(_Dest, _E0,
      _Fracdigits - _Val.size());
     _Dest = _Put(_Dest, _Val.begin(), _Val.size());
     }
    else
     {
     _Dest = _Put(_Dest, _Val.begin(),
      _Val.size() - _Fracdigits);
     *_Dest++ = _Ppunct_fac->decimal_point();
     _Dest = _Put(_Dest, _Val.end() - _Fracdigits,
      _Fracdigits);
     }
    break;

   case money_base::space:
    _Dest = _Rep(_Dest, _Fill, 1);


   case money_base::none:
    if (_Afl == ios_base::internal)
     {
     _Dest = _Rep(_Dest, _Fill, _Fillcount);
     _Fillcount = 0;
     }
    }

  if (1 < _Sign.size())
   _Dest = _Put(_Dest, _Sign.begin() + 1,
    _Sign.size() - 1);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 static _OutIt _Put(_OutIt _Dest,
  typename string_type::const_iterator _Source, size_t _Count)
  {
  for (; 0 < _Count; --_Count, (void)++_Dest, ++_Source)
   *_Dest = *_Source;
  return (_Dest);
  }

 static _OutIt _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count)
  {
  for (; 0 < _Count; --_Count, (void)++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id money_put<_Elem, _OutIt>::id;




template const bool moneypunct<char, true>::intl;
template const bool moneypunct<char, false>::intl;
template locale::id
 moneypunct<char, true>::id;
template locale::id
 moneypunct<char, false>::id;
template locale::id
 money_get<char, istreambuf_iterator<char,
  char_traits<char> > >::id;
template locale::id
 money_put<char, ostreambuf_iterator<char,
  char_traits<char> > >::id;

template const bool moneypunct<wchar_t, true>::intl;
template const bool moneypunct<wchar_t, false>::intl;
template locale::id
 moneypunct<wchar_t, true>::id;
template locale::id
 moneypunct<wchar_t, false>::id;
template locale::id
 money_get<wchar_t, istreambuf_iterator<wchar_t,
  char_traits<wchar_t> > >::id;
template locale::id
 money_put<wchar_t, ostreambuf_iterator<wchar_t,
  char_traits<wchar_t> > >::id;
# 982 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocmon" 3
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iomanip" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

struct __declspec(dllimport) time_base
 : public locale::facet
 {
 enum dateorder
  {
  no_order, dmy, mdy, ymd, ydm};

                    time_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~time_base() noexcept
  {
  }
 };


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_get
  : public time_base
 {
public:
 typedef _Elem char_type;
 typedef _InIt iter_type;
 typedef ctype<_Elem> _Ctype;

                         static locale::id id;

 dateorder date_order() const
  {
  return (do_date_order());
  }

 _InIt get_time(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_time(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_date(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_date(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_weekday(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_weekday(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_monthname(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_monthname(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_year(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_year(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 87);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 88);
  return (do_get(_First, _Last, _Iosbase, _State, _Pt,
   _Specifier, _Modifier));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 97);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 98);
  _Debug_range(_Fmtfirst, _Fmtlast, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 99);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  _State = ios_base::goodbit;

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    {
    if (_Ctype_fac.is(_Ctype::space, *_Fmtfirst))
     for (; _First != _Last
      && _Ctype_fac.is(_Ctype::space, *_First); ++_First)
      ;
    else if (*_First != *_Fmtfirst)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     ++_First;
    }
   else if (++_Fmtfirst == _Fmtlast)
    {
    if (*_First != _Fmtfirst[-1])
     _State |= ios_base::failbit;
    else
     ++_First;
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     if (*_First != _Percent
      || ++_First == _Last
      || _Ctype_fac.narrow(*_First) != _Specifier)
      _State |= ios_base::failbit;
     else
      ++_First;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _First = do_get(_First, _Last, _Iosbase, _State, _Pt,
     _Specifier, _Modifier);
    }
  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 explicit time_get(size_t _Refs = 0)
  : time_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : time_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_get() noexcept
  {
  _Tidy();
  }

                    time_get(const char *_Locname, size_t _Refs = 0)
  : time_base(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  _Days = _Maklocstr(_Lobj._Getdays(), (_Elem *)0, _Cvt);
  _Months = _Maklocstr(_Lobj._Getmonths(), (_Elem *)0, _Cvt);
  _Ampm = _Maklocstr(":AM:am:PM:pm", (_Elem *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  _Days = (const _Elem *)_Maklocwcs(
   (const wchar_t *)_Lobj._W_Getdays());
  _Months = (const _Elem *)_Maklocwcs(
   (const wchar_t *)_Lobj._W_Getmonths());
  _Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Days = 0;
  _Months = 0;
  _Ampm = 0;

  try {
  _Getvals((_Elem)0, _Lobj);

  _Dateorder = (dateorder)_Lobj._Getdateorder();

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 virtual dateorder do_date_order() const
  {
  return (_Dateorder);
  }

 virtual _InIt do_get_time(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 243);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 244);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  _State |= _Getint(_First, _Last, 0, 23,
   _Pt->tm_hour, _Ctype_fac);

  if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
   _State |= ios_base::failbit;
  else
   _State |= _Getint(++_First, _Last, 0, 59,
    _Pt->tm_min, _Ctype_fac);

  if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
   _State |= ios_base::failbit;
  else
   _State |= _Getint(++_First, _Last, 0, 59,
    _Pt->tm_sec, _Ctype_fac);
  return (_First);
  }

 virtual _InIt do_get_date(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 268);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 269);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  dateorder _Dorder = date_order();
  if (_Dorder == no_order)
   _Dorder = mdy;

  if (_First == _Last)
   ;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   {
   _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
   _Dorder = mdy;
   }
  else if (_Dorder == mdy)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else if (_Dorder == dmy)
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
  else
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);

  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First != _Last)
   {
   char _Ch = _Ctype_fac.narrow(*_First);
   if (_Ch == ':' || _Ch == ',' || _Ch == '/')
    ++_First;
   }
  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First == _Last)
   ;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   if (_Dorder == mdy)
    _State |= ios_base::failbit;
   else
    {
    _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
    if (_Dorder == ydm)
     _Dorder = ymd;
    }
  else if (_Dorder == dmy || _Dorder == ymd)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);

  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;
  if (_First != _Last)
   {
   char _Ch = _Ctype_fac.narrow(*_First);
   if (_Ch == ':' || _Ch == ',' || _Ch == '/')
    ++_First;
   }
  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First == _Last)
   _State |= ios_base::failbit;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   if (_Dorder != ydm)
    _State |= ios_base::failbit;
   else
    _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
  else if (_Dorder == ydm)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else if (_Dorder == ymd)
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
  else
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 virtual _InIt do_get_weekday(
  _InIt _First, _InIt _Last,
  ios_base&, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 367);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 368);
  int _Num = _Getloctxt(_First, _Last, (size_t)0, _Days);

  if (_Num < 0)
   _State |= ios_base::failbit;
  else
   _Pt->tm_wday = _Num >> 1;
  return (_First);
  }

 virtual _InIt do_get_monthname(
  _InIt _First, _InIt _Last,
  ios_base&, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 382);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 383);
  int _Num = _Getloctxt(_First, _Last, (size_t)0, _Months);

  if (_Num < 0)
   _State |= ios_base::failbit;
  else
   _Pt->tm_mon = _Num >> 1;
  return (_First);
  }

 virtual _InIt do_get_year(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 397);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 398);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  int _Ans = 0;
  ios_base::iostate _Res = _Getint(_First, _Last, 0, 9999,
   _Ans, _Ctype_fac);

  _State |= _Res;
  if (_Res & ios_base::failbit)
   ;
  else if (_Ans < 69)
   _Pt->tm_year = _Ans + 100;
  else if (_Ans < 100)
   _Pt->tm_year = _Ans;
  else
   _Pt->tm_year = _Ans - 1900;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
  char _Specifier, char = 0) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());
  int _Ans = 0;

  _State = ios_base::goodbit;

  switch (_Specifier)
   {
  case 'a':
  case 'A':
   _First = get_weekday(_First, _Last, _Iosbase, _State, _Pt);
   break;

  case 'b':
  case 'B':
  case 'h':
   _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
   break;

  case 'c':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%b %d %H : %M : %S %Y");
   break;

  case 'C':
   _State |= _Getint(_First, _Last, 0, 99,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_year = _Ans * 100 - 1900;
   break;

  case 'd':
  case 'e':
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
   break;

  case 'D':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%m / %d / %y");
   break;

  case 'H':
   _State |= _Getint(_First, _Last, 0, 23,
    _Pt->tm_hour, _Ctype_fac);
   break;

  case 'I':
   _State |= _Getint(_First, _Last, 1, 12,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_hour = _Ans == 12 ? 0 : _Ans;
   break;

  case 'j':
   _State |= _Getint(_First, _Last, 1, 366,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'm':
   _State |= _Getint(_First, _Last, 1, 12,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_mon = _Ans - 1;
   break;

  case 'M':
   _State |= _Getint(_First, _Last, 0, 59,
    _Pt->tm_min, _Ctype_fac);
   break;

  case 'n':
  case 't':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    " ");
   break;

  case 'p':
   _Ans = _Getloctxt(_First, _Last, (size_t)0, ":AM:am:PM:pm");
   if (_Ans < 0)
    _State |= ios_base::failbit;
   else if (1 < _Ans)
    _Pt->tm_hour += 12;
   break;

  case 'r':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%I : %M : %S %p");
   break;

  case 'R':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%H : %M");
   break;

  case 'S':
   _State |= _Getint(_First, _Last, 0, 60,
    _Pt->tm_sec, _Ctype_fac);
   break;

  case 'T':
  case 'X':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%H : %M : %S");
   break;

  case 'U':
   _State |= _Getint(_First, _Last, 0, 53,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'w':
   _State |= _Getint(_First, _Last, 0, 6,
    _Pt->tm_wday, _Ctype_fac);
   break;

  case 'W':
   _State |= _Getint(_First, _Last, 0, 53,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'x':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%d / %m / %y");
   break;

  case 'y':
   _State |= _Getint(_First, _Last, 0, 99,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_year = _Ans < 69 ? _Ans + 100 : _Ans;
   break;

  case 'Y':
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);
   break;

  default:
   _State |= ios_base::failbit;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 _InIt _Getfmt(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   const char *_Fmtfirst) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; *_Fmtfirst != '\0'; ++_Fmtfirst)
   if (*_Fmtfirst == '%')
    _First = do_get(_First, _Last, _Iosbase, _State, _Pt,
     *++_Fmtfirst);
   else if (*_Fmtfirst == ' ')
    for (; _First != _Last
     && _Ctype_fac.is(_Ctype::space, *_First); ++_First)
     ;
   else if (_Ctype_fac.narrow(*_First) != *_Fmtfirst)
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    ++_First;
  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

private:
 ios_base::iostate __cdecl _Getint(
  _InIt& _First, _InIt& _Last,
  int _Lo, int _Hi, int& _Val,
  const _Ctype& _Ctype_fac) const
  {
  char _Ac[32], *_Ep;
  char *_Ptr = _Ac;
  char _Ch;

  if (_First == _Last)
   ;
  else if ((_Ch = _Ctype_fac.narrow(*_First)) == '+')
   *_Ptr++ = '+', ++_First;
  else if (_Ch == '-')
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  while (_First != _Last && _Ctype_fac.narrow(*_First) == '0')
   _Seendigit = true, ++_First;
  if (_Seendigit)
   *_Ptr++ = '0';

  for (char *const _Pe = &_Ac[32 - 1]; _First != _Last
   && '0' <= (_Ch = _Ctype_fac.narrow(*_First)) && _Ch <= '9';
   _Seendigit = true, ++_First)
   {
   *_Ptr = _Ch;
   if (_Ptr < _Pe)
    ++_Ptr;
   }

  if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep, 10, &_Errno);
  ios_base::iostate _State = ios_base::goodbit;

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0 || _Ans < _Lo || _Hi < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_State);
  }

 void _Tidy()
  {
  :: free((void *)_Days);
  :: free((void *)_Months);
  :: free((void *)_Ampm);
  }

 const _Elem *_Days;
 const _Elem *_Months;
 const _Elem *_Ampm;
 dateorder _Dateorder;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem,
 class _InIt>
                         locale::id time_get<_Elem, _InIt>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_get_byname
  : public time_get<_Elem, _InIt>
 {
public:
 explicit time_get_byname(const char *_Locname, size_t _Refs = 0)
  : time_get<_Elem, _InIt>(_Locname, _Refs)
  {
  }

 explicit time_get_byname(const string& _Str, size_t _Refs = 0)
  : time_get<_Elem, _InIt>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~time_get_byname() noexcept
  {
  }
 };


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_put
  : public locale::facet
 {
public:
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef ctype<_Elem> _Ctype;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 697);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 698);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    *_Dest++ = *_Fmtfirst;
   else if (++_Fmtfirst == _Fmtlast)
    {
    *_Dest++ = _Fmtfirst[-1];
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     *_Dest++ = _Percent;
     *_Dest++ = _Specifier;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
     _Specifier, _Modifier);
    }
  return (_Dest);
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
  char _Specifier, char _Modifier = '\0') const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
  }

                         static locale::id id;

 explicit time_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_put() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Tnames = _Lobj._Gettnames();
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base&, _Elem, const tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 782);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 783);

  char _Fmt[5] = "!%x\0";
  size_t _Count, _Num;
  string _Str;

  if (_Modifier == '\0')
   _Fmt[2] = _Specifier;
  else
   {
   _Fmt[2] = _Modifier;
   _Fmt[3] = _Specifier;
   }

  for (_Num = 16; ; _Num *= 2)
   {
   _Str.append(_Num, '\0');
   if (0 < (_Count = _Strftime(&*_Str.begin(), _Str.size(),
    _Fmt, _Pt, _Tnames._Getptr())))
    break;
   }
  return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
  }

private:
 _Locinfo::_Timevec _Tnames;
 };


template<class _Elem,
 class _OutIt>
                         locale::id time_put<_Elem, _OutIt>::id;



template<class _OutIt>
 class __declspec(dllimport) time_put<wchar_t, _OutIt>
  : public locale::facet
 {
public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef ctype<_Elem> _Ctype;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 832);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 833);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    *_Dest++ = *_Fmtfirst;
   else if (++_Fmtfirst == _Fmtlast)
    {
    *_Dest++ = _Fmtfirst[-1];
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     *_Dest++ = _Percent;
     *_Dest++ = _Specifier;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
     _Specifier, _Modifier);
    }
  return (_Dest);
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
  char _Specifier, char _Modifier = '\0') const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
  }

                         static locale::id id;

 explicit time_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_put() noexcept
  {
  }

                    time_put(const char *_Locname, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Tnames = _Lobj._W_Gettnames();
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base&, _Elem, const tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_pointer(_Dest, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 925);
  _Debug_pointer(_Pt, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime", 926);

  wchar_t _Fmt[5] = L"!%x\0";
  size_t _Count, _Num;
  wstring _Str;

  if (_Modifier == '\0')
   _Fmt[2] = (_Elem)_Specifier;
  else
   {
   _Fmt[2] = (_Elem)_Modifier;
   _Fmt[3] = (_Elem)_Specifier;
   }

  for (_Num = 16; ; _Num *= 2)
   {
   _Str.append(_Num, '\0');
   if (0 < (_Count = _Wcsftime(&*_Str.begin(), _Str.size(),
    _Fmt, _Pt, _Tnames._Getptr())))
    break;
   }
  return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
  }

private:
 _Locinfo::_Timevec _Tnames;
 };


template<class _OutIt>
                         locale::id time_put<wchar_t, _OutIt>::id;
# 1102 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime" 3
template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_put_byname
  : public time_put<_Elem, _OutIt>
 {
public:
 explicit time_put_byname(const char *_Locname, size_t _Refs = 0)
  : time_put<_Elem, _OutIt>(_Locname, _Refs)
  {
  }

 explicit time_put_byname(const string& _Str, size_t _Refs = 0)
  : time_put<_Elem, _OutIt>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~time_put_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) time_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) time_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template class __declspec(dllimport) time_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) time_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1145 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xloctime" 3
}


#pragma warning(pop)
#pragma pack(pop)
# 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iomanip" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 struct _Fillobj
 {
 _Fillobj(_Elem _Ch)
  : _Fill(_Ch)
  {
  }

 _Elem _Fill;
 };


template<class _Elem> inline
 _Fillobj<_Elem> setfill(_Elem _Ch)
 {
 return (_Fillobj<_Elem>(_Ch));
 }

template<class _Elem,
 class _Traits,
 class _Elem2> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>& _Istr,
   const _Fillobj<_Elem2>& _Manip)
 {
 static_assert(is_same<_Elem, _Elem2>::value,
  "wrong character type for setfill");

 _Istr.fill(_Manip._Fill);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Elem2> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Fillobj<_Elem2>& _Manip)
 {
 static_assert(is_same<_Elem, _Elem2>::value,
  "wrong character type for setfill");

 _Ostr.fill(_Manip._Fill);
 return (_Ostr);
 }


template<class _Money>
 struct _Monobj
 {
 _Monobj(_Money& _Val_arg, bool _Intl_arg)
  : _Val(_Val_arg), _Intl(_Intl_arg)
  {
  }

 _Money& _Val;
 bool _Intl;

 private:
  _Monobj& operator=(const _Monobj&);
 };


template<class _Money> inline
 _Monobj<_Money> get_money(_Money& _Val_arg,
  bool _Intl_arg = false)
 {
 return (_Monobj<_Money>(_Val_arg, _Intl_arg));
 }

template<class _Elem,
 class _Traits,
 class _Money> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>& _Istr,
   const _Monobj<_Money>& _Manip)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef money_get<_Elem, _Iter> _Mymget;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Mymget& _Mget_fac = use_facet< _Mymget >(_Istr.getloc());
  try {
  _Mget_fac.get(_Iter(_Istr.rdbuf()), _Iter(0), _Manip._Intl,
   _Istr, _State, _Manip._Val);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }


template<class _Money> inline
 _Monobj<const _Money>
  put_money(const _Money& _Val_arg,
   bool _Intl_arg = false)
 {
 return (_Monobj<const _Money>(_Val_arg, _Intl_arg));
 }

template<class _Elem,
 class _Traits,
 class _Money> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Monobj<_Money>& _Manip)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef money_put<_Elem, _Iter> _Mymput;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const _Mymput& _Mput_fac = use_facet< _Mymput >(_Ostr.getloc());
  try {
  if (_Mput_fac.put(_Iter(_Ostr.rdbuf()), _Manip._Intl,
   _Ostr, _Ostr.fill(), _Manip._Val).failed())
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }


template<class _Elem,
 class _Ptr>
 struct _Timeobj
 {
 _Timeobj(_Ptr _Tptr_arg, const _Elem *_Fmt_arg)
  : _Tptr(_Tptr_arg), _Fmtfirst(_Fmt_arg)
  {
  for (_Fmtlast = _Fmtfirst; *_Fmtlast != 0; ++_Fmtlast)
   ;
  }

 _Ptr _Tptr;
 const _Elem *_Fmtfirst;
 const _Elem *_Fmtlast;
 };


template<class _Elem> inline
 _Timeobj<_Elem, struct tm *>
  get_time(struct tm *_Tptr_arg, const _Elem *_Fmt_arg)
 {
 return (_Timeobj<_Elem, struct tm *>(_Tptr_arg, _Fmt_arg));
 }

template<class _Elem,
 class _Traits,
 class _Elem2> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>& _Istr,
   const _Timeobj<_Elem2, struct tm *>& _Manip)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef time_get<_Elem2, _Iter> _Mytget;

 static_assert(is_same<_Elem, _Elem2>::value,
  "wrong character type for get_time");

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Mytget& _Tget_fac = use_facet< _Mytget >(_Istr.getloc());
  try {
  _Tget_fac.get(_Iter(_Istr.rdbuf()), _Iter(0), _Istr, _State,
   _Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }


template<class _Elem> inline
 _Timeobj<_Elem, const struct tm *>
  put_time(const struct tm *_Tptr_arg, const _Elem *_Fmt_arg)
 {
 return (_Timeobj<_Elem, const struct tm *>(_Tptr_arg, _Fmt_arg));
 }

template<class _Elem,
 class _Traits,
 class _Elem2> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Timeobj<_Elem2, const struct tm *>& _Manip)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef time_put<_Elem2, _Iter> _Mytput;

 static_assert(is_same<_Elem, _Elem2>::value,
  "wrong character type for put_time");

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const _Mytput& _Tput_fac = use_facet< _Mytput >(_Ostr.getloc());
  try {
  if (_Tput_fac.put(_Iter(_Ostr.rdbuf()), _Ostr, _Ostr.fill(),
   _Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast).failed())
   _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc>
 struct _Quote_in
 {
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 _Quote_in(_Mystr& _Str_obj,
  _Elem _Delim_obj, _Elem _Escape_obj)
  : _Str(_Str_obj),
   _Delim(_Delim_obj), _Escape(_Escape_obj)
  {
  }

 _Mystr& _Str;
 _Elem _Delim;
 _Elem _Escape;

 _Quote_in& operator=(const _Quote_in&) = delete;
 };


template<class _Elem,
 class _Traits,
 class _Sizet>
 struct _Quote_out
 {
 _Quote_out(const _Elem *_Ptr_obj, _Sizet _Size_obj,
  _Elem _Delim_obj, _Elem _Escape_obj)
  : _Ptr(_Ptr_obj), _Size(_Size_obj),
   _Delim(_Delim_obj), _Escape(_Escape_obj)
  {
  }

 const _Elem *_Ptr;
 _Sizet _Size;
 _Elem _Delim;
 _Elem _Escape;

 _Quote_out& operator=(const _Quote_out&) = delete;
 };


template<class _Elem> inline
 _Quote_out<_Elem, void, size_t>
  quoted(const _Elem *_Ptr,
   _Elem _Delim = _Elem('"'),
   _Elem _Escape = _Elem('\\'))
 {
 size_t _Size = 0;
 for (; _Ptr[_Size] != _Elem(0); ++_Size)
  ;
 return (_Quote_out<_Elem, void, size_t>(_Ptr, _Size, _Delim, _Escape));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _Quote_out<_Elem, _Traits,
  typename basic_string<_Elem, _Traits, _Alloc>::size_type>
  quoted(const basic_string<_Elem, _Traits, _Alloc>& _Str,
   _Elem _Delim = _Elem('"'),
   _Elem _Escape = _Elem('\\'))
 {
 typedef _Quote_out<_Elem, _Traits,
  typename basic_string<_Elem, _Traits, _Alloc>::size_type> _Qobj;
 return (_Qobj(_Str.c_str(), _Str.size(), _Delim, _Escape));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _Quote_in<_Elem, _Traits, _Alloc>
  quoted(basic_string<_Elem, _Traits, _Alloc>& _Str,
   _Elem _Delim = _Elem('"'),
   _Elem _Escape = _Elem('\\'))
 {
 return (_Quote_in<_Elem, _Traits, _Alloc>(_Str, _Delim, _Escape));
 }


template<class _Elem,
 class _Traits,
 class _QuTraits,
 class _Sizet> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Quote_out<_Elem, _QuTraits, _Sizet>& _Manip)
 {
 static_assert(is_void<_QuTraits>::value
  || is_same<_QuTraits, _Traits>::value,
  "quoted() traits must match basic_ostream traits");

 typedef basic_ostream<_Elem, _Traits> _Myos;

 const _Elem *const _Last = _Manip._Ptr + _Manip._Size;

 _Sizet _Size = _Manip._Size + 2;
 for (const _Elem *_Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr)
  if (_Traits::eq(*_Ptr, _Manip._Delim)
   || _Traits::eq(*_Ptr, _Manip._Escape))
   ++_Size;

 ios_base::iostate _State = ios_base::goodbit;
 _Sizet _Pad = _Ostr.width() <= 0 || (_Sizet)_Ostr.width() <= _Size
  ? 0 : (_Sizet)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Manip._Delim)))
   _State |= ios_base::badbit;

  for (const _Elem *_Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr)
   {
   if ((_Traits::eq(*_Ptr, _Manip._Delim)
    || _Traits::eq(*_Ptr, _Manip._Escape))
    && _State == ios_base::goodbit
    && _Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Manip._Escape)))
    {
    _State |= ios_base::badbit;
    break;
    }
   if (_State == ios_base::goodbit
    && _Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(*_Ptr)))
    {
    _State |= ios_base::badbit;
    break;
    }
   }
  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Manip._Delim)))
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
  const _Quote_in<_Elem, _Traits, _Alloc>& _Manip)
 {
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 const _Mystr& _Ref = _Manip._Str;
 return (_Ostr << ::std:: quoted(_Ref, _Manip._Delim, _Manip._Escape));
 }


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  const _Quote_in<_Elem, _Traits, _Alloc>& _Manip)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Sizet;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 while (_Ok)
  {
  try {
  _Sizet _Size = 0 < _Istr.width()
   && (_Sizet)_Istr.width() < _Manip._Str.max_size()
    ? (_Sizet)_Istr.width() : _Manip._Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();
  typename _Traits::int_type _Delim =
   _Traits::to_int_type(_Manip._Delim);
  typename _Traits::int_type _Escape =
   _Traits::to_int_type(_Manip._Escape);

  if (!_Traits::eq_int_type(_Meta, _Delim))
   return (_Istr >> _Manip._Str);
  _Manip._Str.clear();
  _Meta = _Istr.rdbuf()->snextc();

  for (; !_Traits::eq_int_type(_Meta, _Delim) && 0 < _Size;
   _Meta = _Istr.rdbuf()->snextc(), --_Size)
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (!_Traits::eq_int_type(_Meta, _Escape))
    _Manip._Str.append(1,
     _Traits::to_char_type(_Meta));
   else if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Istr.rdbuf()->snextc()))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else
    _Manip._Str.append(1,
     _Traits::to_char_type(_Meta));

  if (!_Traits::eq_int_type(_Meta, _Delim))
   _State |= ios_base::failbit;
  else
   {
   _Changed = true;
   _Istr.rdbuf()->snextc();
   }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  break;
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }


template<class _Arg>
 struct _Smanip
 {
 _Smanip(void (__cdecl *_Left)(ios_base&, _Arg), _Arg _Val)
  : _Pfun(_Left), _Manarg(_Val)
  {
  }

 void (__cdecl *_Pfun)(ios_base&, _Arg);
 _Arg _Manarg;
 };

template<class _Elem,
 class _Traits,
 class _Arg> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, const _Smanip<_Arg>& _Manip)
 {
 (*_Manip._Pfun)(_Istr, _Manip._Manarg);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Arg> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Smanip<_Arg>& _Manip)
 {
 (*_Manip._Pfun)(_Ostr, _Manip._Manarg);
 return (_Ostr);
 }


__declspec(dllimport) _Smanip<ios_base::fmtflags> __cdecl resetiosflags(ios_base::fmtflags);
__declspec(dllimport) _Smanip<ios_base::fmtflags> __cdecl setiosflags(ios_base::fmtflags);
__declspec(dllimport) _Smanip<int> __cdecl setbase(int);
__declspec(dllimport) _Smanip<streamsize> __cdecl setprecision(streamsize);
__declspec(dllimport) _Smanip<streamsize> __cdecl setw(streamsize);
}

#pragma warning(pop)
#pragma pack(pop)
# 16 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_formatting.hpp" 2







namespace boost {
namespace date_time {


  template<class month_type, class format_type, class charT=char>
  class month_formatter
  {
    typedef std::basic_ostream<charT> ostream_type;
  public:





    static ostream_type& format_month(const month_type& month,
                                      ostream_type &os)
    {
      switch (format_type::month_format())
      {
        case month_as_short_string:
        {
          os << month.as_short_string();
          break;
        }
        case month_as_long_string:
        {
          os << month.as_long_string();
          break;
        }
        case month_as_integer:
        {
          os << std::setw(2) << std::setfill(os.widen('0')) << month.as_number();
          break;
        }
        default:
          break;

      }
      return os;
    }
  };



  template<class ymd_type, class format_type, class charT=char>
  class ymd_formatter
  {
  public:
# 80 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_formatting.hpp"
    static std::basic_string<charT> ymd_to_string(ymd_type ymd)
    {
      typedef typename ymd_type::month_type month_type;
      std::basic_ostringstream<charT> ss;



      ss.imbue(std::locale::classic());
      ss << ymd.year;
      ss.imbue(std::locale());

      if (format_type::has_date_sep_chars()) {
        ss << format_type::month_sep_char();
      }

      month_formatter<month_type,format_type,charT>::format_month(ymd.month, ss);
      if (format_type::has_date_sep_chars()) {
        ss << format_type::day_sep_char();
      }
      ss << std::setw(2) << std::setfill(ss.widen('0'))
          << ymd.day;
      return ss.str();
    }
  };



  template<class date_type, class format_type, class charT=char>
  class date_formatter
  {
  public:
    typedef std::basic_string<charT> string_type;

    static string_type date_to_string(date_type d)
    {
      typedef typename date_type::ymd_type ymd_type;
      if (d.is_not_a_date()) {
        return string_type(format_type::not_a_date());
      }
      if (d.is_neg_infinity()) {
        return string_type(format_type::neg_infinity());
      }
      if (d.is_pos_infinity()) {
        return string_type(format_type::pos_infinity());
      }
      ymd_type ymd = d.year_month_day();
      return ymd_formatter<ymd_type, format_type, charT>::ymd_to_string(ymd);
    }
  };


} }
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/formatters.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_format_simple.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_format_simple.hpp"
namespace boost {
namespace date_time {


template<class charT>
class simple_format {
public:


  static const charT* not_a_date()
  {
    return "not-a-date-time";
  }

  static const charT* pos_infinity()
  {
    return "+infinity";
  }

  static const charT* neg_infinity()
  {
    return "-infinity";
  }

  static month_format_spec month_format()
  {
    return month_as_short_string;
  }
  static ymd_order_spec date_order()
  {
    return ymd_order_iso;
  }

  static bool has_date_sep_chars()
  {
    return true;
  }

  static charT year_sep_char()
  {
    return '-';
  }

  static charT month_sep_char()
  {
    return '-';
  }

  static charT day_sep_char()
  {
    return '-';
  }

  static charT hour_sep_char()
  {
    return ' ';
  }

  static charT minute_sep_char()
  {
    return ':';
  }

  static charT second_sep_char()
  {
    return ':';
  }

};




template<>
class simple_format<wchar_t> {
public:


  static const wchar_t* not_a_date()
  {
    return L"not-a-date-time";
  }

  static const wchar_t* pos_infinity()
  {
    return L"+infinity";
  }

  static const wchar_t* neg_infinity()
  {
    return L"-infinity";
  }

  static month_format_spec month_format()
  {
    return month_as_short_string;
  }
  static ymd_order_spec date_order()
  {
    return ymd_order_iso;
  }

  static bool has_date_sep_chars()
  {
    return true;
  }

  static wchar_t year_sep_char()
  {
    return '-';
  }

  static wchar_t month_sep_char()
  {
    return '-';
  }

  static wchar_t day_sep_char()
  {
    return '-';
  }

  static wchar_t hour_sep_char()
  {
    return ' ';
  }

  static wchar_t minute_sep_char()
  {
    return ':';
  }

  static wchar_t second_sep_char()
  {
    return ':';
  }

};


} }
# 20 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/formatters.hpp" 2







namespace boost {
namespace gregorian {


  template<class charT>
  inline
  std::basic_string<charT> to_simple_string_type(const date& d) {
    return date_time::date_formatter<date,date_time::simple_format<charT>,charT>::date_to_string(d);
  }



  inline std::string to_simple_string(const date& d) {
    return to_simple_string_type<char>(d);
  }



  template<class charT>
  inline std::basic_string<charT> to_simple_string_type(const date_period& d) {
    typedef std::basic_string<charT> string_type;
    charT b = '[', m = '/', e=']';

    string_type d1(date_time::date_formatter<date,date_time::simple_format<charT>,charT>::date_to_string(d.begin()));
    string_type d2(date_time::date_formatter<date,date_time::simple_format<charT>,charT>::date_to_string(d.last()));
    return string_type(b + d1 + m + d2 + e);
  }



  inline std::string to_simple_string(const date_period& d) {
    return to_simple_string_type<char>(d);
  }


  template<class charT>
  inline std::basic_string<charT> to_iso_string_type(const date_period& d) {
    charT sep = '/';
    std::basic_string<charT> s(date_time::date_formatter<date,date_time::iso_format<charT>,charT>::date_to_string(d.begin()));
    return s + sep + date_time::date_formatter<date,date_time::iso_format<charT>,charT>::date_to_string(d.last());
  }



  inline std::string to_iso_string(const date_period& d) {
    return to_iso_string_type<char>(d);
  }



  template<class charT>
  inline std::basic_string<charT> to_iso_extended_string_type(const date& d) {
    return date_time::date_formatter<date,date_time::iso_extended_format<charT>,charT>::date_to_string(d);
  }



  inline std::string to_iso_extended_string(const date& d) {
    return to_iso_extended_string_type<char>(d);
  }


  template<class charT>
  inline std::basic_string<charT> to_iso_string_type(const date& d) {
    return date_time::date_formatter<date,date_time::iso_format<charT>,charT>::date_to_string(d);
  }



  inline std::string to_iso_string(const date& d) {
    return to_iso_string_type<char>(d);
  }





  template<class charT>
  inline std::basic_string<charT> to_sql_string_type(const date& d)
  {
    date::ymd_type ymd = d.year_month_day();
    std::basic_ostringstream<charT> ss;
    ss << ymd.year << "-"
       << std::setw(2) << std::setfill(ss.widen('0'))
       << ymd.month.as_number()
       << "-"
       << std::setw(2) << std::setfill(ss.widen('0'))
       << ymd.day;
    return ss.str();
  }
  inline std::string to_sql_string(const date& d) {
    return to_sql_string_type<char>(d);
  }






  inline std::wstring to_simple_wstring(const date_period& d) {
    return to_simple_string_type<wchar_t>(d);
  }



  inline std::wstring to_simple_wstring(const date& d) {
    return to_simple_string_type<wchar_t>(d);
  }



  inline std::wstring to_iso_wstring(const date_period& d) {
    return to_iso_string_type<wchar_t>(d);
  }



  inline std::wstring to_iso_extended_wstring(const date& d) {
    return to_iso_extended_string_type<wchar_t>(d);
  }



  inline std::wstring to_iso_wstring(const date& d) {
    return to_iso_string_type<wchar_t>(d);
  }
  inline std::wstring to_sql_wstring(const date& d) {
    return to_sql_string_type<wchar_t>(d);
  }


} }
# 25 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_io.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_io.hpp"
# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale" 1 3






# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocbuf" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 6385)

namespace std {

template<class _Codecvt,
 class _Elem = wchar_t,
 class _Traits = char_traits<_Elem> >
 class wbuffer_convert
  : public basic_streambuf<_Elem, _Traits>
 {
 enum _Mode {_Unused, _Wrote, _Need, _Got, _Eof};
 enum {_STRING_INC = 8};
public:
 typedef wbuffer_convert<_Codecvt, _Elem, _Traits> _Myt;
 typedef streambuf _Mysb;
 typedef char_traits<char> _Byte_traits;

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;
 typedef typename _Codecvt::state_type state_type;

 explicit wbuffer_convert(_Mysb *_Strbuf = 0)
  : _State(), _Pcvt(new _Codecvt),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  _Loc = locale(_Loc, _Pcvt);
  }

 wbuffer_convert(_Mysb *_Strbuf, const _Codecvt *_Pcvt_arg)
  : _State(), _Pcvt(_Pcvt_arg),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  _Loc = locale(_Loc, _Pcvt);
  }

 wbuffer_convert(_Mysb *_Strbuf,
  const _Codecvt *_Pcvt_arg, state_type _State_arg)
  : _State(_State_arg), _Pcvt(_Pcvt_arg),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  _Loc = locale(_Loc, _Pcvt);
  }

 virtual ~wbuffer_convert() noexcept
  {
  char *_Buf = (char *)_Str.c_str();

  for (; _Status == _Wrote ; )
   {
   char *_Dest;

   if (_Str.size() < _STRING_INC)
    _Str.assign(_STRING_INC, '\0');
   switch (_Pcvt->unshift(_State,
    _Buf, _Buf + _Str.size(), _Dest))
    {
   case _Codecvt::ok:
    _Status = _Unused;

   case _Codecvt::partial:
    {
    int _Count = (int)(_Dest - _Buf);
    if (0 < _Count
     && _Byte_traits::eq_int_type(
      _Byte_traits::eof(),
      (_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
      _Count)))
     return;

    if (_Status == _Wrote && _Count == 0)
     _Str.append(_STRING_INC, '\0');
    break;
    }

   case _Codecvt::noconv:
    return;

   default:
    return;
    }
   }
  }

 _Mysb *rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb *rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  return (_Oldstrbuf);
  }

 state_type state() const
  {
  return (_State);
  }

 wbuffer_convert(const wbuffer_convert&) = delete;
 wbuffer_convert& operator=(const wbuffer_convert&) = delete;

protected:
 virtual int_type overflow(int_type _Meta = _Traits::eof())
  {
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));
  else if (_Mystrbuf == 0 || 0 < _Nback
   || (_Status != _Unused && _Status != _Wrote))
   return (_Traits::eof());
  else
   {
   char *_Buf = (char *)_Str.c_str();
   const _Elem _Ch = _Traits::to_char_type(_Meta);
   const _Elem *_Src;
   char *_Dest;

   if (_Str.size() < _STRING_INC)
    _Str.assign(_STRING_INC, '\0');
   for (_Status = _Wrote; ; )
    switch (_Pcvt->out(_State,
     &_Ch, &_Ch + 1, _Src,
     _Buf, _Buf + _Str.size(), _Dest))
    {
    case _Codecvt::partial:
    case _Codecvt::ok:
     {
     int _Count = (int)(_Dest - _Buf);
     if (0 < _Count
      && _Byte_traits::eq_int_type(
       _Byte_traits::eof(),
       (_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
       _Count)))
      return (_Traits::eof());

     if (_Src != &_Ch)
      return (_Meta);

     if (0 < _Count)
      ;
     else if (_Str.size() < 4 * _STRING_INC)
      _Str.append(_STRING_INC, '\0');
     else
      return (_Traits::eof());
     break;
     }

    case _Codecvt::noconv:
     if (_Traits::eq_int_type(
      _Traits::eof(),
      (typename _Traits::int_type)_Mystrbuf->sputn(
       (char *)&_Ch,
       (streamsize)sizeof (_Elem))))
      return (_Traits::eof());
     else
      return (_Meta);

    default:
     return (_Traits::eof());
    }
   }
  }

 virtual int_type pbackfail(int_type _Meta = _Traits::eof())
  {
  if (sizeof (_Myback) / sizeof (_Myback[0]) <= _Nback
   || _Status == _Wrote)
   return (_Traits::eof());
  else
   {
   if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
    _Myback[_Nback] = _Traits::to_char_type(_Meta);
   ++_Nback;
   if (_Status == _Unused)
    _Status = _Got;
   return (_Meta);
   }
  }

 virtual int_type underflow()
  {
  int_type _Meta;

  if (0 < _Nback)
   ;
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
   return (_Meta);
  else
   _Myback[_Nback++] = _Traits::to_char_type(_Meta);
  return (_Traits::to_int_type(_Myback[_Nback - 1]));
  }

 virtual int_type uflow()
  {
  int_type _Meta;

  if (0 < _Nback)
   ;
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
   return (_Meta);
  else
   _Myback[_Nback++] = _Traits::to_char_type(_Meta);
  return (_Traits::to_int_type(_Myback[--_Nback]));
  }

 virtual pos_type seekoff(off_type,
  ios::seekdir,
  ios::openmode =
   (ios::openmode)(ios::in | ios::out))
  {
  return (pos_type(-1));
  }

 virtual pos_type seekpos(pos_type,
  ios::openmode =
   (ios::openmode)(ios::in | ios::out))
  {
  return (pos_type(-1));
  }

private:
 int_type _Get_elem()
  {
  if (_Mystrbuf != 0 && _Status != _Wrote)
   {
   if (_Status == _Eof)
    ;
   else if (_Str.size() == 0)
    _Status = _Need;
   else
    _Status = _Got;

   for (; _Status != _Eof; )
    {
    char *_Buf = (char *)_Str.c_str();
    _Elem _Ch, *_Dest;
    const char *_Src;
    int _Meta;

    if (_Status != _Need)
     ;
    else if (_Byte_traits::eq_int_type(_Byte_traits::eof(),
     _Meta = _Mystrbuf->sbumpc()))
     _Status = _Eof;
    else
     _Str.append(1, _Byte_traits::to_char_type(_Meta));

    switch (_Pcvt->in(_State,
     _Buf, _Buf + _Str.size(), _Src,
     &_Ch, &_Ch + 1, _Dest))
     {
    case _Codecvt::partial:
    case _Codecvt::ok:
     _Str.erase((size_t)0,
      (size_t)(_Src - _Buf));
     if (_Dest != &_Ch)
      return (_Traits::to_int_type(_Ch));
     break;

    case _Codecvt::noconv:
     if (_Str.size() < sizeof (_Elem))
      break;
     :: memcpy(&_Ch, _Buf,
      sizeof (_Elem));
     _Str.erase((size_t)0, sizeof (_Elem));
     return (_Traits::to_int_type(_Ch));

    default:
     _Status = _Eof;
     }
    }
   }

  return (_Traits::eof());
  }

 state_type _State;
 const _Codecvt *_Pcvt;
 _Mysb *_Mystrbuf;
 _Mode _Status;
 size_t _Nback;
 _Elem _Myback[8];
 string _Str;
 locale _Loc;
 };


template<class _Codecvt,
 class _Elem = wchar_t,
 class _Walloc = allocator<_Elem>,
 class _Balloc = allocator<char> >
 class wstring_convert
 {
 enum {_BUF_INC = 8, _BUF_MAX = 16};
 void _Init(const _Codecvt *_Pcvt_arg = new _Codecvt)
  {
  _State = state_type{};
  _Pcvt = _Pcvt_arg;
  _Loc = locale(_Loc, _Pcvt);
  _Nconv = 0;
  }

public:
 typedef basic_string<char, char_traits<char>, _Balloc> byte_string;
 typedef basic_string<_Elem, char_traits<_Elem>, _Walloc> wide_string;
 typedef typename _Codecvt::state_type state_type;
 typedef typename wide_string::traits_type::int_type int_type;

 wstring_convert()
  : _Has_berr(false), _Has_werr(false), _Has_state(false)
  {
  _Init();
  }

 explicit wstring_convert(const _Codecvt *_Pcvt_arg)
  : _Has_berr(false), _Has_werr(false), _Has_state(false)
  {
  _Init(_Pcvt_arg);
  }

 wstring_convert(const _Codecvt *_Pcvt_arg, state_type _State_arg)
  : _Has_berr(false), _Has_werr(false), _Has_state(true)
  {
  _Init(_Pcvt_arg);
  _State = _State_arg;
  }

 explicit wstring_convert(const byte_string& _Berr_arg)
  : _Has_berr(true), _Has_werr(false), _Has_state(false),
   _Berr(_Berr_arg)
  {
  _Init();
  }

 wstring_convert(const byte_string& _Berr_arg,
  const wide_string& _Werr_arg)
  : _Has_berr(true), _Has_werr(true), _Has_state(false),
   _Berr(_Berr_arg), _Werr(_Werr_arg)
  {
  _Init();
  }

 virtual ~wstring_convert() noexcept
  {
  }

 size_t converted() const noexcept
  {
  return (_Nconv);
  }

 state_type state() const
  {
  return (_State);
  }

 wide_string from_bytes(char _Byte)
  {
  return (from_bytes(&_Byte, &_Byte + 1));
  }

 wide_string from_bytes(const char *_Ptr)
  {
  return (from_bytes(_Ptr, _Ptr + :: strlen(_Ptr)));
  }

 wide_string from_bytes(const byte_string& _Bstr)
  {
  const char *_Ptr = _Bstr.c_str();
  return (from_bytes(_Ptr, _Ptr + _Bstr.size()));
  }

 wide_string from_bytes(const char *_First, const char *_Last)
  {
  wide_string _Wbuf, _Wstr;
  const char *_First_sav = _First;

  if (!_Has_state)
   _State = state_type{};
  _Wbuf.append((:: size_t)_BUF_INC, (_Elem)'\0');
  for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
   {
   _Elem *_Dest = &*_Wbuf.begin();
   _Elem *_Dnext;

   switch (_Pcvt->in(_State,
    _First, _Last, _First,
    _Dest, _Dest + _Wbuf.size(), _Dnext))
    {
   case _Codecvt::partial:
   case _Codecvt::ok:
    if (_Dest < _Dnext)
     _Wstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
    else if (_Wbuf.size() < _BUF_MAX)
     _Wbuf.append((:: size_t)_BUF_INC, '\0');
    else if (_Has_werr)
     return (_Werr);
    else
     throw range_error("bad conversion");
    break;

   case _Codecvt::noconv:
    for (; _First != _Last; ++_First)
     _Wstr.append((:: size_t)1,
      (_Elem)(unsigned char)*_First);
    break;

   default:
    if (_Has_werr)
     return (_Werr);
    else
     throw range_error("bad conversion");
    }
   }
  return (_Wstr);
  }

 byte_string to_bytes(_Elem _Char)
  {
  return (to_bytes(&_Char, &_Char + 1));
  }

 byte_string to_bytes(const _Elem *_Wptr)
  {
  const _Elem *_Next = _Wptr;
  for (; (int_type)*_Next != 0; ++_Next)
   ;
  return (to_bytes(_Wptr, _Next));
  }

 byte_string to_bytes(const wide_string& _Wstr)
  {
  const _Elem *_Wptr = _Wstr.c_str();
  return (to_bytes(_Wptr, _Wptr + _Wstr.size()));
  }

 byte_string to_bytes(const _Elem *_First, const _Elem *_Last)
  {
  byte_string _Bbuf, _Bstr;
  const _Elem *_First_sav = _First;

  if (!_Has_state)
   _State = state_type{};
  _Bbuf.append((:: size_t)_BUF_INC, '\0');
  for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
   {
   char *_Dest = &*_Bbuf.begin();
   char *_Dnext;

   switch (_Pcvt->out(_State,
    _First, _Last, _First,
    _Dest, _Dest + _Bbuf.size(), _Dnext))
    {
   case _Codecvt::partial:
   case _Codecvt::ok:
    if (_Dest < _Dnext)
     _Bstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
    else if (_Bbuf.size() < _BUF_MAX)
     _Bbuf.append((:: size_t)_BUF_INC, '\0');
    else if (_Has_berr)
     return (_Berr);
    else
     throw range_error("bad conversion");
    break;

   case _Codecvt::noconv:
    for (; _First != _Last; ++_First)
     _Bstr.append((:: size_t)1,
      (char)(int_type)*_First);
    break;

   default:
    if (_Has_berr)
     return (_Berr);
    else
     throw range_error("bad conversion");
    }
   }
  return (_Bstr);
  }

 wstring_convert(const wstring_convert&) = delete;
 wstring_convert& operator=(const wstring_convert&) = delete;

private:
 const _Codecvt *_Pcvt;
 locale _Loc;
 byte_string _Berr;
 wide_string _Werr;
 state_type _State;
 bool _Has_state;
 bool _Has_berr;
 bool _Has_werr;
 size_t _Nconv;
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale" 2 3

# 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xlocmes" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

#pragma warning(push)
#pragma warning(disable: 4275)

struct messages_base
 : public locale::facet
 {
 typedef int catalog;

 explicit messages_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class messages
  : public messages_base
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 catalog open(const string& _Catname, const locale& _Loc) const
  {
  return (do_open(_Catname, _Loc));
  }

 string_type get(catalog _Catval, int _Set, int _Message,
  const string_type& _Dflt) const
  {
  return (do_get(_Catval, _Set, _Message, _Dflt));
  }

 void close(catalog _Catval) const
  {
  do_close(_Catval);
  }

                         __declspec(dllimport) static locale::id id;

 explicit messages(size_t _Refs = 0)
  : messages_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 messages(const _Locinfo& _Lobj, size_t _Refs = 0)
  : messages_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new messages<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (6);
  }

protected:
 messages(const char *_Locname, size_t _Refs = 0)
  : messages_base(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 virtual ~messages() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual catalog do_open(const string&, const locale&) const
  {
  return (-1);
  }

 virtual string_type do_get(catalog, int, int,
  const string_type& _Dflt) const
  {
  return (_Dflt);
  }

 virtual void do_close(catalog) const
  {
  }
 };


template<class _Elem>
                         locale::id messages<_Elem>::id;


template<class _Elem>
 class messages_byname
  : public messages<_Elem>
 {
public:
 explicit messages_byname(const char *_Locname, size_t _Refs = 0)
  : messages<_Elem>(_Locname, _Refs)
  {
  }

 explicit messages_byname(const string& _Str, size_t _Refs = 0)
  : messages<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~messages_byname() noexcept
  {
  }
 };




template locale::id messages<char>::id;
template locale::id messages<wchar_t>::id;






}

#pragma warning(pop)
#pragma pack(pop)
# 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale" 2 3





#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

template<class _Elem>
 class collate
  : public locale::facet
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>,
  allocator<_Elem> > string_type;

 int compare(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2) const
  {
  return (do_compare(_First1, _Last1, _First2, _Last2));
  }

 string_type transform(const _Elem *_First, const _Elem *_Last) const
  {
  return (do_transform(_First, _Last));
  }

 long hash(const _Elem *_First, const _Elem *_Last) const
  {
  return (do_hash(_First, _Last));
  }

                         __declspec(dllimport) static locale::id id;

 explicit collate(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 collate(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new collate<_Elem>(
    _Locinfo(_Ploc->name().c_str()));
  return (1);
  }

protected:
                    ~collate() noexcept
  {
  :: free(_Coll._LocaleName);
  }

protected:
 collate(const char *_Locname, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Coll = _Lobj._Getcoll();
  }

 virtual int do_compare(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2) const
  {
  _Debug_range(_First1, _Last1, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale", 95);
  _Debug_range(_First2, _Last2, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale", 96);
  int _Ans = _LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll);
  return (_Ans < 0 ? -1 : _Ans == 0 ? 0 : +1);
  }

 virtual string_type do_transform(const _Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale", 104);
  size_t _Count;
  string_type _Str;

  for (_Count = _Last - _First; 0 < _Count; )
   {
   _Str.resize(_Count);
   if ((_Count = _LStrxfrm(&*_Str.begin(),
    &*_Str.begin() + _Str.size(),
     _First, _Last, &_Coll)) <= _Str.size())
    break;
   }
  _Str.resize(_Count);
  return (_Str);
  }

 virtual long do_hash(const _Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale", 123);
  return ((long)_Hash_seq((const unsigned char *)_First,
   (_Last - _First) * sizeof (_Elem)));
  }

private:
 _Locinfo::_Collvec _Coll;
 };


template<class _Elem>
                         locale::id collate<_Elem>::id;




template locale::id collate<char>::id;
template locale::id collate<wchar_t>::id;
# 149 "D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\locale" 3
template<class _Elem>
 class collate_byname
  : public collate<_Elem>
 {
public:
 explicit collate_byname(const char *_Locname, size_t _Refs = 0)
  : collate<_Elem>(_Locname, _Refs)
  {
  }

 explicit collate_byname(const string& _Str, size_t _Refs = 0)
  : collate<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~collate_byname() noexcept
  {
  }
 };





template<class _Facet> inline
 bool has_facet(const locale& _Loc) noexcept
 {
 { ::std:: _Lockit _Lock(0);
  size_t _Id = _Facet::id;
  return (_Loc._Getfacet(_Id) != 0
   || _Facet::_Getcat() != (size_t)(-1));
 }
 }


template<class _Elem> inline
 bool (isalnum)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alnum, _Ch));
 }

template<class _Elem> inline
 bool (isalpha)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alpha, _Ch));
 }

template<class _Elem> inline
 bool (isblank)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::blank, _Ch));
 }

template<class _Elem> inline
 bool (iscntrl)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::cntrl, _Ch));
 }

template<class _Elem> inline
 bool (isdigit)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::digit, _Ch));
 }

template<class _Elem> inline
 bool (isgraph)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::graph, _Ch));
 }

template<class _Elem> inline
 bool (islower)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::lower, _Ch));
 }

template<class _Elem> inline
 bool (isprint)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::print, _Ch));
 }

template<class _Elem> inline
 bool (ispunct)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::punct, _Ch));
 }

template<class _Elem> inline
 bool (isspace)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::space, _Ch));
 }

template<class _Elem> inline
 bool (isupper)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::upper, _Ch));
 }

template<class _Elem> inline
 bool (isxdigit)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::xdigit, _Ch));
 }

template<class _Elem> inline
 _Elem (tolower)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).tolower(_Ch));
 }

template<class _Elem> inline
 _Elem (toupper)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).toupper(_Ch));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 12 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_io.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/io/ios_state.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/io/ios_state.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/io_fwd.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/io_fwd.hpp"
namespace boost
{
namespace io
{




class ios_flags_saver;
class ios_precision_saver;
class ios_width_saver;
class ios_base_all_saver;

template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_iostate_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_exception_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_tie_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_rdbuf_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_fill_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_locale_saver;
template < typename Ch, class Tr = ::std::char_traits<Ch> >
    class basic_ios_all_saver;

typedef basic_ios_iostate_saver<char> ios_iostate_saver;
typedef basic_ios_iostate_saver<wchar_t> wios_iostate_saver;
typedef basic_ios_exception_saver<char> ios_exception_saver;
typedef basic_ios_exception_saver<wchar_t> wios_exception_saver;
typedef basic_ios_tie_saver<char> ios_tie_saver;
typedef basic_ios_tie_saver<wchar_t> wios_tie_saver;
typedef basic_ios_rdbuf_saver<char> ios_rdbuf_saver;
typedef basic_ios_rdbuf_saver<wchar_t> wios_rdbuf_saver;
typedef basic_ios_fill_saver<char> ios_fill_saver;
typedef basic_ios_fill_saver<wchar_t> wios_fill_saver;
typedef basic_ios_locale_saver<char> ios_locale_saver;
typedef basic_ios_locale_saver<wchar_t> wios_locale_saver;
typedef basic_ios_all_saver<char> ios_all_saver;
typedef basic_ios_all_saver<wchar_t> wios_all_saver;

class ios_iword_saver;
class ios_pword_saver;
class ios_all_word_saver;


}
}
# 12 "D:\\my_project\\boost_1_65_1\\boost/io/ios_state.hpp" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/io/ios_state.hpp"
namespace boost
{
namespace io
{




class ios_flags_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef ::std::ios_base::fmtflags aspect_type;

    explicit ios_flags_saver( state_type &s )
        : s_save_( s ), a_save_( s.flags() )
        {}
    ios_flags_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.flags(a) )
        {}
    ~ios_flags_saver()
        { this->restore(); }

    void restore()
        { s_save_.flags( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;

    ios_flags_saver& operator=(const ios_flags_saver&);
};

class ios_precision_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef ::std::streamsize aspect_type;

    explicit ios_precision_saver( state_type &s )
        : s_save_( s ), a_save_( s.precision() )
        {}
    ios_precision_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.precision(a) )
        {}
    ~ios_precision_saver()
        { this->restore(); }

    void restore()
        { s_save_.precision( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;

    ios_precision_saver& operator=(const ios_precision_saver&);
};

class ios_width_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef ::std::streamsize aspect_type;

    explicit ios_width_saver( state_type &s )
        : s_save_( s ), a_save_( s.width() )
        {}
    ios_width_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.width(a) )
        {}
    ~ios_width_saver()
        { this->restore(); }

    void restore()
        { s_save_.width( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    ios_width_saver& operator=(const ios_width_saver&);
};




template < typename Ch, class Tr >
class basic_ios_iostate_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef ::std::ios_base::iostate aspect_type;

    explicit basic_ios_iostate_saver( state_type &s )
        : s_save_( s ), a_save_( s.rdstate() )
        {}
    basic_ios_iostate_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.rdstate() )
        { s.clear(a); }
    ~basic_ios_iostate_saver()
        { this->restore(); }

    void restore()
        { s_save_.clear( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_iostate_saver& operator=(const basic_ios_iostate_saver&);
};

template < typename Ch, class Tr >
class basic_ios_exception_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef ::std::ios_base::iostate aspect_type;

    explicit basic_ios_exception_saver( state_type &s )
        : s_save_( s ), a_save_( s.exceptions() )
        {}



    basic_ios_exception_saver( state_type &s, aspect_type const &a )

        : s_save_( s ), a_save_( s.exceptions() )
        { s.exceptions(a); }
    ~basic_ios_exception_saver()
        { this->restore(); }

    void restore()
        { s_save_.exceptions( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_exception_saver& operator=(const basic_ios_exception_saver&);
};

template < typename Ch, class Tr >
class basic_ios_tie_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef ::std::basic_ostream<Ch, Tr> * aspect_type;

    explicit basic_ios_tie_saver( state_type &s )
        : s_save_( s ), a_save_( s.tie() )
        {}
    basic_ios_tie_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.tie(a) )
        {}
    ~basic_ios_tie_saver()
        { this->restore(); }

    void restore()
        { s_save_.tie( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_tie_saver& operator=(const basic_ios_tie_saver&);
};

template < typename Ch, class Tr >
class basic_ios_rdbuf_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef ::std::basic_streambuf<Ch, Tr> * aspect_type;

    explicit basic_ios_rdbuf_saver( state_type &s )
        : s_save_( s ), a_save_( s.rdbuf() )
        {}
    basic_ios_rdbuf_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.rdbuf(a) )
        {}
    ~basic_ios_rdbuf_saver()
        { this->restore(); }

    void restore()
        { s_save_.rdbuf( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_rdbuf_saver& operator=(const basic_ios_rdbuf_saver&);
};

template < typename Ch, class Tr >
class basic_ios_fill_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef typename state_type::char_type aspect_type;

    explicit basic_ios_fill_saver( state_type &s )
        : s_save_( s ), a_save_( s.fill() )
        {}
    basic_ios_fill_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.fill(a) )
        {}
    ~basic_ios_fill_saver()
        { this->restore(); }

    void restore()
        { s_save_.fill( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_fill_saver& operator=(const basic_ios_fill_saver&);
};


template < typename Ch, class Tr >
class basic_ios_locale_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;
    typedef ::std::locale aspect_type;

    explicit basic_ios_locale_saver( state_type &s )
        : s_save_( s ), a_save_( s.getloc() )
        {}
    basic_ios_locale_saver( state_type &s, aspect_type const &a )
        : s_save_( s ), a_save_( s.imbue(a) )
        {}
    ~basic_ios_locale_saver()
        { this->restore(); }

    void restore()
        { s_save_.imbue( a_save_ ); }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    basic_ios_locale_saver& operator=(const basic_ios_locale_saver&);
};





class ios_iword_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef int index_type;
    typedef long aspect_type;

    explicit ios_iword_saver( state_type &s, index_type i )
        : s_save_( s ), a_save_( s.iword(i) ), i_save_( i )
        {}
    ios_iword_saver( state_type &s, index_type i, aspect_type const &a )
        : s_save_( s ), a_save_( s.iword(i) ), i_save_( i )
        { s.iword(i) = a; }
    ~ios_iword_saver()
        { this->restore(); }

    void restore()
        { s_save_.iword( i_save_ ) = a_save_; }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    index_type const i_save_;

    ios_iword_saver& operator=(const ios_iword_saver&);
};

class ios_pword_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef int index_type;
    typedef void * aspect_type;

    explicit ios_pword_saver( state_type &s, index_type i )
        : s_save_( s ), a_save_( s.pword(i) ), i_save_( i )
        {}
    ios_pword_saver( state_type &s, index_type i, aspect_type const &a )
        : s_save_( s ), a_save_( s.pword(i) ), i_save_( i )
        { s.pword(i) = a; }
    ~ios_pword_saver()
        { this->restore(); }

    void restore()
        { s_save_.pword( i_save_ ) = a_save_; }

private:
    state_type & s_save_;
    aspect_type const a_save_;
    index_type const i_save_;

    ios_pword_saver operator=(const ios_pword_saver&);
};




class ios_base_all_saver
{
public:
    typedef ::std::ios_base state_type;

    explicit ios_base_all_saver( state_type &s )
        : s_save_( s ), a1_save_( s.flags() ), a2_save_( s.precision() )
        , a3_save_( s.width() )
        {}

    ~ios_base_all_saver()
        { this->restore(); }

    void restore()
    {
        s_save_.width( a3_save_ );
        s_save_.precision( a2_save_ );
        s_save_.flags( a1_save_ );
    }

private:
    state_type & s_save_;
    state_type::fmtflags const a1_save_;
    ::std::streamsize const a2_save_;
    ::std::streamsize const a3_save_;

    ios_base_all_saver& operator=(const ios_base_all_saver&);
};

template < typename Ch, class Tr >
class basic_ios_all_saver
{
public:
    typedef ::std::basic_ios<Ch, Tr> state_type;

    explicit basic_ios_all_saver( state_type &s )
        : s_save_( s ), a1_save_( s.flags() ), a2_save_( s.precision() )
        , a3_save_( s.width() ), a4_save_( s.rdstate() )
        , a5_save_( s.exceptions() ), a6_save_( s.tie() )
        , a7_save_( s.rdbuf() ), a8_save_( s.fill() )

        , a9_save_( s.getloc() )

        {}

    ~basic_ios_all_saver()
        { this->restore(); }

    void restore()
    {

        s_save_.imbue( a9_save_ );

        s_save_.fill( a8_save_ );
        s_save_.rdbuf( a7_save_ );
        s_save_.tie( a6_save_ );
        s_save_.exceptions( a5_save_ );
        s_save_.clear( a4_save_ );
        s_save_.width( a3_save_ );
        s_save_.precision( a2_save_ );
        s_save_.flags( a1_save_ );
    }

private:
    state_type & s_save_;
    typename state_type::fmtflags const a1_save_;
    ::std::streamsize const a2_save_;
    ::std::streamsize const a3_save_;
    typename state_type::iostate const a4_save_;
    typename state_type::iostate const a5_save_;
    ::std::basic_ostream<Ch, Tr> * const a6_save_;
    ::std::basic_streambuf<Ch, Tr> * const a7_save_;
    typename state_type::char_type const a8_save_;

    ::std::locale const a9_save_;


    basic_ios_all_saver& operator=(const basic_ios_all_saver&);
};

class ios_all_word_saver
{
public:
    typedef ::std::ios_base state_type;
    typedef int index_type;

    ios_all_word_saver( state_type &s, index_type i )
        : s_save_( s ), i_save_( i ), a1_save_( s.iword(i) )
        , a2_save_( s.pword(i) )
        {}

    ~ios_all_word_saver()
        { this->restore(); }

    void restore()
    {
        s_save_.pword( i_save_ ) = a2_save_;
        s_save_.iword( i_save_ ) = a1_save_;
    }

private:
    state_type & s_save_;
    index_type const i_save_;
    long const a1_save_;
    void * const a2_save_;

    ios_all_word_saver& operator=(const ios_all_word_saver&);
};


}
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/date_time/gregorian/gregorian_io.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_facet.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/date_time/date_facet.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/algorithm/string/replace.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/algorithm/string/replace.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/algorithm/string/config.hpp" 1
# 14 "D:\\my_project\\boost_1_65_1\\boost/algorithm/string/replace.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 1
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h" 1
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
 extern "C" {
# 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
}
# 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"
#pragma pack(pop)
# 58 "D:\\my_project\\boost_1_65_1\\boost/assert.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_traits.hpp" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/iterator.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/detail/iterator.hpp"
namespace boost
{

namespace detail
{

using std::iterator_traits;
using std::distance;
# 35 "D:\\my_project\\boost_1_65_1\\boost/detail/iterator.hpp"
}

}
# 8 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_traits.hpp" 2



namespace boost {
namespace iterators {






template <class Iterator>
struct iterator_value
{
    typedef typename boost::detail::iterator_traits<Iterator>::value_type type;
};

template <class Iterator>
struct iterator_reference
{
    typedef typename boost::detail::iterator_traits<Iterator>::reference type;
};


template <class Iterator>
struct iterator_pointer
{
    typedef typename boost::detail::iterator_traits<Iterator>::pointer type;
};

template <class Iterator>
struct iterator_difference
{
    typedef typename boost::detail::iterator_traits<Iterator>::difference_type type;
};

template <class Iterator>
struct iterator_category
{
    typedef typename boost::detail::iterator_traits<Iterator>::iterator_category type;
};

}

using iterators::iterator_value;
using iterators::iterator_reference;
using iterators::iterator_pointer;
using iterators::iterator_difference;
using iterators::iterator_category;

}
# 26 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/iterator.hpp"
namespace boost
{

using std::iterator;

}
# 11 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/interoperable.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/iterator/interoperable.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_def.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/iterator/interoperable.hpp" 2


namespace boost {
namespace iterators {
# 34 "D:\\my_project\\boost_1_65_1\\boost/iterator/interoperable.hpp"
  template <typename A, typename B>
  struct is_interoperable



    : mpl::or_<
          is_convertible< A, B >
        , is_convertible< B, A > >

  {
  };

}

using iterators::is_interoperable;

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_undef.hpp" 1
# 52 "D:\\my_project\\boost_1_65_1\\boost/iterator/interoperable.hpp" 2
# 12 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_def.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/eval_if.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/eval_if.hpp"
namespace boost { namespace mpl {

template<
      typename C = na
    , typename F1 = na
    , typename F2 = na
    >
struct eval_if
# 40 "D:\\my_project\\boost_1_65_1\\boost/mpl/eval_if.hpp"
    : if_<C,F1,F2>::type
{


};



template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c
# 62 "D:\\my_project\\boost_1_65_1\\boost/mpl/eval_if.hpp"
    : if_c<C,F1,F2>::type
{

};

template<> struct eval_if< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : eval_if< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< eval_if< na , na , na > , Tag > { typedef false_ is_le; typedef eval_if< na , na , na > result_; typedef eval_if< na , na , na > type; };

}}
# 15 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/identity.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/identity.hpp"
namespace boost { namespace mpl {

template<
      typename T = na
    >
struct identity
{
    typedef T type;

};

template<
      typename T = na
    >
struct make_identity
{
    typedef identity<T> type;

};

template<> struct identity< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : identity< T1 > { }; }; template< typename Tag > struct lambda< identity< na > , Tag > { typedef false_ is_le; typedef identity< na > result_; typedef identity< na > type; };
template<> struct make_identity< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : make_identity< T1 > { }; }; template< typename Tag > struct lambda< make_identity< na > , Tag > { typedef false_ is_le; typedef make_identity< na > result_; typedef make_identity< na > type; };

}}
# 16 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg_fwd.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg_fwd.hpp"
namespace mpl_ {

template< int N > struct arg;

}
namespace boost { namespace mpl { using ::mpl_::arg; } }
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_assert.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_assert.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/yes_no.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/yes_no.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/arrays.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/yes_no.hpp" 2





namespace boost { namespace mpl { namespace aux {

typedef char (&no_tag)[1];
typedef char (&yes_tag)[2];

template< bool C_ > struct yes_no_tag
{
    typedef no_tag type;
};

template<> struct yes_no_tag<true>
{
    typedef yes_tag type;
};


template< long n > struct weighted_tag
{

    typedef char (&type)[n];




};
# 56 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/yes_no.hpp"
}}}
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp" 2








# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/gpu.hpp" 1
# 28 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/pp_counter.hpp" 1
# 30 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 33 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp" 2
# 66 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp"
namespace mpl_ {

struct failed {};
# 79 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp"
template< bool C > struct assert { typedef void* type; };
template<> struct assert<false> { typedef assert type; };

template< bool C >
int assertion_failed( typename assert<C>::type );

template< bool C >
struct assertion
{
    static int failed( assert<false> );
};

template<>
struct assertion<true>
{
    static int failed( void* );
};

struct assert_
{

    template< typename T1, typename T2 = na, typename T3 = na, typename T4 = na > struct types {};

    static assert_ const arg;
    enum relations { equal = 1, not_equal, greater, greater_equal, less, less_equal };
};




bool operator==( failed, failed );
bool operator!=( failed, failed );
bool operator>( failed, failed );
bool operator>=( failed, failed );
bool operator<( failed, failed );
bool operator<=( failed, failed );





template< long x, long y, bool (*)(failed, failed) >
struct assert_relation {};
# 171 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp"
template< bool > struct assert_arg_pred_impl { typedef int type; };
template<> struct assert_arg_pred_impl<true> { typedef void* type; };

template< typename P > struct assert_arg_pred
{
    typedef typename P::type p_type;
    typedef typename assert_arg_pred_impl< p_type::value >::type type;
};

template< typename P > struct assert_arg_pred_not
{
    typedef typename P::type p_type;
    static const bool p = !p_type::value;
    typedef typename assert_arg_pred_impl<p>::type type;
};

template< typename Pred >
failed ************ (Pred::************
      assert_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type )
    );

template< typename Pred >
failed ************ (boost::mpl::not_<Pred>::************
      assert_not_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type )
    );

template< typename Pred >
assert<false>
assert_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type );

template< typename Pred >
assert<false>
assert_not_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type );
# 246 "D:\\my_project\\boost_1_65_1\\boost/mpl/assert.hpp"
}
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/na_assert.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/arity_spec.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/arg_typedef.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/arg.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/arg.hpp"
namespace mpl_ {
template<> struct arg< -1 >
{
    static const int value = -1;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_27 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<1>
{
    static const int value = 1;
    typedef arg<2> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_45 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<2>
{
    static const int value = 2;
    typedef arg<3> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U2 type;
        static const std::size_t mpl_assertion_in_line_63 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<3>
{
    static const int value = 3;
    typedef arg<4> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U3 type;
        static const std::size_t mpl_assertion_in_line_81 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<4>
{
    static const int value = 4;
    typedef arg<5> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U4 type;
        static const std::size_t mpl_assertion_in_line_99 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<5>
{
    static const int value = 5;
    typedef arg<6> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U5 type;
        static const std::size_t mpl_assertion_in_line_117 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};



}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp"
namespace mpl_ {
typedef arg< -1 > _;
}
namespace boost { namespace mpl {

using ::mpl_::_;

namespace placeholders {
using mpl_::_;
}

}}



namespace mpl_ {
typedef arg<1> _1;

}
namespace boost { namespace mpl {

using ::mpl_::_1;

namespace placeholders {
using mpl_::_1;
}

}}
namespace mpl_ {
typedef arg<2> _2;

}
namespace boost { namespace mpl {

using ::mpl_::_2;

namespace placeholders {
using mpl_::_2;
}

}}
namespace mpl_ {
typedef arg<3> _3;

}
namespace boost { namespace mpl {

using ::mpl_::_3;

namespace placeholders {
using mpl_::_3;
}

}}
namespace mpl_ {
typedef arg<4> _4;

}
namespace boost { namespace mpl {

using ::mpl_::_4;

namespace placeholders {
using mpl_::_4;
}

}}
namespace mpl_ {
typedef arg<5> _5;

}
namespace boost { namespace mpl {

using ::mpl_::_5;

namespace placeholders {
using mpl_::_5;
}

}}
namespace mpl_ {
typedef arg<6> _6;

}
namespace boost { namespace mpl {

using ::mpl_::_6;

namespace placeholders {
using mpl_::_6;
}

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 2







namespace boost {
namespace iterators {





struct no_traversal_tag {};

struct incrementable_traversal_tag
  : no_traversal_tag
{


};

struct single_pass_traversal_tag
  : incrementable_traversal_tag
{


};

struct forward_traversal_tag
  : single_pass_traversal_tag
{


};

struct bidirectional_traversal_tag
  : forward_traversal_tag
{


};

struct random_access_traversal_tag
  : bidirectional_traversal_tag
{


};

namespace detail
{






  template <class Cat>
  struct old_category_to_traversal
    : mpl::eval_if<
          is_convertible<Cat,std::random_access_iterator_tag>
        , mpl::identity<random_access_traversal_tag>
        , mpl::eval_if<
              is_convertible<Cat,std::bidirectional_iterator_tag>
            , mpl::identity<bidirectional_traversal_tag>
            , mpl::eval_if<
                  is_convertible<Cat,std::forward_iterator_tag>
                , mpl::identity<forward_traversal_tag>
                , mpl::eval_if<
                      is_convertible<Cat,std::input_iterator_tag>
                    , mpl::identity<single_pass_traversal_tag>
                    , mpl::eval_if<
                          is_convertible<Cat,std::output_iterator_tag>
                        , mpl::identity<incrementable_traversal_tag>
                        , void
                      >
                  >
              >
          >
      >
  {};

}




template <class Cat>
struct iterator_category_to_traversal
  : mpl::eval_if<
        is_convertible<Cat,incrementable_traversal_tag>
      , mpl::identity<Cat>
      , boost::iterators::detail::old_category_to_traversal<Cat>
    >
{};


template <class Iterator = mpl::_1>
struct iterator_traversal
  : iterator_category_to_traversal<
        typename boost::detail::iterator_traits<Iterator>::iterator_category
    >
{};
# 145 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp"
template <class Traversal>
struct pure_traversal_tag
  : mpl::eval_if<
        is_convertible<Traversal,random_access_traversal_tag>
      , mpl::identity<random_access_traversal_tag>
      , mpl::eval_if<
            is_convertible<Traversal,bidirectional_traversal_tag>
          , mpl::identity<bidirectional_traversal_tag>
          , mpl::eval_if<
                is_convertible<Traversal,forward_traversal_tag>
              , mpl::identity<forward_traversal_tag>
              , mpl::eval_if<
                    is_convertible<Traversal,single_pass_traversal_tag>
                  , mpl::identity<single_pass_traversal_tag>
                  , mpl::eval_if<
                        is_convertible<Traversal,incrementable_traversal_tag>
                      , mpl::identity<incrementable_traversal_tag>
                      , void
                    >
                >
            >
        >
    >
{
};




template <class Iterator = mpl::_1>
struct pure_iterator_traversal
  : pure_traversal_tag<typename iterator_traversal<Iterator>::type>
{};
# 193 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp"
}

using iterators::no_traversal_tag;
using iterators::incrementable_traversal_tag;
using iterators::single_pass_traversal_tag;
using iterators::forward_traversal_tag;
using iterators::bidirectional_traversal_tag;
using iterators::random_access_traversal_tag;
using iterators::iterator_category_to_traversal;
using iterators::iterator_traversal;




namespace detail {
using iterators::pure_traversal_tag;
}

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_undef.hpp" 1
# 213 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_categories.hpp" 2
# 14 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_def.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/detail/indirect_traits.hpp" 1
# 29 "D:\\my_project\\boost_1_65_1\\boost/detail/indirect_traits.hpp"
namespace boost { namespace detail {

namespace indirect_traits {

template <class T>
struct is_reference_to_const : mpl::false_
{
};

template <class T>
struct is_reference_to_const<T const&> : mpl::true_
{
};
# 50 "D:\\my_project\\boost_1_65_1\\boost/detail/indirect_traits.hpp"
template <class T>
struct is_reference_to_function : mpl::false_
{
};

template <class T>
struct is_reference_to_function<T&> : is_function<T>
{
};

template <class T>
struct is_pointer_to_function : mpl::false_
{
};



template <class T>
struct is_pointer_to_function<T*> : is_function<T>
{
};

template <class T>
struct is_reference_to_member_function_pointer_impl : mpl::false_
{
};

template <class T>
struct is_reference_to_member_function_pointer_impl<T&>
    : is_member_function_pointer<typename remove_cv<T>::type>
{
};


template <class T>
struct is_reference_to_member_function_pointer
    : is_reference_to_member_function_pointer_impl<T>
{

};

template <class T>
struct is_reference_to_function_pointer_aux
    : mpl::and_<
          is_reference<T>
        , is_pointer_to_function<
              typename remove_cv<
                  typename remove_reference<T>::type
              >::type
          >
      >
{

};

template <class T>
struct is_reference_to_function_pointer
    : mpl::if_<
          is_reference_to_function<T>
        , mpl::false_
        , is_reference_to_function_pointer_aux<T>
     >::type
{
};

template <class T>
struct is_reference_to_non_const
    : mpl::and_<
          is_reference<T>
        , mpl::not_<
             is_reference_to_const<T>
          >
      >
{
};

template <class T>
struct is_reference_to_volatile : mpl::false_
{
};

template <class T>
struct is_reference_to_volatile<T volatile&> : mpl::true_
{
};
# 144 "D:\\my_project\\boost_1_65_1\\boost/detail/indirect_traits.hpp"
template <class T>
struct is_reference_to_pointer : mpl::false_
{
};

template <class T>
struct is_reference_to_pointer<T*&> : mpl::true_
{
};

template <class T>
struct is_reference_to_pointer<T* const&> : mpl::true_
{
};

template <class T>
struct is_reference_to_pointer<T* volatile&> : mpl::true_
{
};

template <class T>
struct is_reference_to_pointer<T* const volatile&> : mpl::true_
{
};

template <class T>
struct is_reference_to_class
    : mpl::and_<
          is_reference<T>
        , is_class<
              typename remove_cv<
                  typename remove_reference<T>::type
              >::type
          >
      >
{

};

template <class T>
struct is_pointer_to_class
    : mpl::and_<
          is_pointer<T>
        , is_class<
              typename remove_cv<
                  typename remove_pointer<T>::type
              >::type
          >
      >
{

};


}

using namespace indirect_traits;

}}
# 26 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp" 2







namespace boost {
namespace iterators {


struct use_default;

namespace detail {

struct input_output_iterator_tag
  : std::input_iterator_tag
{






    operator std::output_iterator_tag() const
    {
        return std::output_iterator_tag();
    }
};






template <class ValueParam, class Reference>
struct iterator_writability_disabled

  : mpl::or_<
        is_const<Reference>
      , boost::detail::indirect_traits::is_reference_to_const<Reference>
      , is_const<ValueParam>
    >



{};
# 83 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp"
template <class Traversal, class ValueParam, class Reference>
struct iterator_facade_default_category
  : mpl::eval_if<
        mpl::and_<
            is_reference<Reference>
          , is_convertible<Traversal,forward_traversal_tag>
        >
      , mpl::eval_if<
            is_convertible<Traversal,random_access_traversal_tag>
          , mpl::identity<std::random_access_iterator_tag>
          , mpl::if_<
                is_convertible<Traversal,bidirectional_traversal_tag>
              , std::bidirectional_iterator_tag
              , std::forward_iterator_tag
            >
        >
      , typename mpl::eval_if<
            mpl::and_<
                is_convertible<Traversal, single_pass_traversal_tag>


              , is_convertible<Reference, ValueParam>
            >
          , mpl::identity<std::input_iterator_tag>
          , mpl::identity<Traversal>
        >
    >
{
};


template <class T>
struct is_iterator_category
  : mpl::or_<
        is_convertible<T,std::input_iterator_tag>
      , is_convertible<T,std::output_iterator_tag>
    >
{
};

template <class T>
struct is_iterator_traversal
  : is_convertible<T,incrementable_traversal_tag>
{};







template <class Category, class Traversal>
struct iterator_category_with_traversal
  : Category, Traversal
{



    static const std::size_t mpl_assertion_in_line_145 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) ( is_convertible< typename iterator_category_to_traversal<Category>::type , Traversal >))0, 1 ) ) );





    static const std::size_t mpl_assertion_in_line_147 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_arg( (void (*) (is_iterator_category<Category>))0, 1 ) ) );
    static const std::size_t mpl_assertion_in_line_148 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (is_iterator_category<Traversal>))0, 1 ) ) );
    static const std::size_t mpl_assertion_in_line_149 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (is_iterator_traversal<Category>))0, 1 ) ) );

    static const std::size_t mpl_assertion_in_line_151 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_arg( (void (*) (is_iterator_traversal<Traversal>))0, 1 ) ) );

};



template <class Traversal, class ValueParam, class Reference>
struct facade_iterator_category_impl
{
    static const std::size_t mpl_assertion_in_line_160 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (is_iterator_category<Traversal>))0, 1 ) ) );

    typedef typename iterator_facade_default_category<
        Traversal,ValueParam,Reference
    >::type category;

    typedef typename mpl::if_<
        is_same<
            Traversal
          , typename iterator_category_to_traversal<category>::type
        >
      , category
      , iterator_category_with_traversal<category,Traversal>
    >::type type;
};




template <class CategoryOrTraversal, class ValueParam, class Reference>
struct facade_iterator_category
  : mpl::eval_if<
        is_iterator_category<CategoryOrTraversal>
      , mpl::identity<CategoryOrTraversal>
      , facade_iterator_category_impl<CategoryOrTraversal,ValueParam,Reference>
    >
{
};

}}}


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_undef.hpp" 1
# 191 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/facade_iterator_category.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/enable_if.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/enable_if.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_def.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/enable_if.hpp" 2








namespace boost
{

  namespace iterators
  {



    template<bool>
    struct enabled
    {
      template<typename T>
      struct base
      {
        typedef T type;
      };
    };






    template<>
    struct enabled<false>
    {
      template<typename T>
      struct base
      {
# 62 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/enable_if.hpp"
      };
    };


    template <class Cond,
              class Return>
    struct enable_if

      : enabled<(Cond::value)>::template base<Return>



    {
    };

  }

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_undef.hpp" 1
# 81 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/enable_if.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/utility/addressof.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_const.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_const.hpp"
namespace boost {


   template <class T> struct remove_const{ typedef T type; };
   template <class T> struct remove_const<T const>{ typedef T type; };


   template <class T, std::size_t N> struct remove_const<T const[N]>{ typedef T type[N]; };

   template <class T> struct remove_const<T const[]>{ typedef T type[]; };
# 37 "D:\\my_project\\boost_1_65_1\\boost/type_traits/remove_const.hpp"
}
# 26 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pod.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pod.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_scalar.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_scalar.hpp"
namespace boost {

template <typename T>
struct is_scalar
   : public integral_constant<bool, ::boost::is_arithmetic<T>::value || ::boost::is_enum<T>::value || ::boost::is_pointer<T>::value || ::boost::is_member_pointer<T>::value>
{};

}
# 15 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pod.hpp" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_pod.hpp"
namespace boost {


template< typename T > struct is_POD;

template <typename T> struct is_pod
: public integral_constant<bool, ::boost::is_scalar<T>::value || ::boost::is_void<T>::value || false>
{};


template <typename T, std::size_t sz> struct is_pod<T[sz]> : public is_pod<T>{};




template<> struct is_pod<void> : public true_type{};


template<> struct is_pod<void const> : public true_type{};
template<> struct is_pod<void const volatile> : public true_type{};
template<> struct is_pod<void volatile> : public true_type{};


template<class T> struct is_POD : public is_pod<T>{};

}
# 29 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2







# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/always.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/always.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 1
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 1
# 46 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repeat.hpp" 1
# 47 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/inc.hpp" 1
# 48 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 49 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessor/default_params.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/always.hpp" 2




namespace boost { namespace mpl {

template< typename Value > struct always
{
    template<
        typename T1 = na , typename T2 = na , typename T3 = na , typename T4 = na , typename T5 = na
        >
    struct apply
    {
        typedef Value type;
    };
};



}}
# 36 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_fwd.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_fwd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply_fwd.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply_fwd.hpp"
namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct apply;

template<
      typename F
    >
struct apply0;

template<
      typename F, typename T1
    >
struct apply1;

template<
      typename F, typename T1, typename T2
    >
struct apply2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5;

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_fwd.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_apply.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_apply.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/type_wrapper.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/type_wrapper.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename T > struct type_wrapper
{
    typedef T type;
};






template< typename T > struct wrapped_type;

template< typename T > struct wrapped_type< type_wrapper<T> >
{
    typedef T type;
};







}}}
# 21 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/has_xxx.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/msvc_typename.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2





# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/data.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/data.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/data.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/data.hpp" 2
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/size.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/size.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/size.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/size.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/array/elem.hpp" 2
# 30 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 31 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 1
# 32 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_params.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_params.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_params.hpp" 2
# 33 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_trailing_params.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_trailing_params.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_trailing_params.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/repeat.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/enum_trailing_params.hpp" 2
# 34 "D:\\my_project\\boost_1_65_1\\boost/mpl/has_xxx.hpp" 2
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_apply.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/has_apply.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_apply.hpp" 2


namespace boost { namespace mpl { namespace aux {

template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_apply { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::apply>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };







}}}
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/msvc_never_true.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp" 2
# 34 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply_wrap.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply_wrap.hpp"
namespace boost { namespace mpl {

template<
      typename F

    , typename has_apply_ = typename aux::has_apply<F>::type

    >
struct apply_wrap0

    : F::template apply< >
{
};

template< typename F >
struct apply_wrap0< F,true_ >
    : F::apply
{
};

template<
      typename F, typename T1

    >
struct apply_wrap1

    : F::template apply<T1>
{
};

template<
      typename F, typename T1, typename T2

    >
struct apply_wrap2

    : F::template apply< T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3

    >
struct apply_wrap3

    : F::template apply< T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4

    >
struct apply_wrap4

    : F::template apply< T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5

    >
struct apply_wrap5

    : F::template apply< T1,T2,T3,T4,T5 >
{
};

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 34 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind_fwd.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind_fwd.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/bind.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind_fwd.hpp" 2







# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/bind_fwd.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/bind_fwd.hpp"
namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct bind;

template<
      typename F
    >
struct bind0;

template<
      typename F, typename T1
    >
struct bind1;

template<
      typename F, typename T1, typename T2
    >
struct bind2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5;

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 32 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind_fwd.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/placeholders.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/next.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/next.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/next_prior.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/next_prior.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/common_name_wknd.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/next_prior.hpp" 2




namespace boost { namespace mpl {




template<
      typename T = na
    >
struct next
{
    typedef typename T::next type;

};

template<
      typename T = na
    >
struct prior
{
    typedef typename T::prior type;

};

template<> struct next< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : next< T1 > { }; }; template< typename Tag > struct lambda< next< na > , Tag > { typedef false_ is_le; typedef next< na > result_; typedef next< na > type; };
template<> struct prior< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : prior< T1 > { }; }; template< typename Tag > struct lambda< prior< na > , Tag > { typedef false_ is_le; typedef prior< na > result_; typedef prior< na > type; };

}}
# 17 "D:\\my_project\\boost_1_65_1\\boost/mpl/next.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/protect.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/protect.hpp"
namespace boost { namespace mpl {

template<
      typename T = na
    , int not_le_ = 0
    >
struct protect : T
{



    typedef protect type;

};
# 48 "D:\\my_project\\boost_1_65_1\\boost/mpl/protect.hpp"
template<> struct protect< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : protect< T1 > { }; };




}}
# 26 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply_wrap.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2
# 50 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/bind.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/bind.hpp"
namespace boost { namespace mpl {

namespace aux {

template<
      typename T, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg
{
    typedef T type;
};

template<
      typename T
    , typename Arg
    >
struct replace_unnamed_arg
{
    typedef Arg next;
    typedef T type;
};

template<
      typename Arg
    >
struct replace_unnamed_arg< arg< -1 >, Arg >
{
    typedef typename Arg::next next;
    typedef Arg type;
};

template<
      int N, typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg< arg<N>, U1, U2, U3, U4, U5 >
{
    typedef typename apply_wrap5<mpl::arg<N>, U1, U2, U3, U4, U5>::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg< bind< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5 >
{
    typedef bind< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}

template<
      typename F
    >
struct bind0
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

     public:
        typedef typename apply_wrap0<
              f_
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind0<F>, U1, U2, U3, U4, U5
    >
{
    typedef bind0<F> f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F
    >
struct bind< F,na,na,na,na,na >
    : bind0<F>
{
};

template<
      typename F, typename T1
    >
struct bind1
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

     public:
        typedef typename apply_wrap1<
              f_
            , typename t1::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename U1, typename U2, typename U3
    , typename U4, typename U5
    >
struct resolve_bind_arg<
      bind1< F,T1 >, U1, U2, U3, U4, U5
    >
{
    typedef bind1< F,T1 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1
    >
struct bind< F,T1,na,na,na,na >
    : bind1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct bind2
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

     public:
        typedef typename apply_wrap2<
              f_
            , typename t1::type, typename t2::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename U1, typename U2
    , typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind2< F,T1,T2 >, U1, U2, U3, U4, U5
    >
{
    typedef bind2< F,T1,T2 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2
    >
struct bind< F,T1,T2,na,na,na >
    : bind2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

     public:
        typedef typename apply_wrap3<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename U1
    , typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind3< F,T1,T2,T3 >, U1, U2, U3, U4, U5
    >
{
    typedef bind3< F,T1,T2,T3 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind< F,T1,T2,T3,na,na >
    : bind3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;

     public:
        typedef typename apply_wrap4<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind4< F,T1,T2,T3,T4 >, U1, U2, U3, U4, U5
    >
{
    typedef bind4< F,T1,T2,T3,T4 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind< F,T1,T2,T3,T4,na >
    : bind4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;

        typedef aux::replace_unnamed_arg< T5,n5 > r5;
        typedef typename r5::type a5;
        typedef typename r5::next n6;
        typedef aux::resolve_bind_arg< a5,U1,U2,U3,U4,U5 > t5;

     public:
        typedef typename apply_wrap5<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type, typename t5::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind5< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5
    >
{
    typedef bind5< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}






template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind
    : bind5< F,T1,T2,T3,T4,T5 >
{
};


template< template< typename T1, typename T2, typename T3 > class F, typename Tag >
struct quote3;

template< typename T1, typename T2, typename T3 > struct if_;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< if_,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef typename if_<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

template<
      template< typename T1, typename T2, typename T3 > class F, typename Tag
    >
struct quote3;

template< typename T1, typename T2, typename T3 > struct eval_if;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< eval_if,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef typename eval_if<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 50 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind.hpp" 2
# 18 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/bind_fwd.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 2


# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp" 1
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/void.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/void.hpp"
namespace mpl_ {





struct void_ { typedef void_ type; };

}

namespace boost { namespace mpl {

template< typename T >
struct is_void_
    : false_
{



};

template<>
struct is_void_<void_>
    : true_
{



};

template< typename T >
struct is_not_void_
    : true_
{



};

template<>
struct is_not_void_<void_>
    : false_
{



};

template<> struct is_void_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : is_void_< T1 > { }; }; template< typename Tag > struct lambda< is_void_< na > , Tag > { typedef false_ is_le; typedef is_void_< na > result_; typedef is_void_< na > type; };
template<> struct is_not_void_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : is_not_void_< T1 > { }; }; template< typename Tag > struct lambda< is_not_void_< na > , Tag > { typedef false_ is_le; typedef is_not_void_< na > result_; typedef is_not_void_< na > type; };

}}
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_type.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/has_type.hpp"
namespace boost { namespace mpl { namespace aux {
template< typename T, typename fallback_ = boost::mpl::bool_<true> > struct has_type { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::type>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };
}}}
# 23 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/config/bcc.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/quote.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/quote.hpp"
namespace boost { namespace mpl {

template< typename T, bool has_type_ >
struct quote_impl
    : T
{
};

template< typename T >
struct quote_impl< T,false >
{
    typedef T type;
};

template<
      template< typename P1 > class F
    , typename Tag = void_
    >
struct quote1
{
    template< typename U1 > struct apply

        : quote_impl<
              F<U1>
            , aux::has_type< F<U1> >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2 > class F
    , typename Tag = void_
    >
struct quote2
{
    template< typename U1, typename U2 > struct apply

        : quote_impl<
              F< U1,U2 >
            , aux::has_type< F< U1,U2 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename Tag = void_
    >
struct quote3
{
    template< typename U1, typename U2, typename U3 > struct apply

        : quote_impl<
              F< U1,U2,U3 >
            , aux::has_type< F< U1,U2,U3 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename Tag = void_
    >
struct quote4
{
    template<
          typename U1, typename U2, typename U3, typename U4
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4 >
            , aux::has_type< F< U1,U2,U3,U4 > >::value
            >

    {
    };
};

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename Tag = void_
    >
struct quote5
{
    template<
          typename U1, typename U2, typename U3, typename U4
        , typename U5
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4,U5 >
            , aux::has_type< F< U1,U2,U3,U4,U5 > >::value
            >

    {
    };
};

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 45 "D:\\my_project\\boost_1_65_1\\boost/mpl/quote.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/arg.hpp" 1
# 26 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/template_arity.hpp" 1
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/template_arity.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/template_arity.hpp" 1
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/template_arity.hpp" 2
# 29 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 2
# 44 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/full_lambda.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/full_lambda.hpp"
namespace boost { namespace mpl {

namespace aux {

template<
      bool C1 = false, bool C2 = false, bool C3 = false, bool C4 = false
    , bool C5 = false
    >
struct lambda_or
    : true_
{
};

template<>
struct lambda_or< false,false,false,false,false >
    : false_
{
};

}

template<
      typename T
    , typename Tag

    >
struct lambda
{
    typedef false_ is_le;
    typedef T result_;
    typedef T type;
};

template<
      typename T
    >
struct is_lambda_expression
    : lambda<T>::is_le
{
};

template< int N, typename Tag >
struct lambda< arg<N>, Tag >
{
    typedef true_ is_le;
    typedef mpl::arg<N> result_;
    typedef mpl::protect<result_> type;
};

template<
      typename F
    , typename Tag
    >
struct lambda<
          bind0<F>
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind0<
          F
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1
{
    typedef F<
          typename L1::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1< true_,Tag,F,L1 >
{
    typedef bind1<
          quote1< F,Tag >
        , typename L1::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1 > class F
    , typename T1
    , typename Tag
    >
struct lambda<
          F<T1>
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef typename l1::is_le is_le1;
    typedef typename aux::lambda_or<
          is_le1::value
        >::type is_le;

    typedef aux::le_result1<
          is_le, Tag, F, l1
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1
    , typename Tag
    >
struct lambda<
          bind1< F,T1 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind1<
          F
        , T1
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2
{
    typedef F<
          typename L1::type, typename L2::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2< true_,Tag,F,L1,L2 >
{
    typedef bind2<
          quote2< F,Tag >
        , typename L1::result_, typename L2::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2 > class F
    , typename T1, typename T2
    , typename Tag
    >
struct lambda<
          F< T1,T2 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value
        >::type is_le;

    typedef aux::le_result2<
          is_le, Tag, F, l1, l2
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2
    , typename Tag
    >
struct lambda<
          bind2< F,T1,T2 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind2<
          F
        , T1, T2
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3< true_,Tag,F,L1,L2,L3 >
{
    typedef bind3<
          quote3< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value
        >::type is_le;

    typedef aux::le_result3<
          is_le, Tag, F, l1, l2, l3
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          bind3< F,T1,T2,T3 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind3<
          F
        , T1, T2, T3
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4< true_,Tag,F,L1,L2,L3,L4 >
{
    typedef bind4<
          quote4< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        >::type is_le;

    typedef aux::le_result4<
          is_le, Tag, F, l1, l2, l3, l4
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          bind4< F,T1,T2,T3,T4 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind4<
          F
        , T1, T2, T3, T4
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type, typename L5::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5< true_,Tag,F,L1,L2,L3,L4,L5 >
{
    typedef bind5<
          quote5< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_, typename L5::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename T1, typename T2, typename T3, typename T4, typename T5
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;
    typedef lambda< T5,Tag > l5;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;
    typedef typename l5::is_le is_le5;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        , is_le5::value
        >::type is_le;

    typedef aux::le_result5<
          is_le, Tag, F, l1, l2, l3, l4, l5
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind5< F,T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind5<
          F
        , T1, T2, T3, T4, T5
        > result_;

    typedef result_ type;
};


template< typename T, typename Tag >
struct lambda< mpl::protect<T>, Tag >
{
    typedef false_ is_le;
    typedef mpl::protect<T> result_;
    typedef result_ type;
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind< F,T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind< F,T1,T2,T3,T4,T5 > result_;
    typedef result_ type;
};



template<
      typename F, typename Tag1, typename Tag2
    >
struct lambda<
          lambda< F,Tag1 >
        , Tag2
        >
{
    typedef lambda< F,Tag2 > l1;
    typedef lambda< Tag1,Tag2 > l2;
    typedef typename l1::is_le is_le;
    typedef aux::le_result2<is_le, Tag2, mpl::lambda, l1, l2> le_result_;
    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<> struct lambda< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : lambda< T1 , T2 > { }; }; template< typename Tag > struct lambda< lambda< na , na > , Tag > { typedef false_ is_le; typedef lambda< na , na > result_; typedef lambda< na , na > type; };

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 44 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/full_lambda.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/mpl/lambda.hpp" 2
# 25 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 2
# 36 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/stringize.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/preprocessed/plain/apply.hpp"
namespace boost { namespace mpl {

template<
      typename F
    >
struct apply0

    : apply_wrap0<
          typename lambda<F>::type

        >
{
};

template<
      typename F
    >
struct apply< F,na,na,na,na,na >
    : apply0<F>
{
};

template<
      typename F, typename T1
    >
struct apply1

    : apply_wrap1<
          typename lambda<F>::type
        , T1
        >
{
};

template<
      typename F, typename T1
    >
struct apply< F,T1,na,na,na,na >
    : apply1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply2

    : apply_wrap2<
          typename lambda<F>::type
        , T1, T2
        >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply< F,T1,T2,na,na,na >
    : apply2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3

    : apply_wrap3<
          typename lambda<F>::type
        , T1, T2, T3
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply< F,T1,T2,T3,na,na >
    : apply3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4

    : apply_wrap4<
          typename lambda<F>::type
        , T1, T2, T3, T4
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply< F,T1,T2,T3,T4,na >
    : apply4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5

    : apply_wrap5<
          typename lambda<F>::type
        , T1, T2, T3, T4, T5
        >
{
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply
    : apply5< F,T1,T2,T3,T4,T5 >
{
};

}}
# 37 "D:\\my_project\\boost_1_65_1\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 36 "D:\\my_project\\boost_1_65_1\\boost/mpl/apply.hpp" 2
# 37 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_def.hpp" 1
# 40 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2


namespace boost {
namespace iterators {



  template <class I, class V, class TC, class R, class D> class iterator_facade;

  namespace detail
  {



    struct always_bool2
    {
        template <class T, class U>
        struct apply
        {
            typedef bool type;
        };
    };


    template< typename CategoryOrTraversal, typename Required >
    struct is_traversal_at_least :
        public boost::is_convertible< typename iterator_category_to_traversal< CategoryOrTraversal >::type, Required >
    {};




    template <
        class Facade1
      , class Facade2
      , class Return
    >
    struct enable_if_interoperable :
        public boost::iterators::enable_if<
            is_interoperable< Facade1, Facade2 >
          , Return
        >
    {};




    template <
        class Facade1
      , class Facade2
      , class Return
    >
    struct enable_if_interoperable_and_random_access_traversal :
        public boost::iterators::enable_if<
            mpl::and_<
                is_interoperable< Facade1, Facade2 >
              , is_traversal_at_least< typename iterator_category< Facade1 >::type, random_access_traversal_tag >
              , is_traversal_at_least< typename iterator_category< Facade2 >::type, random_access_traversal_tag >
            >
          , Return
        >
    {};





    template <
        class ValueParam
      , class CategoryOrTraversal
      , class Reference
      , class Difference
    >
    struct iterator_facade_types
    {
        typedef typename facade_iterator_category<
            CategoryOrTraversal, ValueParam, Reference
        >::type iterator_category;

        typedef typename remove_const<ValueParam>::type value_type;


        typedef typename mpl::eval_if<
            boost::iterators::detail::iterator_writability_disabled<ValueParam,Reference>
          , add_pointer<const value_type>
          , add_pointer<value_type>
        >::type pointer;
# 144 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
    };







    template <class Iterator>
    class postfix_increment_proxy
    {
        typedef typename iterator_value<Iterator>::type value_type;
     public:
        explicit postfix_increment_proxy(Iterator const& x)
          : stored_value(*x)
        {}





        value_type&
        operator*() const
        {
            return this->stored_value;
        }
     private:
        mutable value_type stored_value;
    };





    template <class Iterator>
    class writable_postfix_increment_proxy
    {
        typedef typename iterator_value<Iterator>::type value_type;
     public:
        explicit writable_postfix_increment_proxy(Iterator const& x)
          : stored_value(*x)
          , stored_iterator(x)
        {}





        writable_postfix_increment_proxy const&
        operator*() const
        {
            return *this;
        }


        operator value_type&() const
        {
            return stored_value;
        }


        template <class T>
        T const& operator=(T const& x) const
        {
            *this->stored_iterator = x;
            return x;
        }


        template <class T>
        T& operator=(T& x) const
        {
            *this->stored_iterator = x;
            return x;
        }


        operator Iterator const&() const
        {
            return stored_iterator;
        }

     private:
        mutable value_type stored_value;
        Iterator stored_iterator;
    };
# 258 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
    template <class Reference, class Value>
    struct is_non_proxy_reference
      : is_convertible<
            typename remove_reference<Reference>::type
            const volatile*
          , Value const volatile*
        >
    {};
# 283 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
    template <class Iterator, class Value, class Reference, class CategoryOrTraversal>
    struct postfix_increment_result
      : mpl::eval_if<
            mpl::and_<

                is_convertible<
                    Reference





                  , typename add_lvalue_reference<Value const>::type
                >



              , mpl::not_<
                    is_convertible<
                        typename iterator_category_to_traversal<CategoryOrTraversal>::type
                      , forward_traversal_tag
                    >
                >
            >
          , mpl::if_<
                is_non_proxy_reference<Reference,Value>
              , postfix_increment_proxy<Iterator>
              , writable_postfix_increment_proxy<Iterator>
            >
          , mpl::identity<Iterator>
        >
    {};





    template <class Reference, class Pointer>
    struct operator_arrow_dispatch
    {
        struct proxy
        {
            explicit proxy(Reference const & x) : m_ref(x) {}
            Reference* operator->() { return boost::addressof(m_ref); }


            operator Reference*() { return boost::addressof(m_ref); }
            Reference m_ref;
        };
        typedef proxy result_type;
        static result_type apply(Reference const & x)
        {
            return result_type(x);
        }
    };

    template <class T, class Pointer>
    struct operator_arrow_dispatch<T&, Pointer>
    {
        typedef Pointer result_type;
        static result_type apply(T& x)
        {
            return boost::addressof(x);
        }
    };




    template <class Iterator>
    class operator_brackets_proxy
    {


        typedef typename Iterator::reference reference;
        typedef typename Iterator::value_type value_type;

     public:
        operator_brackets_proxy(Iterator const& iter)
          : m_iter(iter)
        {}

        operator reference() const
        {
            return *m_iter;
        }

        operator_brackets_proxy& operator=(value_type const& val)
        {
            *m_iter = val;
            return *this;
        }

     private:
        Iterator m_iter;
    };



    template <class ValueType, class Reference>
    struct use_operator_brackets_proxy
      : mpl::not_<
            mpl::and_<


                boost::is_POD<ValueType>
              , iterator_writability_disabled<ValueType,Reference>
            >
        >
    {};

    template <class Iterator, class Value, class Reference>
    struct operator_brackets_result
    {
        typedef typename mpl::if_<
            use_operator_brackets_proxy<Value,Reference>
          , operator_brackets_proxy<Iterator>
          , Value
        >::type type;
    };

    template <class Iterator>
    operator_brackets_proxy<Iterator> make_operator_brackets_result(Iterator const& iter, mpl::true_)
    {
        return operator_brackets_proxy<Iterator>(iter);
    }

    template <class Iterator>
    typename Iterator::value_type make_operator_brackets_result(Iterator const& iter, mpl::false_)
    {
      return *iter;
    }

    struct choose_difference_type
    {
        template <class I1, class I2>
        struct apply
          :



          mpl::eval_if<
              is_convertible<I2,I1>
            , iterator_difference<I1>
            , iterator_difference<I2>
          >

        {};

    };

    template <
        class Derived
      , class Value
      , class CategoryOrTraversal
      , class Reference
      , class Difference
      , bool IsBidirectionalTraversal
      , bool IsRandomAccessTraversal
    >
    class iterator_facade_base;

  }
# 496 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
  class iterator_core_access
  {






      template <class I, class V, class TC, class R, class D> friend class iterator_facade;
      template <class I, class V, class TC, class R, class D, bool IsBidirectionalTraversal, bool IsRandomAccessTraversal>
      friend class detail::iterator_facade_base;




      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator ==( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);
      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator !=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);






      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator <( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);
      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator >( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);
      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator <=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);
      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator >=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs);



      template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > friend typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::choose_difference_type,Derived1,Derived2>::type >::type operator -( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs)

      ;

      template <class Derived, class V, class TC, class R, class D> friend inline typename boost::iterators::enable_if< boost::iterators::detail::is_traversal_at_least< TC, boost::iterators::random_access_traversal_tag >, Derived >::type operator+ (iterator_facade<Derived, V, TC, R, D> const& , typename Derived::difference_type)




      ;

      template <class Derived, class V, class TC, class R, class D> friend inline typename boost::iterators::enable_if< boost::iterators::detail::is_traversal_at_least< TC, boost::iterators::random_access_traversal_tag >, Derived >::type operator+ (typename Derived::difference_type , iterator_facade<Derived, V, TC, R, D> const&)




      ;



      template <class Facade>
      static typename Facade::reference dereference(Facade const& f)
      {
          return f.dereference();
      }

      template <class Facade>
      static void increment(Facade& f)
      {
          f.increment();
      }

      template <class Facade>
      static void decrement(Facade& f)
      {
          f.decrement();
      }

      template <class Facade1, class Facade2>
      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::true_)
      {
          return f1.equal(f2);
      }

      template <class Facade1, class Facade2>
      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::false_)
      {
          return f2.equal(f1);
      }

      template <class Facade>
      static void advance(Facade& f, typename Facade::difference_type n)
      {
          f.advance(n);
      }

      template <class Facade1, class Facade2>
      static typename Facade1::difference_type distance_from(
          Facade1 const& f1, Facade2 const& f2, mpl::true_)
      {
          return -f1.distance_to(f2);
      }

      template <class Facade1, class Facade2>
      static typename Facade2::difference_type distance_from(
          Facade1 const& f1, Facade2 const& f2, mpl::false_)
      {
          return f2.distance_to(f1);
      }




      template <class I, class V, class TC, class R, class D>
      static I& derived(iterator_facade<I,V,TC,R,D>& facade)
      {
          return *static_cast<I*>(&facade);
      }

      template <class I, class V, class TC, class R, class D>
      static I const& derived(iterator_facade<I,V,TC,R,D> const& facade)
      {
          return *static_cast<I const*>(&facade);
      }


      private: iterator_core_access();
  };

  namespace detail {


    template <
        class Derived
      , class Value
      , class CategoryOrTraversal
      , class Reference
      , class Difference
    >
    class iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, false, false >






    {
    private:
        typedef boost::iterators::detail::iterator_facade_types<
            Value, CategoryOrTraversal, Reference, Difference
        > associated_types;

        typedef boost::iterators::detail::operator_arrow_dispatch<
            Reference
          , typename associated_types::pointer
        > operator_arrow_dispatch_;

    public:
        typedef typename associated_types::value_type value_type;
        typedef Reference reference;
        typedef Difference difference_type;

        typedef typename operator_arrow_dispatch_::result_type pointer;

        typedef typename associated_types::iterator_category iterator_category;

    public:
        reference operator*() const
        {
            return iterator_core_access::dereference(this->derived());
        }

        pointer operator->() const
        {
            return operator_arrow_dispatch_::apply(*this->derived());
        }

        Derived& operator++()
        {
            iterator_core_access::increment(this->derived());
            return this->derived();
        }

    protected:



        Derived& derived()
        {
            return *static_cast<Derived*>(this);
        }

        Derived const& derived() const
        {
            return *static_cast<Derived const*>(this);
        }
    };


    template <
        class Derived
      , class Value
      , class CategoryOrTraversal
      , class Reference
      , class Difference
    >
    class iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, true, false > :
        public iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, false, false >
    {
    public:
        Derived& operator--()
        {
            iterator_core_access::decrement(this->derived());
            return this->derived();
        }

        Derived operator--(int)
        {
            Derived tmp(this->derived());
            --*this;
            return tmp;
        }
    };


    template <
        class Derived
      , class Value
      , class CategoryOrTraversal
      , class Reference
      , class Difference
    >
    class iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, true, true > :
        public iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, true, false >
    {
    private:
        typedef iterator_facade_base< Derived, Value, CategoryOrTraversal, Reference, Difference, true, false > base_type;

    public:
        typedef typename base_type::reference reference;
        typedef typename base_type::difference_type difference_type;

    public:
        typename boost::iterators::detail::operator_brackets_result<Derived, Value, reference>::type
        operator[](difference_type n) const
        {
            typedef boost::iterators::detail::use_operator_brackets_proxy<Value, Reference> use_proxy;

            return boost::iterators::detail::make_operator_brackets_result<Derived>(
                this->derived() + n
              , use_proxy()
            );
        }

        Derived& operator+=(difference_type n)
        {
            iterator_core_access::advance(this->derived(), n);
            return this->derived();
        }

        Derived& operator-=(difference_type n)
        {
            iterator_core_access::advance(this->derived(), -n);
            return this->derived();
        }

        Derived operator-(difference_type x) const
        {
            Derived result(this->derived());
            return result -= x;
        }
    };

  }





  template <
      class Derived
    , class Value
    , class CategoryOrTraversal
    , class Reference = Value&
    , class Difference = std::ptrdiff_t
  >
  class iterator_facade :
      public detail::iterator_facade_base<
          Derived,
          Value,
          CategoryOrTraversal,
          Reference,
          Difference,
          detail::is_traversal_at_least< CategoryOrTraversal, bidirectional_traversal_tag >::value,
          detail::is_traversal_at_least< CategoryOrTraversal, random_access_traversal_tag >::value
      >
  {
  protected:

      typedef iterator_facade<Derived,Value,CategoryOrTraversal,Reference,Difference> iterator_facade_;
  };

  template <class I, class V, class TC, class R, class D>
  inline typename boost::iterators::detail::postfix_increment_result<I,V,R,TC>::type
  operator++(
      iterator_facade<I,V,TC,R,D>& i
    , int
  )
  {
      typename boost::iterators::detail::postfix_increment_result<I,V,R,TC>::type
          tmp(*static_cast<I*>(&i));

      ++i;

      return tmp;
  }
# 899 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator ==( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value )) >)> boost_static_assert_typedef_899 ; return iterator_core_access::equal( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator !=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value )) >)> boost_static_assert_typedef_900 ; return ! iterator_core_access::equal( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
# 929 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator <( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived1 >::type, random_access_traversal_tag >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived2 >::type, random_access_traversal_tag >::value )) >)> boost_static_assert_typedef_929 ; return 0 > iterator_core_access::distance_from( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator >( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived1 >::type, random_access_traversal_tag >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived2 >::type, random_access_traversal_tag >::value )) >)> boost_static_assert_typedef_930 ; return 0 < iterator_core_access::distance_from( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator <=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived1 >::type, random_access_traversal_tag >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived2 >::type, random_access_traversal_tag >::value )) >)> boost_static_assert_typedef_931 ; return 0 >= iterator_core_access::distance_from( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::always_bool2,Derived1,Derived2>::type >::type operator >=( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived1 >::type, random_access_traversal_tag >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived2 >::type, random_access_traversal_tag >::value )) >)> boost_static_assert_typedef_932 ; return 0 <= iterator_core_access::distance_from( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }




  template < class Derived1, class V1, class TC1, class Reference1, class Difference1 , class Derived2, class V2, class TC2, class Reference2, class Difference2 > inline typename boost::iterators::detail::enable_if_interoperable_and_random_access_traversal< Derived1, Derived2 , typename mpl::apply2<boost::iterators::detail::choose_difference_type,Derived1,Derived2>::type >::type operator -( iterator_facade<Derived1, V1, TC1, Reference1, Difference1> const& lhs , iterator_facade<Derived2, V2, TC2, Reference2, Difference2> const& rhs) { typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( is_interoperable< Derived1, Derived2 >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived1 >::type, random_access_traversal_tag >::value && boost::iterators::detail::is_traversal_at_least< typename iterator_category< Derived2 >::type, random_access_traversal_tag >::value )) >)> boost_static_assert_typedef_942 ; return iterator_core_access::distance_from( *static_cast<Derived1 const*>(&lhs) , *static_cast<Derived2 const*>(&rhs) , is_convertible<Derived2,Derived1>() ); }
# 954 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
  template <class Derived, class V, class TC, class R, class D> inline typename boost::iterators::enable_if< boost::iterators::detail::is_traversal_at_least< TC, boost::iterators::random_access_traversal_tag >, Derived >::type operator+ ( iterator_facade<Derived, V, TC, R, D> const& i , typename Derived::difference_type n ) { Derived tmp(static_cast<Derived const&>(i)); return tmp += n; }




  template <class Derived, class V, class TC, class R, class D> inline typename boost::iterators::enable_if< boost::iterators::detail::is_traversal_at_least< TC, boost::iterators::random_access_traversal_tag >, Derived >::type operator+ ( typename Derived::difference_type n , iterator_facade<Derived, V, TC, R, D> const& i ) { Derived tmp(static_cast<Derived const&>(i)); return tmp += n; }
# 971 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp"
}

using iterators::iterator_core_access;
using iterators::iterator_facade;

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/iterator/detail/config_undef.hpp" 1
# 978 "D:\\my_project\\boost_1_65_1\\boost/iterator/iterator_facade.hpp" 2
# 27 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp" 2




# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_abstract.hpp" 1
# 59 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_abstract.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_polymorphic.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_polymorphic.hpp"
namespace boost{



namespace detail{

template <class T>
struct is_polymorphic_imp1
{



   struct d1 : public T
   {
      d1();

      ~d1()throw();

      char padding[256];
   private:

      d1(const d1&);
      d1& operator=(const d1&);
   };
   struct d2 : public T
   {
      d2();
      virtual ~d2()throw();



      struct unique{};
      virtual void unique_name_to_boost5487629(unique*);

      char padding[256];
   private:

      d2(const d2&);
      d2& operator=(const d2&);
   };

   static const bool value = (sizeof(d2) == sizeof(d1));
};

template <class T> struct is_polymorphic_imp1<T const> : public is_polymorphic_imp1<T>{};
template <class T> struct is_polymorphic_imp1<T const volatile> : public is_polymorphic_imp1<T>{};
template <class T> struct is_polymorphic_imp1<T volatile> : public is_polymorphic_imp1<T>{};

template <class T>
struct is_polymorphic_imp2
{
   static const bool value = false;
};

template <bool is_class>
struct is_polymorphic_selector
{
   template <class T>
   struct rebind
   {
      typedef is_polymorphic_imp2<T> type;
   };
};

template <>
struct is_polymorphic_selector<true>
{
   template <class T>
   struct rebind
   {
      typedef is_polymorphic_imp1<T> type;
   };
};

template <class T>
struct is_polymorphic_imp
{
   typedef is_polymorphic_selector< ::boost::is_class<T>::value> selector;
   typedef typename selector::template rebind<T> binder;
   typedef typename binder::type imp_type;
   static const bool value = imp_type::value;
};

}

template <class T> struct is_polymorphic : public integral_constant<bool, ::boost::detail::is_polymorphic_imp<T>::value> {};







}
# 59 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_abstract.hpp" 2




namespace boost {

namespace detail{
# 140 "D:\\my_project\\boost_1_65_1\\boost/type_traits/is_abstract.hpp"
}




template <class T> struct is_abstract : public integral_constant<bool, ::boost::detail::is_polymorphic_imp<T>::value> {};


}
# 31 "D:\\my_project\\boost_1_65_1\\boost/range/iterator_range_core.hpp" 2







# 1 "D:\\my_project\\boost_1_65_1\\boost/range/functions.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/functions.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/begin.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/begin.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/config.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/begin.hpp" 2






# 1 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/range_fwd.hpp" 1
# 13 "D:\\my_project\\boost_1_65_1\\boost/range/range_fwd.hpp"
namespace boost
{


    template<typename C, typename Enabler>
    struct range_iterator;

    template<typename C, typename Enabler>
    struct range_mutable_iterator;

    template<typename C, typename Enabler>
    struct range_const_iterator;


    template<typename IteratorT>
    class iterator_range;

    template<typename ForwardRange>
    class sub_range;


    template<typename T>
    struct range_category;

    template<typename T>
    struct range_difference;

    template<typename T>
    struct range_pointer;

    template<typename T>
    struct range_reference;

    template<typename T>
    struct range_reverse_iterator;

    template<typename T>
    struct range_size;

    template<typename T>
    struct range_value;

    template<typename T>
    struct has_range_iterator;

    template<typename T>
    struct has_range_const_iterator;

}
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/range/mutable_iterator.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/mutable_iterator.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/detail/extract_optional_type.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/detail/extract_optional_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/detail/extract_optional_type.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/mutable_iterator.hpp" 2






namespace boost
{





    namespace range_detail
    {

template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_iterator { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::iterator>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; }; template< typename C, bool B = has_iterator<C>::value > struct extract_iterator {}; template< typename C > struct extract_iterator< C, true > { typedef typename C::iterator type; };

template< typename C >
struct range_mutable_iterator
        : range_detail::extract_iterator<
            typename remove_reference<C>::type>
{};





template< typename Iterator >
struct range_mutable_iterator< std::pair<Iterator,Iterator> >
{
    typedef Iterator type;
};





template< typename T, std::size_t sz >
struct range_mutable_iterator< T[sz] >
{
    typedef T* type;
};

    }

template<typename C, typename Enabler=void>
struct range_mutable_iterator
        : range_detail::range_mutable_iterator<
            typename remove_reference<C>::type
        >
{
};

}


# 1 "D:\\my_project\\boost_1_65_1\\boost/range/detail/msvc_has_iterator_workaround.hpp" 1
# 77 "D:\\my_project\\boost_1_65_1\\boost/range/mutable_iterator.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/range/const_iterator.hpp" 1
# 27 "D:\\my_project\\boost_1_65_1\\boost/range/const_iterator.hpp"
namespace boost
{




    namespace range_detail
    {

template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_const_iterator { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::const_iterator>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; }; template< typename C, bool B = has_const_iterator<C>::value > struct extract_const_iterator {}; template< typename C > struct extract_const_iterator< C, true > { typedef typename C::const_iterator type; };

template< typename C >
struct range_const_iterator_helper
        : extract_const_iterator<C>
{};





template< typename Iterator >
struct range_const_iterator_helper<std::pair<Iterator,Iterator> >
{
    typedef Iterator type;
};





template< typename T, std::size_t sz >
struct range_const_iterator_helper< T[sz] >
{
    typedef const T* type;
};

    }

template<typename C, typename Enabler=void>
struct range_const_iterator
        : range_detail::range_const_iterator_helper<
            typename remove_reference<C>::type
        >
{
};

}
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp" 2





namespace boost
{
# 60 "D:\\my_project\\boost_1_65_1\\boost/range/iterator.hpp"
    template< typename C, typename Enabler=void >
    struct range_iterator
      : mpl::if_c<
            is_const<typename remove_reference<C>::type>::value,
            range_const_iterator<typename remove_const<typename remove_reference<C>::type>::type>,
            range_mutable_iterator<typename remove_reference<C>::type>
        >::type
    {
    };



}
# 24 "D:\\my_project\\boost_1_65_1\\boost/range/begin.hpp" 2


namespace boost
{


namespace range_detail
{






    template< typename C >
    inline typename range_iterator<C>::type
    range_begin( C& c )
    {





        return c.begin();
    }





    template< typename Iterator >
    inline Iterator range_begin( const std::pair<Iterator,Iterator>& p )
    {
        return p.first;
    }

    template< typename Iterator >
    inline Iterator range_begin( std::pair<Iterator,Iterator>& p )
    {
        return p.first;
    }
# 73 "D:\\my_project\\boost_1_65_1\\boost/range/begin.hpp"
    template< typename T, std::size_t sz >
    inline const T* range_begin( const T (&a)[sz] )
    {
        return a;
    }

    template< typename T, std::size_t sz >
    inline T* range_begin( T (&a)[sz] )
    {
        return a;
    }



}





namespace range_adl_barrier
{

template< class T >
inline typename range_iterator<T>::type begin( T& r )
{

    using namespace range_detail;

    return range_begin( r );
}

template< class T >
inline typename range_iterator<const T>::type begin( const T& r )
{

    using namespace range_detail;

    return range_begin( r );
}

    }
}



namespace boost
{
    namespace range_adl_barrier
    {
        template< class T >
        inline typename range_iterator<const T>::type
        const_begin( const T& r )
        {
            return boost::range_adl_barrier::begin( r );
        }
    }

    using namespace range_adl_barrier;
}
# 18 "D:\\my_project\\boost_1_65_1\\boost/range/functions.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/range/end.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/range/end.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/detail/implementation_help.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/range/detail/implementation_help.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/detail/common.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/detail/common.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/detail/sfinae.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/range/detail/sfinae.hpp"
namespace boost
{
    namespace range_detail
    {
        using type_traits::yes_type;
        using type_traits::no_type;





        yes_type is_string_impl( const char* const );
        yes_type is_string_impl( const wchar_t* const );
        no_type is_string_impl( ... );

        template< std::size_t sz >
        yes_type is_char_array_impl( char (&boost_range_array)[sz] );
        template< std::size_t sz >
        yes_type is_char_array_impl( const char (&boost_range_array)[sz] );
        no_type is_char_array_impl( ... );

        template< std::size_t sz >
        yes_type is_wchar_t_array_impl( wchar_t (&boost_range_array)[sz] );
        template< std::size_t sz >
        yes_type is_wchar_t_array_impl( const wchar_t (&boost_range_array)[sz] );
        no_type is_wchar_t_array_impl( ... );

        yes_type is_char_ptr_impl( char* const );
        no_type is_char_ptr_impl( ... );

        yes_type is_const_char_ptr_impl( const char* const );
        no_type is_const_char_ptr_impl( ... );

        yes_type is_wchar_t_ptr_impl( wchar_t* const );
        no_type is_wchar_t_ptr_impl( ... );

        yes_type is_const_wchar_t_ptr_impl( const wchar_t* const );
        no_type is_const_wchar_t_ptr_impl( ... );





        template< typename Iterator >
        yes_type is_pair_impl( const std::pair<Iterator,Iterator>* );
        no_type is_pair_impl( ... );





        struct char_or_wchar_t_array_tag {};

    }

}
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/detail/common.hpp" 2
# 31 "D:\\my_project\\boost_1_65_1\\boost/range/detail/common.hpp"
namespace boost
{
    namespace range_detail
    {
# 48 "D:\\my_project\\boost_1_65_1\\boost/range/detail/common.hpp"
        typedef mpl::int_<1>::type std_container_;
        typedef mpl::int_<2>::type std_pair_;
        typedef mpl::int_<3>::type const_std_pair_;
        typedef mpl::int_<4>::type array_;
        typedef mpl::int_<5>::type const_array_;
        typedef mpl::int_<6>::type char_array_;
        typedef mpl::int_<7>::type wchar_t_array_;
        typedef mpl::int_<8>::type char_ptr_;
        typedef mpl::int_<9>::type const_char_ptr_;
        typedef mpl::int_<10>::type wchar_t_ptr_;
        typedef mpl::int_<11>::type const_wchar_t_ptr_;
        typedef mpl::int_<12>::type string_;

        template< typename C >
        struct range_helper
        {
            static C* c;
            static C ptr;

            static const bool is_pair_ = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type );
            static const bool is_char_ptr_ = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_const_char_ptr_ = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_wchar_t_ptr_ = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_const_wchar_t_ptr_ = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_char_array_ = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_wchar_t_array_ = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type );
            static const bool is_string_ = (boost::mpl::or_<boost::mpl::bool_<is_const_char_ptr_>, boost::mpl::bool_<is_const_wchar_t_ptr_> >::value );
            static const bool is_array_ = boost::is_array<C>::value;

        };

        template< typename C >
        class range
        {
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_pair_,
                                                                  boost::range_detail::std_pair_,
                                                                  void >::type pair_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_array_,
                                                                    boost::range_detail::array_,
                                                                    pair_t >::type array_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_string_,
                                                                    boost::range_detail::string_,
                                                                    array_t >::type string_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_const_char_ptr_,
                                                                    boost::range_detail::const_char_ptr_,
                                                                    string_t >::type const_char_ptr_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_char_ptr_,
                                                                    boost::range_detail::char_ptr_,
                                                                    const_char_ptr_t >::type char_ptr_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_const_wchar_t_ptr_,
                                                                    boost::range_detail::const_wchar_t_ptr_,
                                                                    char_ptr_t >::type const_wchar_ptr_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_wchar_t_ptr_,
                                                                    boost::range_detail::wchar_t_ptr_,
                                                                    const_wchar_ptr_t >::type wchar_ptr_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_wchar_t_array_,
                                                                    boost::range_detail::wchar_t_array_,
                                                                    wchar_ptr_t >::type wchar_array_t;
            typedef typename boost::mpl::if_c< ::boost::range_detail::range_helper<C>::is_char_array_,
                                                                    boost::range_detail::char_array_,
                                                                    wchar_array_t >::type char_array_t;
        public:
            typedef typename boost::mpl::if_c< ::boost::is_void<char_array_t>::value,
                                                                    boost::range_detail::std_container_,
                                                                    char_array_t >::type type;
        };
    }
}
# 15 "D:\\my_project\\boost_1_65_1\\boost/range/detail/implementation_help.hpp" 2
# 24 "D:\\my_project\\boost_1_65_1\\boost/range/detail/implementation_help.hpp"
namespace boost
{
    namespace range_detail
    {
        template <typename T>
        inline void boost_range_silence_warning( const T& ) { }





        inline const char* str_end( const char* s, const char* )
        {
            return s + strlen( s );
        }


        inline const wchar_t* str_end( const wchar_t* s, const wchar_t* )
        {
            return s + wcslen( s );
        }
# 56 "D:\\my_project\\boost_1_65_1\\boost/range/detail/implementation_help.hpp"
        template< class Char >
        inline Char* str_end( Char* s )
        {
            return const_cast<Char*>( str_end( s, s ) );
        }

        template< class T, std::size_t sz >
        inline T* array_end( T (&boost_range_array)[sz] )
        {
            return boost_range_array + sz;
        }

        template< class T, std::size_t sz >
        inline const T* array_end( const T (&boost_range_array)[sz] )
        {
            return boost_range_array + sz;
        }





        template< class Char >
        inline std::size_t str_size( const Char* const& s )
        {
            return str_end( s ) - s;
        }

        template< class T, std::size_t sz >
        inline std::size_t array_size( T (&boost_range_array)[sz] )
        {
            boost_range_silence_warning( boost_range_array );
            return sz;
        }

        template< class T, std::size_t sz >
        inline std::size_t array_size( const T (&boost_range_array)[sz] )
        {
            boost_range_silence_warning( boost_range_array );
            return sz;
        }

        inline bool is_same_address(const void* l, const void* r)
        {
            return l == r;
        }

        template<class T1, class T2>
        inline bool is_same_object(const T1& l, const T2& r)
        {
            return range_detail::is_same_address(&l, &r);
        }

    }

}
# 24 "D:\\my_project\\boost_1_65_1\\boost/range/end.hpp" 2




namespace boost
{


namespace range_detail
{





        template< typename C >
        inline typename range_iterator<C>::type
        range_end( C& c )
        {





            return c.end();
        }





        template< typename Iterator >
        inline Iterator range_end( const std::pair<Iterator,Iterator>& p )
        {
            return p.second;
        }

        template< typename Iterator >
        inline Iterator range_end( std::pair<Iterator,Iterator>& p )
        {
            return p.second;
        }





        template< typename T, std::size_t sz >
        inline const T* range_end( const T (&a)[sz] )
        {
            return range_detail::array_end<T,sz>( a );
        }

        template< typename T, std::size_t sz >
        inline T* range_end( T (&a)[sz] )
        {
            return range_detail::array_end<T,sz>( a );
        }


}


namespace range_adl_barrier
{

template< class T >
inline typename range_iterator<T>::type end( T& r )
{

    using namespace range_detail;

    return range_end( r );
}

template< class T >
inline typename range_iterator<const T>::type end( const T& r )
{

    using namespace range_detail;

    return range_end( r );
}

    }
}



namespace boost
{
    namespace range_adl_barrier
    {
        template< class T >
        inline typename range_iterator<const T>::type
        const_end( const T& r )
        {
            return boost::range_adl_barrier::end( r );
        }
    }
    using namespace range_adl_barrier;
}
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/functions.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/range/size.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/size.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/size_type.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/size_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/difference_type.hpp" 1
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/difference_type.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/range/has_range_iterator.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/range/has_range_iterator.hpp"
namespace boost
{
    namespace range_detail
    {
        template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_type { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::type>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };

        template<class T, class Enabler = void>
        struct has_range_iterator_impl
            : boost::mpl::false_
        {
        };

        template<class T>
        struct has_range_iterator_impl<
            T,
            typename ::boost::enable_if<
                typename mpl::eval_if<is_const<T>,
                    has_type<range_const_iterator<
                                typename remove_const<T>::type> >,
                    has_type<range_mutable_iterator<T> >
                >::type
            >::type
        >
            : boost::mpl::true_
        {
        };

        template<class T, class Enabler = void>
        struct has_range_const_iterator_impl
            : boost::mpl::false_
        {
        };

        template<class T>
        struct has_range_const_iterator_impl<
            T,
            typename ::boost::enable_if<
                has_type<range_const_iterator<T> >
            >::type
        >
            : boost::mpl::true_
        {
        };

    }

    template<class T>
    struct has_range_iterator
        : range_detail::has_range_iterator_impl<
            typename remove_reference<T>::type>
    {};

    template<class T>
    struct has_range_const_iterator
        : range_detail::has_range_const_iterator_impl<
            typename remove_reference<T>::type>
    {};
}
# 21 "D:\\my_project\\boost_1_65_1\\boost/range/difference_type.hpp" 2




namespace boost
{
    namespace range_detail
    {
        template< class T, bool B = has_type<range_iterator<T> >::value >
        struct range_difference
        { };

        template< class T >
        struct range_difference<T, true>
          : iterator_difference<
                typename range_iterator<T>::type
            >
        { };
    }

    template< class T >
    struct range_difference
      : range_detail::range_difference<typename remove_reference<T>::type>
    { };
}
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/size_type.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/range/concepts.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/range/concepts.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/assert.hpp" 1
# 35 "D:\\my_project\\boost_1_65_1\\boost/concept/assert.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/general.hpp" 1







# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 8 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/general.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/backward_compatibility.hpp" 1






namespace boost
{
  namespace concepts {}




}
# 9 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/general.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/has_constraints.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/has_constraints.hpp"
namespace boost { namespace concepts {

namespace detail
{



  typedef char yes;
  typedef char (&no)[2];

  template <class Model, void (Model::*)()>
  struct wrap_constraints {};
# 31 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/has_constraints.hpp"
  template <class Model>
  inline yes has_constraints_(Model*, wrap_constraints<Model,&Model::constraints>* = 0);
  inline no has_constraints_(...);

}



template <class Model>
struct not_satisfied
{
    static const bool value = sizeof( detail::has_constraints_((Model*)0) ) == sizeof(detail::yes);


    typedef mpl::bool_<value> type;
};

}}
# 12 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/general.hpp" 2






namespace boost { namespace concepts {

template <class ModelFn>
struct requirement_;

namespace detail
{
  template <void(*)()> struct instantiate {};
}

template <class Model>
struct requirement
{
    static void failed() { ((Model*)0)->~Model(); }
};

struct failed {};

template <class Model>
struct requirement<failed ************ Model::************>
{
    static void failed() { ((Model*)0)->~Model(); }
};



template <class Model>
struct constraint
{
    static void failed() { ((Model*)0)->constraints(); }
};

template <class Model>
struct requirement_<void(*)(Model)>
  : mpl::if_<
        concepts::not_satisfied<Model>
      , constraint<Model>
      , requirement<failed ************ Model::************>
    >::type
{};
# 75 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/general.hpp"
}}
# 35 "D:\\my_project\\boost_1_65_1\\boost/concept/assert.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp" 2



# 1 "D:\\my_project\\boost_1_65_1\\boost/type_traits/conversion_traits.hpp" 1
# 23 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp" 2








# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/usage.hpp" 1
# 11 "D:\\my_project\\boost_1_65_1\\boost/concept/usage.hpp"
namespace boost { namespace concepts {

template <class Model>
struct usage_requirements
{
    ~usage_requirements() { ((Model*)0)->~Model(); }
};
# 34 "D:\\my_project\\boost_1_65_1\\boost/concept/usage.hpp"
}}
# 31 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/concept_def.hpp" 1





# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/inc.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/if.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/debug/error.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 12 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/detail/auto_rec.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2
# 44 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/expr_iif.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/control/iif.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/detail/for.hpp" 2
# 44 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/repetition/for.hpp" 2
# 20 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/seq.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/seq.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/seq.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/elem.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/elem.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/elem.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/facilities/empty.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/elem.hpp" 2
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/seq.hpp" 2
# 21 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp" 2
# 22 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/arithmetic/dec.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/bool.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/logical/compl.hpp" 1
# 18 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp" 1
# 19 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/detail/is_empty.hpp" 2
# 23 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/elem.hpp" 1
# 24 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/tuple/rem.hpp" 1
# 25 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/for_each_i.hpp" 2
# 6 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/concept_def.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/enum.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/enum.hpp"
# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 15 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/enum.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/config/config.hpp" 1
# 16 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/enum.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/size.hpp" 1
# 17 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/seq/enum.hpp" 2
# 7 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/concept_def.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/comma_if.hpp" 1
# 8 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/concept_def.hpp" 2

# 1 "D:\\my_project\\boost_1_65_1\\boost/preprocessor/cat.hpp" 1
# 9 "D:\\my_project\\boost_1_65_1\\boost/concept/detail/concept_def.hpp" 2
# 32 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp" 2



#pragma warning(push)
#pragma warning(disable: 4510)
#pragma warning(disable: 4610)


namespace boost
{





  template <class Model>
  inline void function_requires(Model* = 0)
  {
      typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(Model)>::failed> boost_concept_check50 ;
  }
  template <class T> inline void ignore_unused_variable_warning(T const&) {}
# 70 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp"
  template < typename T > struct Integer; template < typename T > struct IntegerConcept : Integer< T > { }; template < typename T > struct Integer
  {
      typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<Integer>)>::failed> boost_concept_check72 ; ~Integer()
        {
            x.error_type_must_be_an_integer_type();
        }
   private:
      T x;
  };

  template <> struct Integer<char> {};
  template <> struct Integer<signed char> {};
  template <> struct Integer<unsigned char> {};
  template <> struct Integer<short> {};
  template <> struct Integer<unsigned short> {};
  template <> struct Integer<int> {};
  template <> struct Integer<unsigned int> {};
  template <> struct Integer<long> {};
  template <> struct Integer<unsigned long> {};

  template <> struct Integer< ::boost::long_long_type> {};
  template <> struct Integer< ::boost::ulong_long_type> {};





  template < typename T > struct SignedInteger; template < typename T > struct SignedIntegerConcept : SignedInteger< T > { }; template < typename T > struct SignedInteger {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<SignedInteger>)>::failed> boost_concept_check98 ; ~SignedInteger() {
      x.error_type_must_be_a_signed_integer_type();
    }
   private:
    T x;
  };
  template <> struct SignedInteger<signed char> { };
  template <> struct SignedInteger<short> {};
  template <> struct SignedInteger<int> {};
  template <> struct SignedInteger<long> {};

  template <> struct SignedInteger< ::boost::long_long_type> {};




  template < typename T > struct UnsignedInteger; template < typename T > struct UnsignedIntegerConcept : UnsignedInteger< T > { }; template < typename T > struct UnsignedInteger {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<UnsignedInteger>)>::failed> boost_concept_check115 ; ~UnsignedInteger() {
      x.error_type_must_be_an_unsigned_integer_type();
    }
   private:
    T x;
  };

  template <> struct UnsignedInteger<unsigned char> {};
  template <> struct UnsignedInteger<unsigned short> {};
  template <> struct UnsignedInteger<unsigned int> {};
  template <> struct UnsignedInteger<unsigned long> {};

  template <> struct UnsignedInteger< ::boost::ulong_long_type> {};







  template < typename TT > struct DefaultConstructible; template < typename TT > struct DefaultConstructibleConcept : DefaultConstructible< TT > { }; template < typename TT > struct DefaultConstructible
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<DefaultConstructible>)>::failed> boost_concept_check137 ; ~DefaultConstructible() {
      TT a;
      ignore_unused_variable_warning(a);
    }
  };

  template < typename TT > struct Assignable; template < typename TT > struct AssignableConcept : Assignable< TT > { }; template < typename TT > struct Assignable
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<Assignable>)>::failed> boost_concept_check145 ; ~Assignable() {



      const_constraints(b);
    }
   private:
    void const_constraints(const TT& x) {



      ignore_unused_variable_warning(x);

    }
   private:
    TT a;
    TT b;
  };


  template < typename TT > struct CopyConstructible; template < typename TT > struct CopyConstructibleConcept : CopyConstructible< TT > { }; template < typename TT > struct CopyConstructible
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<CopyConstructible>)>::failed> boost_concept_check167 ; ~CopyConstructible() {
      TT a(b);
      TT* ptr = &a;
      const_constraints(a);
      ignore_unused_variable_warning(ptr);
    }
   private:
    void const_constraints(const TT& a) {
      TT c(a);
      const TT* ptr = &a;
      ignore_unused_variable_warning(c);
      ignore_unused_variable_warning(ptr);
    }
    TT b;
  };


  template < typename TT > struct SGIAssignable; template < typename TT > struct SGIAssignableConcept : SGIAssignable< TT > { }; template < typename TT > struct SGIAssignable
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<SGIAssignable>)>::failed> boost_concept_check186 ; ~SGIAssignable() {
      TT c(a);



      const_constraints(b);
      ignore_unused_variable_warning(c);
    }
   private:
    void const_constraints(const TT& x) {
      TT c(x);



      ignore_unused_variable_warning(c);
    }
    TT a;
    TT b;
  };

  template < typename X , typename Y > struct Convertible; template < typename X , typename Y > struct ConvertibleConcept : Convertible< X, Y > { }; template < typename X , typename Y > struct Convertible
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<Convertible>)>::failed> boost_concept_check208 ; ~Convertible() {
      Y y = x;
      ignore_unused_variable_warning(y);
    }
   private:
    X x;
  };
# 225 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp"
  template <class TT>
  void require_boolean_expr(const TT& t) {
    bool x = t;
    ignore_unused_variable_warning(x);
  }

  template < typename TT > struct EqualityComparable; template < typename TT > struct EqualityComparableConcept : EqualityComparable< TT > { }; template < typename TT > struct EqualityComparable
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<EqualityComparable>)>::failed> boost_concept_check233 ; ~EqualityComparable() {
      require_boolean_expr(a == b);
      require_boolean_expr(a != b);
    }
   private:
    TT a, b;
  };

  template < typename TT > struct LessThanComparable; template < typename TT > struct LessThanComparableConcept : LessThanComparable< TT > { }; template < typename TT > struct LessThanComparable
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<LessThanComparable>)>::failed> boost_concept_check243 ; ~LessThanComparable() {
      require_boolean_expr(a < b);
    }
   private:
    TT a, b;
  };


  template < typename TT > struct Comparable; template < typename TT > struct ComparableConcept : Comparable< TT > { }; template < typename TT > struct Comparable
  {
    typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<Comparable>)>::failed> boost_concept_check253 ; ~Comparable() {
      require_boolean_expr(a < b);
      require_boolean_expr(a > b);
      require_boolean_expr(a <= b);
      require_boolean_expr(a >= b);
    }
   private:
    TT a, b;
  };
# 283 "D:\\my_project\\boost_1_65_1\\boost/concept_check.hpp"
  template < typename First , typename Second > struct EqualOp; template < typename First , typename Second > struct EqualOpConcept : EqualOp< First, Second > { }; template < typename First , typename Second > struct EqualOp { typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<EqualOp>)>::failed> boost_concept_check283 ; ~EqualOp() { (void)constraints_(); } private: bool constraints_() { return a == b; } First a; Second b; };
  template < typename First , typename Second > struct NotEqualOp; template < typename First , typename Second > struct NotEqualOpConcept : NotEqualOp< First, Second > { }; template < typename First , typename Second > struct NotEqualOp { typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<NotEqualOp>)>::failed> boost_concept_check284 ; ~NotEqualOp() { (void)constraints_(); } private: bool constraints_() { return a != b; } First a; Second b; };
  template < typename First , typename Second > struct LessThanOp; template < typename First , typename Second > struct LessThanOpConcept : LessThanOp< First, Second > { }; template < typename First , typename Second > struct LessThanOp { typedef ::boost::concepts::detail::instantiate< &::boost::concepts::requirement_<void(*)(boost::concepts::usage_requirements<LessThanOp>)>::failed> boost_concept_check285 ; ~LessThanOp() { (void)constraints_(); } private: bool constraints_() { return a < b; } First a; Second b; };
  template < typename First , typename Second > struct LessEqualOp; template < typename First , typename Second > struct LessEqualOpConcept : LessEqualOp< First, Second > { }; template < typename First , typenam